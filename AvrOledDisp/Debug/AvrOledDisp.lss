
AvrOledDisp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b9c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000144  00800060  00002b9c  00002c30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000408  008001a4  008001a4  00002d74  2**0
                  ALLOC
  3 .debug_aranges 00000328  00000000  00000000  00002d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000005d2  00000000  00000000  0000309c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000038ae  00000000  00000000  0000366e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000017e6  00000000  00000000  00006f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003526  00000000  00000000  00008702  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000490  00000000  00000000  0000bc28  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b59  00000000  00000000  0000c0b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001cb7  00000000  00000000  0000cc11  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 000247d0  00000000  00000000  0000e8c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000258  00000000  00000000  00033098  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 10 04 	jmp	0x820	; 0x820 <__ctors_end>
       4:	0c 94 34 0d 	jmp	0x1a68	; 0x1a68 <__vector_1>
       8:	0c 94 58 0d 	jmp	0x1ab0	; 0x1ab0 <__vector_2>
       c:	0c 94 7c 0d 	jmp	0x1af8	; 0x1af8 <__vector_3>
      10:	0c 94 2d 04 	jmp	0x85a	; 0x85a <__bad_interrupt>
      14:	0c 94 2d 04 	jmp	0x85a	; 0x85a <__bad_interrupt>
      18:	0c 94 2d 04 	jmp	0x85a	; 0x85a <__bad_interrupt>
      1c:	0c 94 2d 04 	jmp	0x85a	; 0x85a <__bad_interrupt>
      20:	0c 94 2d 04 	jmp	0x85a	; 0x85a <__bad_interrupt>
      24:	0c 94 2d 04 	jmp	0x85a	; 0x85a <__bad_interrupt>
      28:	0c 94 2d 04 	jmp	0x85a	; 0x85a <__bad_interrupt>
      2c:	0c 94 2d 04 	jmp	0x85a	; 0x85a <__bad_interrupt>
      30:	0c 94 2d 04 	jmp	0x85a	; 0x85a <__bad_interrupt>
      34:	0c 94 2d 04 	jmp	0x85a	; 0x85a <__bad_interrupt>
      38:	0c 94 2d 04 	jmp	0x85a	; 0x85a <__bad_interrupt>
      3c:	0c 94 2d 04 	jmp	0x85a	; 0x85a <__bad_interrupt>
      40:	0c 94 2d 04 	jmp	0x85a	; 0x85a <__bad_interrupt>
      44:	0c 94 2d 04 	jmp	0x85a	; 0x85a <__bad_interrupt>
      48:	0c 94 2d 04 	jmp	0x85a	; 0x85a <__bad_interrupt>
      4c:	0c 94 2d 04 	jmp	0x85a	; 0x85a <__bad_interrupt>
      50:	0c 94 2d 04 	jmp	0x85a	; 0x85a <__bad_interrupt>

00000054 <OledFontTable>:
      54:	00 00 00 00 00 00 00 2f 00 00 00 07 00 07 00 14     ......./........
      64:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
      74:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      84:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 00 a0 60     ....>....>.....`
      94:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      a4:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
      b4:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
      c4:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
      d4:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
      e4:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
      f4:	32 49 59 51 3e 7c 12 11 12 7c 7f 49 49 49 36 3e     2IYQ>|...|.III6>
     104:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     114:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     124:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     134:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     144:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     154:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     164:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     174:	08 07 61 51 49 45 43 00 7f 41 41 00 55 aa 55 aa     ..aQIEC..AA.U.U.
     184:	55 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40     U.AA.......@@@@@
     194:	00 03 05 00 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     1a4:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     1b4:	09 01 02 18 a4 a4 a4 7c 7f 08 04 04 78 00 44 7d     .......|....x.D}
     1c4:	40 00 40 80 84 7d 00 7f 10 28 44 00 00 41 7f 40     @.@..}...(D..A.@
     1d4:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     1e4:	fc 24 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     .$$$..$$..|....H
     1f4:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     204:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 1c a0 a0     @ .<@0@<D(.(D...
     214:	a0 7c 44 64 54 4c 44 00 10 7c 82 00 00 00 ff 00     .|DdTLD..|......
     224:	00 00 82 7c 10 00 00 06 09 09 06                    ...|.......

0000022f <ssd1306xled_font8x16>:
	...
     23f:	00 00 00 f8 00 00 00 00 00 00 00 33 30 00 00 00     ...........30...
     24f:	00 10 0c 06 10 0c 06 00 00 00 00 00 00 00 00 00     ................
     25f:	40 c0 78 40 c0 78 40 00 04 3f 04 04 3f 04 04 00     @.x@.x@..?..?...
     26f:	00 70 88 fc 08 30 00 00 00 18 20 ff 21 1e 00 00     .p...0.... .!...
     27f:	f0 08 f0 00 e0 18 00 00 00 21 1c 03 1e 21 1e 00     .........!...!..
     28f:	00 f0 08 88 70 00 00 00 1e 21 23 24 19 27 21 10     ....p....!#$.'!.
     29f:	10 16 0e 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     2af:	00 00 00 e0 18 04 02 00 00 00 00 07 18 20 40 00     ............. @.
     2bf:	00 02 04 18 e0 00 00 00 00 40 20 18 07 00 00 00     .........@ .....
     2cf:	40 40 80 f0 80 40 40 00 02 02 01 0f 01 02 02 00     @@...@@.........
     2df:	00 00 00 f0 00 00 00 00 01 01 01 1f 01 01 01 00     ................
	...
     2f7:	80 b0 70 00 00 00 00 00 00 00 00 00 00 00 00 00     ..p.............
     307:	00 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
     317:	00 30 30 00 00 00 00 00 00 00 00 00 80 60 18 04     .00..........`..
     327:	00 60 18 06 01 00 00 00 00 e0 10 08 08 10 e0 00     .`..............
     337:	00 0f 10 20 20 10 0f 00 00 10 10 f8 00 00 00 00     ...  ...........
     347:	00 20 20 3f 20 20 00 00 00 70 08 08 08 88 70 00     .  ?  ...p....p.
     357:	00 30 28 24 22 21 30 00 00 30 08 88 88 48 30 00     .0($"!0..0...H0.
     367:	00 18 20 20 20 11 0e 00 00 00 c0 20 10 f8 00 00     ..   ...... ....
     377:	00 07 04 24 24 3f 24 00 00 f8 08 88 88 08 08 00     ...$$?$.........
     387:	00 19 21 20 20 11 0e 00 00 e0 10 88 88 18 00 00     ..!  ...........
     397:	00 0f 11 20 20 11 0e 00 00 38 08 08 c8 38 08 00     ...  ....8...8..
     3a7:	00 00 00 3f 00 00 00 00 00 70 88 08 08 88 70 00     ...?.....p....p.
     3b7:	00 1c 22 21 21 22 1c 00 00 e0 10 08 08 10 e0 00     .."!!"..........
     3c7:	00 00 31 22 22 11 0f 00 00 00 00 c0 c0 00 00 00     ..1""...........
     3d7:	00 00 00 30 30 00 00 00 00 00 00 80 00 00 00 00     ...00...........
     3e7:	00 00 80 60 00 00 00 00 00 00 80 40 20 10 08 00     ...`.......@ ...
     3f7:	00 01 02 04 08 10 20 00 40 40 40 40 40 40 40 00     ...... .@@@@@@@.
     407:	04 04 04 04 04 04 04 00 00 08 10 20 40 80 00 00     ........... @...
     417:	00 20 10 08 04 02 01 00 00 70 48 08 08 08 f0 00     . .......pH.....
     427:	00 00 00 30 36 01 00 00 c0 30 c8 28 e8 10 e0 00     ...06....0.(....
     437:	07 18 27 24 23 14 0b 00 00 00 c0 38 e0 00 00 00     ..'$#......8....
     447:	20 3c 23 02 02 27 38 20 08 f8 88 88 88 70 00 00      <#..'8 .....p..
     457:	20 3f 20 20 20 11 0e 00 c0 30 08 08 08 08 38 00      ?   ....0....8.
     467:	07 18 20 20 20 10 08 00 08 f8 08 08 08 10 e0 00     ..   ...........
     477:	20 3f 20 20 20 10 0f 00 08 f8 88 88 e8 08 10 00      ?   ...........
     487:	20 3f 20 20 23 20 18 00 08 f8 88 88 e8 08 10 00      ?  # ..........
     497:	20 3f 20 00 03 00 00 00 c0 30 08 08 08 38 00 00      ? ......0...8..
     4a7:	07 18 20 20 22 1e 02 00 08 f8 08 00 00 08 f8 08     ..  "...........
     4b7:	20 3f 21 01 01 21 3f 20 00 08 08 f8 08 08 00 00      ?!..!? ........
     4c7:	00 20 20 3f 20 20 00 00 00 00 08 08 f8 08 08 00     .  ?  ..........
     4d7:	c0 80 80 80 7f 00 00 00 08 f8 88 c0 28 18 08 00     ............(...
     4e7:	20 3f 20 01 26 38 20 00 08 f8 08 00 00 00 00 00      ? .&8 .........
     4f7:	20 3f 20 20 20 20 30 00 08 f8 f8 00 f8 f8 08 00      ?    0.........
     507:	20 3f 00 3f 00 3f 20 00 08 f8 30 c0 00 08 f8 08      ?.?.? ...0.....
     517:	20 3f 20 00 07 18 3f 00 e0 10 08 08 08 10 e0 00      ? ...?.........
     527:	0f 10 20 20 20 10 0f 00 08 f8 08 08 08 08 f0 00     ..   ...........
     537:	20 3f 21 01 01 01 00 00 e0 10 08 08 08 10 e0 00      ?!.............
     547:	0f 18 24 24 38 50 4f 00 08 f8 88 88 88 88 70 00     ..$$8PO.......p.
     557:	20 3f 20 00 03 0c 30 20 00 70 88 08 08 08 38 00      ? ...0 .p....8.
     567:	00 38 20 21 21 22 1c 00 18 08 08 f8 08 08 18 00     .8 !!"..........
     577:	00 00 20 3f 20 00 00 00 08 f8 08 00 00 08 f8 08     .. ? ...........
     587:	00 1f 20 20 20 20 1f 00 08 78 88 00 00 c8 38 08     ..    ...x....8.
     597:	00 00 07 38 0e 01 00 00 f8 08 00 f8 00 08 f8 00     ...8............
     5a7:	03 3c 07 00 07 3c 03 00 08 18 68 80 80 68 18 08     .<...<....h..h..
     5b7:	20 30 2c 03 03 2c 30 20 08 38 c8 00 c8 38 08 00      0,..,0 .8...8..
     5c7:	00 00 20 3f 20 00 00 00 10 08 08 08 c8 38 08 00     .. ? ........8..
     5d7:	20 38 26 21 20 20 18 00 00 00 00 fe 02 02 02 00      8&!  ..........
     5e7:	00 00 00 7f 40 40 40 00 00 0c 30 c0 00 00 00 00     ....@@@...0.....
     5f7:	00 00 00 01 06 38 c0 00 00 02 02 02 fe 00 00 00     .....8..........
     607:	00 40 40 40 7f 00 00 00 00 00 04 02 02 02 04 00     .@@@............
	...
     627:	80 80 80 80 80 80 80 80 00 02 02 04 00 00 00 00     ................
	...
     63f:	00 00 80 80 80 80 00 00 00 19 24 22 22 22 3f 20     ..........$"""? 
     64f:	08 f8 00 80 80 00 00 00 00 3f 11 20 20 11 0e 00     .........?.  ...
     65f:	00 00 00 80 80 80 00 00 00 0e 11 20 20 20 11 00     ...........   ..
     66f:	00 00 00 80 80 88 f8 00 00 0e 11 20 20 10 3f 20     ...........  .? 
     67f:	00 00 80 80 80 80 00 00 00 1f 22 22 22 22 13 00     ..........""""..
     68f:	00 80 80 f0 88 88 88 18 00 20 20 3f 20 20 00 00     .........  ?  ..
     69f:	00 00 80 80 80 80 80 00 00 6b 94 94 94 93 60 00     .........k....`.
     6af:	08 f8 00 80 80 80 00 00 20 3f 21 00 00 20 3f 20     ........ ?!.. ? 
     6bf:	00 80 98 98 00 00 00 00 00 20 20 3f 20 20 00 00     .........  ?  ..
     6cf:	00 00 00 80 98 98 00 00 00 c0 80 80 80 7f 00 00     ................
     6df:	08 f8 00 00 80 80 80 00 20 3f 24 02 2d 30 20 00     ........ ?$.-0 .
     6ef:	00 08 08 f8 00 00 00 00 00 20 20 3f 20 20 00 00     .........  ?  ..
     6ff:	80 80 80 80 80 80 80 00 20 3f 20 00 3f 20 00 3f     ........ ? .? .?
     70f:	80 80 00 80 80 80 00 00 20 3f 21 00 00 20 3f 20     ........ ?!.. ? 
     71f:	00 00 80 80 80 80 00 00 00 1f 20 20 20 20 1f 00     ..........    ..
     72f:	80 80 00 80 80 00 00 00 80 ff a1 20 20 11 0e 00     ...........  ...
     73f:	00 00 00 80 80 80 80 00 00 0e 11 20 20 a0 ff 80     ...........  ...
     74f:	80 80 80 00 80 80 80 00 20 20 3f 21 20 00 01 00     ........  ?! ...
     75f:	00 00 80 80 80 80 80 00 00 33 24 24 24 24 19 00     .........3$$$$..
     76f:	00 80 80 e0 80 80 00 00 00 00 00 1f 20 20 00 00     ............  ..
     77f:	80 80 00 00 00 80 80 00 00 1f 20 20 20 10 3f 20     ..........   .? 
     78f:	80 80 80 00 00 80 80 80 00 01 0e 30 08 06 01 00     ...........0....
     79f:	80 80 00 80 00 80 80 80 0f 30 0c 03 0c 30 0f 00     .........0...0..
     7af:	00 80 80 00 80 80 80 00 00 20 31 2e 0e 31 20 00     ......... 1..1 .
     7bf:	80 80 80 00 00 80 80 80 80 81 8e 70 18 06 01 00     ...........p....
     7cf:	00 80 80 80 80 80 80 00 00 21 30 2c 22 21 30 00     .........!0,"!0.
     7df:	00 00 00 00 80 7c 02 02 00 00 00 00 00 3f 40 40     .....|.......?@@
     7ef:	00 00 00 00 ff 00 00 00 00 00 00 00 ff 00 00 00     ................
     7ff:	00 02 02 7c 80 00 00 00 00 40 40 3f 00 00 00 00     ...|.....@@?....
     80f:	00 06 01 01 02 02 04 04 00 00 00 00 00 00 00 00     ................
	...

00000820 <__ctors_end>:
     820:	11 24       	eor	r1, r1
     822:	1f be       	out	0x3f, r1	; 63
     824:	cf e5       	ldi	r28, 0x5F	; 95
     826:	d8 e0       	ldi	r29, 0x08	; 8
     828:	de bf       	out	0x3e, r29	; 62
     82a:	cd bf       	out	0x3d, r28	; 61

0000082c <__do_copy_data>:
     82c:	11 e0       	ldi	r17, 0x01	; 1
     82e:	a0 e6       	ldi	r26, 0x60	; 96
     830:	b0 e0       	ldi	r27, 0x00	; 0
     832:	ec e9       	ldi	r30, 0x9C	; 156
     834:	fb e2       	ldi	r31, 0x2B	; 43
     836:	02 c0       	rjmp	.+4      	; 0x83c <.do_copy_data_start>

00000838 <.do_copy_data_loop>:
     838:	05 90       	lpm	r0, Z+
     83a:	0d 92       	st	X+, r0

0000083c <.do_copy_data_start>:
     83c:	a4 3a       	cpi	r26, 0xA4	; 164
     83e:	b1 07       	cpc	r27, r17
     840:	d9 f7       	brne	.-10     	; 0x838 <.do_copy_data_loop>

00000842 <__do_clear_bss>:
     842:	15 e0       	ldi	r17, 0x05	; 5
     844:	a4 ea       	ldi	r26, 0xA4	; 164
     846:	b1 e0       	ldi	r27, 0x01	; 1
     848:	01 c0       	rjmp	.+2      	; 0x84c <.do_clear_bss_start>

0000084a <.do_clear_bss_loop>:
     84a:	1d 92       	st	X+, r1

0000084c <.do_clear_bss_start>:
     84c:	ac 3a       	cpi	r26, 0xAC	; 172
     84e:	b1 07       	cpc	r27, r17
     850:	e1 f7       	brne	.-8      	; 0x84a <.do_clear_bss_loop>
     852:	0e 94 23 15 	call	0x2a46	; 0x2a46 <main>
     856:	0c 94 cc 15 	jmp	0x2b98	; 0x2b98 <_exit>

0000085a <__bad_interrupt>:
     85a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000085e <_fpadd_parts>:
     85e:	a0 e0       	ldi	r26, 0x00	; 0
     860:	b0 e0       	ldi	r27, 0x00	; 0
     862:	e5 e3       	ldi	r30, 0x35	; 53
     864:	f4 e0       	ldi	r31, 0x04	; 4
     866:	0c 94 95 15 	jmp	0x2b2a	; 0x2b2a <__prologue_saves__>
     86a:	dc 01       	movw	r26, r24
     86c:	2b 01       	movw	r4, r22
     86e:	fa 01       	movw	r30, r20
     870:	9c 91       	ld	r25, X
     872:	92 30       	cpi	r25, 0x02	; 2
     874:	08 f4       	brcc	.+2      	; 0x878 <__stack+0x19>
     876:	39 c1       	rjmp	.+626    	; 0xaea <__stack+0x28b>
     878:	eb 01       	movw	r28, r22
     87a:	88 81       	ld	r24, Y
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	08 f4       	brcc	.+2      	; 0x882 <__stack+0x23>
     880:	33 c1       	rjmp	.+614    	; 0xae8 <__stack+0x289>
     882:	94 30       	cpi	r25, 0x04	; 4
     884:	69 f4       	brne	.+26     	; 0x8a0 <__stack+0x41>
     886:	84 30       	cpi	r24, 0x04	; 4
     888:	09 f0       	breq	.+2      	; 0x88c <__stack+0x2d>
     88a:	2f c1       	rjmp	.+606    	; 0xaea <__stack+0x28b>
     88c:	11 96       	adiw	r26, 0x01	; 1
     88e:	9c 91       	ld	r25, X
     890:	11 97       	sbiw	r26, 0x01	; 1
     892:	89 81       	ldd	r24, Y+1	; 0x01
     894:	98 17       	cp	r25, r24
     896:	09 f4       	brne	.+2      	; 0x89a <__stack+0x3b>
     898:	28 c1       	rjmp	.+592    	; 0xaea <__stack+0x28b>
     89a:	a4 e8       	ldi	r26, 0x84	; 132
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	25 c1       	rjmp	.+586    	; 0xaea <__stack+0x28b>
     8a0:	84 30       	cpi	r24, 0x04	; 4
     8a2:	09 f4       	brne	.+2      	; 0x8a6 <__stack+0x47>
     8a4:	21 c1       	rjmp	.+578    	; 0xae8 <__stack+0x289>
     8a6:	82 30       	cpi	r24, 0x02	; 2
     8a8:	a9 f4       	brne	.+42     	; 0x8d4 <__stack+0x75>
     8aa:	92 30       	cpi	r25, 0x02	; 2
     8ac:	09 f0       	breq	.+2      	; 0x8b0 <__stack+0x51>
     8ae:	1d c1       	rjmp	.+570    	; 0xaea <__stack+0x28b>
     8b0:	9a 01       	movw	r18, r20
     8b2:	ad 01       	movw	r20, r26
     8b4:	88 e0       	ldi	r24, 0x08	; 8
     8b6:	ea 01       	movw	r28, r20
     8b8:	09 90       	ld	r0, Y+
     8ba:	ae 01       	movw	r20, r28
     8bc:	e9 01       	movw	r28, r18
     8be:	09 92       	st	Y+, r0
     8c0:	9e 01       	movw	r18, r28
     8c2:	81 50       	subi	r24, 0x01	; 1
     8c4:	c1 f7       	brne	.-16     	; 0x8b6 <__stack+0x57>
     8c6:	e2 01       	movw	r28, r4
     8c8:	89 81       	ldd	r24, Y+1	; 0x01
     8ca:	11 96       	adiw	r26, 0x01	; 1
     8cc:	9c 91       	ld	r25, X
     8ce:	89 23       	and	r24, r25
     8d0:	81 83       	std	Z+1, r24	; 0x01
     8d2:	08 c1       	rjmp	.+528    	; 0xae4 <__stack+0x285>
     8d4:	92 30       	cpi	r25, 0x02	; 2
     8d6:	09 f4       	brne	.+2      	; 0x8da <__stack+0x7b>
     8d8:	07 c1       	rjmp	.+526    	; 0xae8 <__stack+0x289>
     8da:	12 96       	adiw	r26, 0x02	; 2
     8dc:	2d 90       	ld	r2, X+
     8de:	3c 90       	ld	r3, X
     8e0:	13 97       	sbiw	r26, 0x03	; 3
     8e2:	eb 01       	movw	r28, r22
     8e4:	8a 81       	ldd	r24, Y+2	; 0x02
     8e6:	9b 81       	ldd	r25, Y+3	; 0x03
     8e8:	14 96       	adiw	r26, 0x04	; 4
     8ea:	ad 90       	ld	r10, X+
     8ec:	bd 90       	ld	r11, X+
     8ee:	cd 90       	ld	r12, X+
     8f0:	dc 90       	ld	r13, X
     8f2:	17 97       	sbiw	r26, 0x07	; 7
     8f4:	ec 80       	ldd	r14, Y+4	; 0x04
     8f6:	fd 80       	ldd	r15, Y+5	; 0x05
     8f8:	0e 81       	ldd	r16, Y+6	; 0x06
     8fa:	1f 81       	ldd	r17, Y+7	; 0x07
     8fc:	91 01       	movw	r18, r2
     8fe:	28 1b       	sub	r18, r24
     900:	39 0b       	sbc	r19, r25
     902:	b9 01       	movw	r22, r18
     904:	37 ff       	sbrs	r19, 7
     906:	04 c0       	rjmp	.+8      	; 0x910 <__stack+0xb1>
     908:	66 27       	eor	r22, r22
     90a:	77 27       	eor	r23, r23
     90c:	62 1b       	sub	r22, r18
     90e:	73 0b       	sbc	r23, r19
     910:	60 32       	cpi	r22, 0x20	; 32
     912:	71 05       	cpc	r23, r1
     914:	0c f0       	brlt	.+2      	; 0x918 <__stack+0xb9>
     916:	61 c0       	rjmp	.+194    	; 0x9da <__stack+0x17b>
     918:	12 16       	cp	r1, r18
     91a:	13 06       	cpc	r1, r19
     91c:	6c f5       	brge	.+90     	; 0x978 <__stack+0x119>
     91e:	37 01       	movw	r6, r14
     920:	48 01       	movw	r8, r16
     922:	06 2e       	mov	r0, r22
     924:	04 c0       	rjmp	.+8      	; 0x92e <__stack+0xcf>
     926:	96 94       	lsr	r9
     928:	87 94       	ror	r8
     92a:	77 94       	ror	r7
     92c:	67 94       	ror	r6
     92e:	0a 94       	dec	r0
     930:	d2 f7       	brpl	.-12     	; 0x926 <__stack+0xc7>
     932:	21 e0       	ldi	r18, 0x01	; 1
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	40 e0       	ldi	r20, 0x00	; 0
     938:	50 e0       	ldi	r21, 0x00	; 0
     93a:	04 c0       	rjmp	.+8      	; 0x944 <__stack+0xe5>
     93c:	22 0f       	add	r18, r18
     93e:	33 1f       	adc	r19, r19
     940:	44 1f       	adc	r20, r20
     942:	55 1f       	adc	r21, r21
     944:	6a 95       	dec	r22
     946:	d2 f7       	brpl	.-12     	; 0x93c <__stack+0xdd>
     948:	21 50       	subi	r18, 0x01	; 1
     94a:	30 40       	sbci	r19, 0x00	; 0
     94c:	40 40       	sbci	r20, 0x00	; 0
     94e:	50 40       	sbci	r21, 0x00	; 0
     950:	2e 21       	and	r18, r14
     952:	3f 21       	and	r19, r15
     954:	40 23       	and	r20, r16
     956:	51 23       	and	r21, r17
     958:	21 15       	cp	r18, r1
     95a:	31 05       	cpc	r19, r1
     95c:	41 05       	cpc	r20, r1
     95e:	51 05       	cpc	r21, r1
     960:	21 f0       	breq	.+8      	; 0x96a <__stack+0x10b>
     962:	21 e0       	ldi	r18, 0x01	; 1
     964:	30 e0       	ldi	r19, 0x00	; 0
     966:	40 e0       	ldi	r20, 0x00	; 0
     968:	50 e0       	ldi	r21, 0x00	; 0
     96a:	79 01       	movw	r14, r18
     96c:	8a 01       	movw	r16, r20
     96e:	e6 28       	or	r14, r6
     970:	f7 28       	or	r15, r7
     972:	08 29       	or	r16, r8
     974:	19 29       	or	r17, r9
     976:	3c c0       	rjmp	.+120    	; 0x9f0 <__stack+0x191>
     978:	23 2b       	or	r18, r19
     97a:	d1 f1       	breq	.+116    	; 0x9f0 <__stack+0x191>
     97c:	26 0e       	add	r2, r22
     97e:	37 1e       	adc	r3, r23
     980:	35 01       	movw	r6, r10
     982:	46 01       	movw	r8, r12
     984:	06 2e       	mov	r0, r22
     986:	04 c0       	rjmp	.+8      	; 0x990 <__stack+0x131>
     988:	96 94       	lsr	r9
     98a:	87 94       	ror	r8
     98c:	77 94       	ror	r7
     98e:	67 94       	ror	r6
     990:	0a 94       	dec	r0
     992:	d2 f7       	brpl	.-12     	; 0x988 <__stack+0x129>
     994:	21 e0       	ldi	r18, 0x01	; 1
     996:	30 e0       	ldi	r19, 0x00	; 0
     998:	40 e0       	ldi	r20, 0x00	; 0
     99a:	50 e0       	ldi	r21, 0x00	; 0
     99c:	04 c0       	rjmp	.+8      	; 0x9a6 <__stack+0x147>
     99e:	22 0f       	add	r18, r18
     9a0:	33 1f       	adc	r19, r19
     9a2:	44 1f       	adc	r20, r20
     9a4:	55 1f       	adc	r21, r21
     9a6:	6a 95       	dec	r22
     9a8:	d2 f7       	brpl	.-12     	; 0x99e <__stack+0x13f>
     9aa:	21 50       	subi	r18, 0x01	; 1
     9ac:	30 40       	sbci	r19, 0x00	; 0
     9ae:	40 40       	sbci	r20, 0x00	; 0
     9b0:	50 40       	sbci	r21, 0x00	; 0
     9b2:	2a 21       	and	r18, r10
     9b4:	3b 21       	and	r19, r11
     9b6:	4c 21       	and	r20, r12
     9b8:	5d 21       	and	r21, r13
     9ba:	21 15       	cp	r18, r1
     9bc:	31 05       	cpc	r19, r1
     9be:	41 05       	cpc	r20, r1
     9c0:	51 05       	cpc	r21, r1
     9c2:	21 f0       	breq	.+8      	; 0x9cc <__stack+0x16d>
     9c4:	21 e0       	ldi	r18, 0x01	; 1
     9c6:	30 e0       	ldi	r19, 0x00	; 0
     9c8:	40 e0       	ldi	r20, 0x00	; 0
     9ca:	50 e0       	ldi	r21, 0x00	; 0
     9cc:	59 01       	movw	r10, r18
     9ce:	6a 01       	movw	r12, r20
     9d0:	a6 28       	or	r10, r6
     9d2:	b7 28       	or	r11, r7
     9d4:	c8 28       	or	r12, r8
     9d6:	d9 28       	or	r13, r9
     9d8:	0b c0       	rjmp	.+22     	; 0x9f0 <__stack+0x191>
     9da:	82 15       	cp	r24, r2
     9dc:	93 05       	cpc	r25, r3
     9de:	2c f0       	brlt	.+10     	; 0x9ea <__stack+0x18b>
     9e0:	1c 01       	movw	r2, r24
     9e2:	aa 24       	eor	r10, r10
     9e4:	bb 24       	eor	r11, r11
     9e6:	65 01       	movw	r12, r10
     9e8:	03 c0       	rjmp	.+6      	; 0x9f0 <__stack+0x191>
     9ea:	ee 24       	eor	r14, r14
     9ec:	ff 24       	eor	r15, r15
     9ee:	87 01       	movw	r16, r14
     9f0:	11 96       	adiw	r26, 0x01	; 1
     9f2:	9c 91       	ld	r25, X
     9f4:	d2 01       	movw	r26, r4
     9f6:	11 96       	adiw	r26, 0x01	; 1
     9f8:	8c 91       	ld	r24, X
     9fa:	98 17       	cp	r25, r24
     9fc:	09 f4       	brne	.+2      	; 0xa00 <__stack+0x1a1>
     9fe:	45 c0       	rjmp	.+138    	; 0xa8a <__stack+0x22b>
     a00:	99 23       	and	r25, r25
     a02:	39 f0       	breq	.+14     	; 0xa12 <__stack+0x1b3>
     a04:	a8 01       	movw	r20, r16
     a06:	97 01       	movw	r18, r14
     a08:	2a 19       	sub	r18, r10
     a0a:	3b 09       	sbc	r19, r11
     a0c:	4c 09       	sbc	r20, r12
     a0e:	5d 09       	sbc	r21, r13
     a10:	06 c0       	rjmp	.+12     	; 0xa1e <__stack+0x1bf>
     a12:	a6 01       	movw	r20, r12
     a14:	95 01       	movw	r18, r10
     a16:	2e 19       	sub	r18, r14
     a18:	3f 09       	sbc	r19, r15
     a1a:	40 0b       	sbc	r20, r16
     a1c:	51 0b       	sbc	r21, r17
     a1e:	57 fd       	sbrc	r21, 7
     a20:	08 c0       	rjmp	.+16     	; 0xa32 <__stack+0x1d3>
     a22:	11 82       	std	Z+1, r1	; 0x01
     a24:	33 82       	std	Z+3, r3	; 0x03
     a26:	22 82       	std	Z+2, r2	; 0x02
     a28:	24 83       	std	Z+4, r18	; 0x04
     a2a:	35 83       	std	Z+5, r19	; 0x05
     a2c:	46 83       	std	Z+6, r20	; 0x06
     a2e:	57 83       	std	Z+7, r21	; 0x07
     a30:	1d c0       	rjmp	.+58     	; 0xa6c <__stack+0x20d>
     a32:	81 e0       	ldi	r24, 0x01	; 1
     a34:	81 83       	std	Z+1, r24	; 0x01
     a36:	33 82       	std	Z+3, r3	; 0x03
     a38:	22 82       	std	Z+2, r2	; 0x02
     a3a:	88 27       	eor	r24, r24
     a3c:	99 27       	eor	r25, r25
     a3e:	dc 01       	movw	r26, r24
     a40:	82 1b       	sub	r24, r18
     a42:	93 0b       	sbc	r25, r19
     a44:	a4 0b       	sbc	r26, r20
     a46:	b5 0b       	sbc	r27, r21
     a48:	84 83       	std	Z+4, r24	; 0x04
     a4a:	95 83       	std	Z+5, r25	; 0x05
     a4c:	a6 83       	std	Z+6, r26	; 0x06
     a4e:	b7 83       	std	Z+7, r27	; 0x07
     a50:	0d c0       	rjmp	.+26     	; 0xa6c <__stack+0x20d>
     a52:	22 0f       	add	r18, r18
     a54:	33 1f       	adc	r19, r19
     a56:	44 1f       	adc	r20, r20
     a58:	55 1f       	adc	r21, r21
     a5a:	24 83       	std	Z+4, r18	; 0x04
     a5c:	35 83       	std	Z+5, r19	; 0x05
     a5e:	46 83       	std	Z+6, r20	; 0x06
     a60:	57 83       	std	Z+7, r21	; 0x07
     a62:	82 81       	ldd	r24, Z+2	; 0x02
     a64:	93 81       	ldd	r25, Z+3	; 0x03
     a66:	01 97       	sbiw	r24, 0x01	; 1
     a68:	93 83       	std	Z+3, r25	; 0x03
     a6a:	82 83       	std	Z+2, r24	; 0x02
     a6c:	24 81       	ldd	r18, Z+4	; 0x04
     a6e:	35 81       	ldd	r19, Z+5	; 0x05
     a70:	46 81       	ldd	r20, Z+6	; 0x06
     a72:	57 81       	ldd	r21, Z+7	; 0x07
     a74:	da 01       	movw	r26, r20
     a76:	c9 01       	movw	r24, r18
     a78:	01 97       	sbiw	r24, 0x01	; 1
     a7a:	a1 09       	sbc	r26, r1
     a7c:	b1 09       	sbc	r27, r1
     a7e:	8f 5f       	subi	r24, 0xFF	; 255
     a80:	9f 4f       	sbci	r25, 0xFF	; 255
     a82:	af 4f       	sbci	r26, 0xFF	; 255
     a84:	bf 43       	sbci	r27, 0x3F	; 63
     a86:	28 f3       	brcs	.-54     	; 0xa52 <__stack+0x1f3>
     a88:	0b c0       	rjmp	.+22     	; 0xaa0 <__stack+0x241>
     a8a:	91 83       	std	Z+1, r25	; 0x01
     a8c:	33 82       	std	Z+3, r3	; 0x03
     a8e:	22 82       	std	Z+2, r2	; 0x02
     a90:	ea 0c       	add	r14, r10
     a92:	fb 1c       	adc	r15, r11
     a94:	0c 1d       	adc	r16, r12
     a96:	1d 1d       	adc	r17, r13
     a98:	e4 82       	std	Z+4, r14	; 0x04
     a9a:	f5 82       	std	Z+5, r15	; 0x05
     a9c:	06 83       	std	Z+6, r16	; 0x06
     a9e:	17 83       	std	Z+7, r17	; 0x07
     aa0:	83 e0       	ldi	r24, 0x03	; 3
     aa2:	80 83       	st	Z, r24
     aa4:	24 81       	ldd	r18, Z+4	; 0x04
     aa6:	35 81       	ldd	r19, Z+5	; 0x05
     aa8:	46 81       	ldd	r20, Z+6	; 0x06
     aaa:	57 81       	ldd	r21, Z+7	; 0x07
     aac:	57 ff       	sbrs	r21, 7
     aae:	1a c0       	rjmp	.+52     	; 0xae4 <__stack+0x285>
     ab0:	c9 01       	movw	r24, r18
     ab2:	aa 27       	eor	r26, r26
     ab4:	97 fd       	sbrc	r25, 7
     ab6:	a0 95       	com	r26
     ab8:	ba 2f       	mov	r27, r26
     aba:	81 70       	andi	r24, 0x01	; 1
     abc:	90 70       	andi	r25, 0x00	; 0
     abe:	a0 70       	andi	r26, 0x00	; 0
     ac0:	b0 70       	andi	r27, 0x00	; 0
     ac2:	56 95       	lsr	r21
     ac4:	47 95       	ror	r20
     ac6:	37 95       	ror	r19
     ac8:	27 95       	ror	r18
     aca:	82 2b       	or	r24, r18
     acc:	93 2b       	or	r25, r19
     ace:	a4 2b       	or	r26, r20
     ad0:	b5 2b       	or	r27, r21
     ad2:	84 83       	std	Z+4, r24	; 0x04
     ad4:	95 83       	std	Z+5, r25	; 0x05
     ad6:	a6 83       	std	Z+6, r26	; 0x06
     ad8:	b7 83       	std	Z+7, r27	; 0x07
     ada:	82 81       	ldd	r24, Z+2	; 0x02
     adc:	93 81       	ldd	r25, Z+3	; 0x03
     ade:	01 96       	adiw	r24, 0x01	; 1
     ae0:	93 83       	std	Z+3, r25	; 0x03
     ae2:	82 83       	std	Z+2, r24	; 0x02
     ae4:	df 01       	movw	r26, r30
     ae6:	01 c0       	rjmp	.+2      	; 0xaea <__stack+0x28b>
     ae8:	d2 01       	movw	r26, r4
     aea:	cd 01       	movw	r24, r26
     aec:	cd b7       	in	r28, 0x3d	; 61
     aee:	de b7       	in	r29, 0x3e	; 62
     af0:	e2 e1       	ldi	r30, 0x12	; 18
     af2:	0c 94 b1 15 	jmp	0x2b62	; 0x2b62 <__epilogue_restores__>

00000af6 <__subsf3>:
     af6:	a0 e2       	ldi	r26, 0x20	; 32
     af8:	b0 e0       	ldi	r27, 0x00	; 0
     afa:	e1 e8       	ldi	r30, 0x81	; 129
     afc:	f5 e0       	ldi	r31, 0x05	; 5
     afe:	0c 94 a1 15 	jmp	0x2b42	; 0x2b42 <__prologue_saves__+0x18>
     b02:	69 83       	std	Y+1, r22	; 0x01
     b04:	7a 83       	std	Y+2, r23	; 0x02
     b06:	8b 83       	std	Y+3, r24	; 0x03
     b08:	9c 83       	std	Y+4, r25	; 0x04
     b0a:	2d 83       	std	Y+5, r18	; 0x05
     b0c:	3e 83       	std	Y+6, r19	; 0x06
     b0e:	4f 83       	std	Y+7, r20	; 0x07
     b10:	58 87       	std	Y+8, r21	; 0x08
     b12:	e9 e0       	ldi	r30, 0x09	; 9
     b14:	ee 2e       	mov	r14, r30
     b16:	f1 2c       	mov	r15, r1
     b18:	ec 0e       	add	r14, r28
     b1a:	fd 1e       	adc	r15, r29
     b1c:	ce 01       	movw	r24, r28
     b1e:	01 96       	adiw	r24, 0x01	; 1
     b20:	b7 01       	movw	r22, r14
     b22:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <__unpack_f>
     b26:	8e 01       	movw	r16, r28
     b28:	0f 5e       	subi	r16, 0xEF	; 239
     b2a:	1f 4f       	sbci	r17, 0xFF	; 255
     b2c:	ce 01       	movw	r24, r28
     b2e:	05 96       	adiw	r24, 0x05	; 5
     b30:	b8 01       	movw	r22, r16
     b32:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <__unpack_f>
     b36:	8a 89       	ldd	r24, Y+18	; 0x12
     b38:	91 e0       	ldi	r25, 0x01	; 1
     b3a:	89 27       	eor	r24, r25
     b3c:	8a 8b       	std	Y+18, r24	; 0x12
     b3e:	c7 01       	movw	r24, r14
     b40:	b8 01       	movw	r22, r16
     b42:	ae 01       	movw	r20, r28
     b44:	47 5e       	subi	r20, 0xE7	; 231
     b46:	5f 4f       	sbci	r21, 0xFF	; 255
     b48:	0e 94 2f 04 	call	0x85e	; 0x85e <_fpadd_parts>
     b4c:	0e 94 04 08 	call	0x1008	; 0x1008 <__pack_f>
     b50:	a0 96       	adiw	r28, 0x20	; 32
     b52:	e6 e0       	ldi	r30, 0x06	; 6
     b54:	0c 94 bd 15 	jmp	0x2b7a	; 0x2b7a <__epilogue_restores__+0x18>

00000b58 <__addsf3>:
     b58:	a0 e2       	ldi	r26, 0x20	; 32
     b5a:	b0 e0       	ldi	r27, 0x00	; 0
     b5c:	e2 eb       	ldi	r30, 0xB2	; 178
     b5e:	f5 e0       	ldi	r31, 0x05	; 5
     b60:	0c 94 a1 15 	jmp	0x2b42	; 0x2b42 <__prologue_saves__+0x18>
     b64:	69 83       	std	Y+1, r22	; 0x01
     b66:	7a 83       	std	Y+2, r23	; 0x02
     b68:	8b 83       	std	Y+3, r24	; 0x03
     b6a:	9c 83       	std	Y+4, r25	; 0x04
     b6c:	2d 83       	std	Y+5, r18	; 0x05
     b6e:	3e 83       	std	Y+6, r19	; 0x06
     b70:	4f 83       	std	Y+7, r20	; 0x07
     b72:	58 87       	std	Y+8, r21	; 0x08
     b74:	f9 e0       	ldi	r31, 0x09	; 9
     b76:	ef 2e       	mov	r14, r31
     b78:	f1 2c       	mov	r15, r1
     b7a:	ec 0e       	add	r14, r28
     b7c:	fd 1e       	adc	r15, r29
     b7e:	ce 01       	movw	r24, r28
     b80:	01 96       	adiw	r24, 0x01	; 1
     b82:	b7 01       	movw	r22, r14
     b84:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <__unpack_f>
     b88:	8e 01       	movw	r16, r28
     b8a:	0f 5e       	subi	r16, 0xEF	; 239
     b8c:	1f 4f       	sbci	r17, 0xFF	; 255
     b8e:	ce 01       	movw	r24, r28
     b90:	05 96       	adiw	r24, 0x05	; 5
     b92:	b8 01       	movw	r22, r16
     b94:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <__unpack_f>
     b98:	c7 01       	movw	r24, r14
     b9a:	b8 01       	movw	r22, r16
     b9c:	ae 01       	movw	r20, r28
     b9e:	47 5e       	subi	r20, 0xE7	; 231
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	0e 94 2f 04 	call	0x85e	; 0x85e <_fpadd_parts>
     ba6:	0e 94 04 08 	call	0x1008	; 0x1008 <__pack_f>
     baa:	a0 96       	adiw	r28, 0x20	; 32
     bac:	e6 e0       	ldi	r30, 0x06	; 6
     bae:	0c 94 bd 15 	jmp	0x2b7a	; 0x2b7a <__epilogue_restores__+0x18>

00000bb2 <__mulsf3>:
     bb2:	a0 e2       	ldi	r26, 0x20	; 32
     bb4:	b0 e0       	ldi	r27, 0x00	; 0
     bb6:	ef ed       	ldi	r30, 0xDF	; 223
     bb8:	f5 e0       	ldi	r31, 0x05	; 5
     bba:	0c 94 95 15 	jmp	0x2b2a	; 0x2b2a <__prologue_saves__>
     bbe:	69 83       	std	Y+1, r22	; 0x01
     bc0:	7a 83       	std	Y+2, r23	; 0x02
     bc2:	8b 83       	std	Y+3, r24	; 0x03
     bc4:	9c 83       	std	Y+4, r25	; 0x04
     bc6:	2d 83       	std	Y+5, r18	; 0x05
     bc8:	3e 83       	std	Y+6, r19	; 0x06
     bca:	4f 83       	std	Y+7, r20	; 0x07
     bcc:	58 87       	std	Y+8, r21	; 0x08
     bce:	ce 01       	movw	r24, r28
     bd0:	01 96       	adiw	r24, 0x01	; 1
     bd2:	be 01       	movw	r22, r28
     bd4:	67 5f       	subi	r22, 0xF7	; 247
     bd6:	7f 4f       	sbci	r23, 0xFF	; 255
     bd8:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <__unpack_f>
     bdc:	ce 01       	movw	r24, r28
     bde:	05 96       	adiw	r24, 0x05	; 5
     be0:	be 01       	movw	r22, r28
     be2:	6f 5e       	subi	r22, 0xEF	; 239
     be4:	7f 4f       	sbci	r23, 0xFF	; 255
     be6:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <__unpack_f>
     bea:	99 85       	ldd	r25, Y+9	; 0x09
     bec:	92 30       	cpi	r25, 0x02	; 2
     bee:	88 f0       	brcs	.+34     	; 0xc12 <__mulsf3+0x60>
     bf0:	89 89       	ldd	r24, Y+17	; 0x11
     bf2:	82 30       	cpi	r24, 0x02	; 2
     bf4:	c8 f0       	brcs	.+50     	; 0xc28 <__mulsf3+0x76>
     bf6:	94 30       	cpi	r25, 0x04	; 4
     bf8:	19 f4       	brne	.+6      	; 0xc00 <__mulsf3+0x4e>
     bfa:	82 30       	cpi	r24, 0x02	; 2
     bfc:	51 f4       	brne	.+20     	; 0xc12 <__mulsf3+0x60>
     bfe:	04 c0       	rjmp	.+8      	; 0xc08 <__mulsf3+0x56>
     c00:	84 30       	cpi	r24, 0x04	; 4
     c02:	29 f4       	brne	.+10     	; 0xc0e <__mulsf3+0x5c>
     c04:	92 30       	cpi	r25, 0x02	; 2
     c06:	81 f4       	brne	.+32     	; 0xc28 <__mulsf3+0x76>
     c08:	84 e8       	ldi	r24, 0x84	; 132
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	c6 c0       	rjmp	.+396    	; 0xd9a <__mulsf3+0x1e8>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	49 f4       	brne	.+18     	; 0xc24 <__mulsf3+0x72>
     c12:	20 e0       	ldi	r18, 0x00	; 0
     c14:	9a 85       	ldd	r25, Y+10	; 0x0a
     c16:	8a 89       	ldd	r24, Y+18	; 0x12
     c18:	98 13       	cpse	r25, r24
     c1a:	21 e0       	ldi	r18, 0x01	; 1
     c1c:	2a 87       	std	Y+10, r18	; 0x0a
     c1e:	ce 01       	movw	r24, r28
     c20:	09 96       	adiw	r24, 0x09	; 9
     c22:	bb c0       	rjmp	.+374    	; 0xd9a <__mulsf3+0x1e8>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	49 f4       	brne	.+18     	; 0xc3a <__mulsf3+0x88>
     c28:	20 e0       	ldi	r18, 0x00	; 0
     c2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     c2c:	8a 89       	ldd	r24, Y+18	; 0x12
     c2e:	98 13       	cpse	r25, r24
     c30:	21 e0       	ldi	r18, 0x01	; 1
     c32:	2a 8b       	std	Y+18, r18	; 0x12
     c34:	ce 01       	movw	r24, r28
     c36:	41 96       	adiw	r24, 0x11	; 17
     c38:	b0 c0       	rjmp	.+352    	; 0xd9a <__mulsf3+0x1e8>
     c3a:	2d 84       	ldd	r2, Y+13	; 0x0d
     c3c:	3e 84       	ldd	r3, Y+14	; 0x0e
     c3e:	4f 84       	ldd	r4, Y+15	; 0x0f
     c40:	58 88       	ldd	r5, Y+16	; 0x10
     c42:	6d 88       	ldd	r6, Y+21	; 0x15
     c44:	7e 88       	ldd	r7, Y+22	; 0x16
     c46:	8f 88       	ldd	r8, Y+23	; 0x17
     c48:	98 8c       	ldd	r9, Y+24	; 0x18
     c4a:	ee 24       	eor	r14, r14
     c4c:	ff 24       	eor	r15, r15
     c4e:	87 01       	movw	r16, r14
     c50:	aa 24       	eor	r10, r10
     c52:	bb 24       	eor	r11, r11
     c54:	65 01       	movw	r12, r10
     c56:	40 e0       	ldi	r20, 0x00	; 0
     c58:	50 e0       	ldi	r21, 0x00	; 0
     c5a:	60 e0       	ldi	r22, 0x00	; 0
     c5c:	70 e0       	ldi	r23, 0x00	; 0
     c5e:	e0 e0       	ldi	r30, 0x00	; 0
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	c1 01       	movw	r24, r2
     c64:	81 70       	andi	r24, 0x01	; 1
     c66:	90 70       	andi	r25, 0x00	; 0
     c68:	89 2b       	or	r24, r25
     c6a:	e9 f0       	breq	.+58     	; 0xca6 <__mulsf3+0xf4>
     c6c:	e6 0c       	add	r14, r6
     c6e:	f7 1c       	adc	r15, r7
     c70:	08 1d       	adc	r16, r8
     c72:	19 1d       	adc	r17, r9
     c74:	9a 01       	movw	r18, r20
     c76:	ab 01       	movw	r20, r22
     c78:	2a 0d       	add	r18, r10
     c7a:	3b 1d       	adc	r19, r11
     c7c:	4c 1d       	adc	r20, r12
     c7e:	5d 1d       	adc	r21, r13
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	a0 e0       	ldi	r26, 0x00	; 0
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	e6 14       	cp	r14, r6
     c8a:	f7 04       	cpc	r15, r7
     c8c:	08 05       	cpc	r16, r8
     c8e:	19 05       	cpc	r17, r9
     c90:	20 f4       	brcc	.+8      	; 0xc9a <__mulsf3+0xe8>
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	a0 e0       	ldi	r26, 0x00	; 0
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	ba 01       	movw	r22, r20
     c9c:	a9 01       	movw	r20, r18
     c9e:	48 0f       	add	r20, r24
     ca0:	59 1f       	adc	r21, r25
     ca2:	6a 1f       	adc	r22, r26
     ca4:	7b 1f       	adc	r23, r27
     ca6:	aa 0c       	add	r10, r10
     ca8:	bb 1c       	adc	r11, r11
     caa:	cc 1c       	adc	r12, r12
     cac:	dd 1c       	adc	r13, r13
     cae:	97 fe       	sbrs	r9, 7
     cb0:	08 c0       	rjmp	.+16     	; 0xcc2 <__mulsf3+0x110>
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	a0 e0       	ldi	r26, 0x00	; 0
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	a8 2a       	or	r10, r24
     cbc:	b9 2a       	or	r11, r25
     cbe:	ca 2a       	or	r12, r26
     cc0:	db 2a       	or	r13, r27
     cc2:	31 96       	adiw	r30, 0x01	; 1
     cc4:	e0 32       	cpi	r30, 0x20	; 32
     cc6:	f1 05       	cpc	r31, r1
     cc8:	49 f0       	breq	.+18     	; 0xcdc <__mulsf3+0x12a>
     cca:	66 0c       	add	r6, r6
     ccc:	77 1c       	adc	r7, r7
     cce:	88 1c       	adc	r8, r8
     cd0:	99 1c       	adc	r9, r9
     cd2:	56 94       	lsr	r5
     cd4:	47 94       	ror	r4
     cd6:	37 94       	ror	r3
     cd8:	27 94       	ror	r2
     cda:	c3 cf       	rjmp	.-122    	; 0xc62 <__mulsf3+0xb0>
     cdc:	fa 85       	ldd	r31, Y+10	; 0x0a
     cde:	ea 89       	ldd	r30, Y+18	; 0x12
     ce0:	2b 89       	ldd	r18, Y+19	; 0x13
     ce2:	3c 89       	ldd	r19, Y+20	; 0x14
     ce4:	8b 85       	ldd	r24, Y+11	; 0x0b
     ce6:	9c 85       	ldd	r25, Y+12	; 0x0c
     ce8:	28 0f       	add	r18, r24
     cea:	39 1f       	adc	r19, r25
     cec:	2e 5f       	subi	r18, 0xFE	; 254
     cee:	3f 4f       	sbci	r19, 0xFF	; 255
     cf0:	17 c0       	rjmp	.+46     	; 0xd20 <__mulsf3+0x16e>
     cf2:	ca 01       	movw	r24, r20
     cf4:	81 70       	andi	r24, 0x01	; 1
     cf6:	90 70       	andi	r25, 0x00	; 0
     cf8:	89 2b       	or	r24, r25
     cfa:	61 f0       	breq	.+24     	; 0xd14 <__mulsf3+0x162>
     cfc:	16 95       	lsr	r17
     cfe:	07 95       	ror	r16
     d00:	f7 94       	ror	r15
     d02:	e7 94       	ror	r14
     d04:	80 e0       	ldi	r24, 0x00	; 0
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	a0 e0       	ldi	r26, 0x00	; 0
     d0a:	b0 e8       	ldi	r27, 0x80	; 128
     d0c:	e8 2a       	or	r14, r24
     d0e:	f9 2a       	or	r15, r25
     d10:	0a 2b       	or	r16, r26
     d12:	1b 2b       	or	r17, r27
     d14:	76 95       	lsr	r23
     d16:	67 95       	ror	r22
     d18:	57 95       	ror	r21
     d1a:	47 95       	ror	r20
     d1c:	2f 5f       	subi	r18, 0xFF	; 255
     d1e:	3f 4f       	sbci	r19, 0xFF	; 255
     d20:	77 fd       	sbrc	r23, 7
     d22:	e7 cf       	rjmp	.-50     	; 0xcf2 <__mulsf3+0x140>
     d24:	0c c0       	rjmp	.+24     	; 0xd3e <__mulsf3+0x18c>
     d26:	44 0f       	add	r20, r20
     d28:	55 1f       	adc	r21, r21
     d2a:	66 1f       	adc	r22, r22
     d2c:	77 1f       	adc	r23, r23
     d2e:	17 fd       	sbrc	r17, 7
     d30:	41 60       	ori	r20, 0x01	; 1
     d32:	ee 0c       	add	r14, r14
     d34:	ff 1c       	adc	r15, r15
     d36:	00 1f       	adc	r16, r16
     d38:	11 1f       	adc	r17, r17
     d3a:	21 50       	subi	r18, 0x01	; 1
     d3c:	30 40       	sbci	r19, 0x00	; 0
     d3e:	40 30       	cpi	r20, 0x00	; 0
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	59 07       	cpc	r21, r25
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	69 07       	cpc	r22, r25
     d48:	90 e4       	ldi	r25, 0x40	; 64
     d4a:	79 07       	cpc	r23, r25
     d4c:	60 f3       	brcs	.-40     	; 0xd26 <__mulsf3+0x174>
     d4e:	2b 8f       	std	Y+27, r18	; 0x1b
     d50:	3c 8f       	std	Y+28, r19	; 0x1c
     d52:	db 01       	movw	r26, r22
     d54:	ca 01       	movw	r24, r20
     d56:	8f 77       	andi	r24, 0x7F	; 127
     d58:	90 70       	andi	r25, 0x00	; 0
     d5a:	a0 70       	andi	r26, 0x00	; 0
     d5c:	b0 70       	andi	r27, 0x00	; 0
     d5e:	80 34       	cpi	r24, 0x40	; 64
     d60:	91 05       	cpc	r25, r1
     d62:	a1 05       	cpc	r26, r1
     d64:	b1 05       	cpc	r27, r1
     d66:	61 f4       	brne	.+24     	; 0xd80 <__mulsf3+0x1ce>
     d68:	47 fd       	sbrc	r20, 7
     d6a:	0a c0       	rjmp	.+20     	; 0xd80 <__mulsf3+0x1ce>
     d6c:	e1 14       	cp	r14, r1
     d6e:	f1 04       	cpc	r15, r1
     d70:	01 05       	cpc	r16, r1
     d72:	11 05       	cpc	r17, r1
     d74:	29 f0       	breq	.+10     	; 0xd80 <__mulsf3+0x1ce>
     d76:	40 5c       	subi	r20, 0xC0	; 192
     d78:	5f 4f       	sbci	r21, 0xFF	; 255
     d7a:	6f 4f       	sbci	r22, 0xFF	; 255
     d7c:	7f 4f       	sbci	r23, 0xFF	; 255
     d7e:	40 78       	andi	r20, 0x80	; 128
     d80:	1a 8e       	std	Y+26, r1	; 0x1a
     d82:	fe 17       	cp	r31, r30
     d84:	11 f0       	breq	.+4      	; 0xd8a <__mulsf3+0x1d8>
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	8a 8f       	std	Y+26, r24	; 0x1a
     d8a:	4d 8f       	std	Y+29, r20	; 0x1d
     d8c:	5e 8f       	std	Y+30, r21	; 0x1e
     d8e:	6f 8f       	std	Y+31, r22	; 0x1f
     d90:	78 a3       	std	Y+32, r23	; 0x20
     d92:	83 e0       	ldi	r24, 0x03	; 3
     d94:	89 8f       	std	Y+25, r24	; 0x19
     d96:	ce 01       	movw	r24, r28
     d98:	49 96       	adiw	r24, 0x19	; 25
     d9a:	0e 94 04 08 	call	0x1008	; 0x1008 <__pack_f>
     d9e:	a0 96       	adiw	r28, 0x20	; 32
     da0:	e2 e1       	ldi	r30, 0x12	; 18
     da2:	0c 94 b1 15 	jmp	0x2b62	; 0x2b62 <__epilogue_restores__>

00000da6 <__ltsf2>:
     da6:	a8 e1       	ldi	r26, 0x18	; 24
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	e9 ed       	ldi	r30, 0xD9	; 217
     dac:	f6 e0       	ldi	r31, 0x06	; 6
     dae:	0c 94 a1 15 	jmp	0x2b42	; 0x2b42 <__prologue_saves__+0x18>
     db2:	69 83       	std	Y+1, r22	; 0x01
     db4:	7a 83       	std	Y+2, r23	; 0x02
     db6:	8b 83       	std	Y+3, r24	; 0x03
     db8:	9c 83       	std	Y+4, r25	; 0x04
     dba:	2d 83       	std	Y+5, r18	; 0x05
     dbc:	3e 83       	std	Y+6, r19	; 0x06
     dbe:	4f 83       	std	Y+7, r20	; 0x07
     dc0:	58 87       	std	Y+8, r21	; 0x08
     dc2:	89 e0       	ldi	r24, 0x09	; 9
     dc4:	e8 2e       	mov	r14, r24
     dc6:	f1 2c       	mov	r15, r1
     dc8:	ec 0e       	add	r14, r28
     dca:	fd 1e       	adc	r15, r29
     dcc:	ce 01       	movw	r24, r28
     dce:	01 96       	adiw	r24, 0x01	; 1
     dd0:	b7 01       	movw	r22, r14
     dd2:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <__unpack_f>
     dd6:	8e 01       	movw	r16, r28
     dd8:	0f 5e       	subi	r16, 0xEF	; 239
     dda:	1f 4f       	sbci	r17, 0xFF	; 255
     ddc:	ce 01       	movw	r24, r28
     dde:	05 96       	adiw	r24, 0x05	; 5
     de0:	b8 01       	movw	r22, r16
     de2:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <__unpack_f>
     de6:	89 85       	ldd	r24, Y+9	; 0x09
     de8:	82 30       	cpi	r24, 0x02	; 2
     dea:	40 f0       	brcs	.+16     	; 0xdfc <__ltsf2+0x56>
     dec:	89 89       	ldd	r24, Y+17	; 0x11
     dee:	82 30       	cpi	r24, 0x02	; 2
     df0:	28 f0       	brcs	.+10     	; 0xdfc <__ltsf2+0x56>
     df2:	c7 01       	movw	r24, r14
     df4:	b8 01       	movw	r22, r16
     df6:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__fpcmp_parts_f>
     dfa:	01 c0       	rjmp	.+2      	; 0xdfe <__ltsf2+0x58>
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	68 96       	adiw	r28, 0x18	; 24
     e00:	e6 e0       	ldi	r30, 0x06	; 6
     e02:	0c 94 bd 15 	jmp	0x2b7a	; 0x2b7a <__epilogue_restores__+0x18>

00000e06 <__floatsisf>:
     e06:	a8 e0       	ldi	r26, 0x08	; 8
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	e9 e0       	ldi	r30, 0x09	; 9
     e0c:	f7 e0       	ldi	r31, 0x07	; 7
     e0e:	0c 94 9e 15 	jmp	0x2b3c	; 0x2b3c <__prologue_saves__+0x12>
     e12:	9b 01       	movw	r18, r22
     e14:	ac 01       	movw	r20, r24
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	89 83       	std	Y+1, r24	; 0x01
     e1a:	da 01       	movw	r26, r20
     e1c:	c9 01       	movw	r24, r18
     e1e:	88 27       	eor	r24, r24
     e20:	b7 fd       	sbrc	r27, 7
     e22:	83 95       	inc	r24
     e24:	99 27       	eor	r25, r25
     e26:	aa 27       	eor	r26, r26
     e28:	bb 27       	eor	r27, r27
     e2a:	b8 2e       	mov	r11, r24
     e2c:	21 15       	cp	r18, r1
     e2e:	31 05       	cpc	r19, r1
     e30:	41 05       	cpc	r20, r1
     e32:	51 05       	cpc	r21, r1
     e34:	19 f4       	brne	.+6      	; 0xe3c <__floatsisf+0x36>
     e36:	82 e0       	ldi	r24, 0x02	; 2
     e38:	89 83       	std	Y+1, r24	; 0x01
     e3a:	3a c0       	rjmp	.+116    	; 0xeb0 <__floatsisf+0xaa>
     e3c:	88 23       	and	r24, r24
     e3e:	a9 f0       	breq	.+42     	; 0xe6a <__floatsisf+0x64>
     e40:	20 30       	cpi	r18, 0x00	; 0
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	38 07       	cpc	r19, r24
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	48 07       	cpc	r20, r24
     e4a:	80 e8       	ldi	r24, 0x80	; 128
     e4c:	58 07       	cpc	r21, r24
     e4e:	29 f4       	brne	.+10     	; 0xe5a <__floatsisf+0x54>
     e50:	60 e0       	ldi	r22, 0x00	; 0
     e52:	70 e0       	ldi	r23, 0x00	; 0
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	9f ec       	ldi	r25, 0xCF	; 207
     e58:	30 c0       	rjmp	.+96     	; 0xeba <__floatsisf+0xb4>
     e5a:	ee 24       	eor	r14, r14
     e5c:	ff 24       	eor	r15, r15
     e5e:	87 01       	movw	r16, r14
     e60:	e2 1a       	sub	r14, r18
     e62:	f3 0a       	sbc	r15, r19
     e64:	04 0b       	sbc	r16, r20
     e66:	15 0b       	sbc	r17, r21
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <__floatsisf+0x68>
     e6a:	79 01       	movw	r14, r18
     e6c:	8a 01       	movw	r16, r20
     e6e:	8e e1       	ldi	r24, 0x1E	; 30
     e70:	c8 2e       	mov	r12, r24
     e72:	d1 2c       	mov	r13, r1
     e74:	dc 82       	std	Y+4, r13	; 0x04
     e76:	cb 82       	std	Y+3, r12	; 0x03
     e78:	ed 82       	std	Y+5, r14	; 0x05
     e7a:	fe 82       	std	Y+6, r15	; 0x06
     e7c:	0f 83       	std	Y+7, r16	; 0x07
     e7e:	18 87       	std	Y+8, r17	; 0x08
     e80:	c8 01       	movw	r24, r16
     e82:	b7 01       	movw	r22, r14
     e84:	0e 94 b5 07 	call	0xf6a	; 0xf6a <__clzsi2>
     e88:	01 97       	sbiw	r24, 0x01	; 1
     e8a:	18 16       	cp	r1, r24
     e8c:	19 06       	cpc	r1, r25
     e8e:	84 f4       	brge	.+32     	; 0xeb0 <__floatsisf+0xaa>
     e90:	08 2e       	mov	r0, r24
     e92:	04 c0       	rjmp	.+8      	; 0xe9c <__floatsisf+0x96>
     e94:	ee 0c       	add	r14, r14
     e96:	ff 1c       	adc	r15, r15
     e98:	00 1f       	adc	r16, r16
     e9a:	11 1f       	adc	r17, r17
     e9c:	0a 94       	dec	r0
     e9e:	d2 f7       	brpl	.-12     	; 0xe94 <__floatsisf+0x8e>
     ea0:	ed 82       	std	Y+5, r14	; 0x05
     ea2:	fe 82       	std	Y+6, r15	; 0x06
     ea4:	0f 83       	std	Y+7, r16	; 0x07
     ea6:	18 87       	std	Y+8, r17	; 0x08
     ea8:	c8 1a       	sub	r12, r24
     eaa:	d9 0a       	sbc	r13, r25
     eac:	dc 82       	std	Y+4, r13	; 0x04
     eae:	cb 82       	std	Y+3, r12	; 0x03
     eb0:	ba 82       	std	Y+2, r11	; 0x02
     eb2:	ce 01       	movw	r24, r28
     eb4:	01 96       	adiw	r24, 0x01	; 1
     eb6:	0e 94 04 08 	call	0x1008	; 0x1008 <__pack_f>
     eba:	28 96       	adiw	r28, 0x08	; 8
     ebc:	e9 e0       	ldi	r30, 0x09	; 9
     ebe:	0c 94 ba 15 	jmp	0x2b74	; 0x2b74 <__epilogue_restores__+0x12>

00000ec2 <__fixsfsi>:
     ec2:	ac e0       	ldi	r26, 0x0C	; 12
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	e7 e6       	ldi	r30, 0x67	; 103
     ec8:	f7 e0       	ldi	r31, 0x07	; 7
     eca:	0c 94 a5 15 	jmp	0x2b4a	; 0x2b4a <__prologue_saves__+0x20>
     ece:	69 83       	std	Y+1, r22	; 0x01
     ed0:	7a 83       	std	Y+2, r23	; 0x02
     ed2:	8b 83       	std	Y+3, r24	; 0x03
     ed4:	9c 83       	std	Y+4, r25	; 0x04
     ed6:	ce 01       	movw	r24, r28
     ed8:	01 96       	adiw	r24, 0x01	; 1
     eda:	be 01       	movw	r22, r28
     edc:	6b 5f       	subi	r22, 0xFB	; 251
     ede:	7f 4f       	sbci	r23, 0xFF	; 255
     ee0:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <__unpack_f>
     ee4:	8d 81       	ldd	r24, Y+5	; 0x05
     ee6:	82 30       	cpi	r24, 0x02	; 2
     ee8:	61 f1       	breq	.+88     	; 0xf42 <__fixsfsi+0x80>
     eea:	82 30       	cpi	r24, 0x02	; 2
     eec:	50 f1       	brcs	.+84     	; 0xf42 <__fixsfsi+0x80>
     eee:	84 30       	cpi	r24, 0x04	; 4
     ef0:	21 f4       	brne	.+8      	; 0xefa <__fixsfsi+0x38>
     ef2:	8e 81       	ldd	r24, Y+6	; 0x06
     ef4:	88 23       	and	r24, r24
     ef6:	51 f1       	breq	.+84     	; 0xf4c <__fixsfsi+0x8a>
     ef8:	2e c0       	rjmp	.+92     	; 0xf56 <__fixsfsi+0x94>
     efa:	2f 81       	ldd	r18, Y+7	; 0x07
     efc:	38 85       	ldd	r19, Y+8	; 0x08
     efe:	37 fd       	sbrc	r19, 7
     f00:	20 c0       	rjmp	.+64     	; 0xf42 <__fixsfsi+0x80>
     f02:	6e 81       	ldd	r22, Y+6	; 0x06
     f04:	2f 31       	cpi	r18, 0x1F	; 31
     f06:	31 05       	cpc	r19, r1
     f08:	1c f0       	brlt	.+6      	; 0xf10 <__fixsfsi+0x4e>
     f0a:	66 23       	and	r22, r22
     f0c:	f9 f0       	breq	.+62     	; 0xf4c <__fixsfsi+0x8a>
     f0e:	23 c0       	rjmp	.+70     	; 0xf56 <__fixsfsi+0x94>
     f10:	8e e1       	ldi	r24, 0x1E	; 30
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	82 1b       	sub	r24, r18
     f16:	93 0b       	sbc	r25, r19
     f18:	29 85       	ldd	r18, Y+9	; 0x09
     f1a:	3a 85       	ldd	r19, Y+10	; 0x0a
     f1c:	4b 85       	ldd	r20, Y+11	; 0x0b
     f1e:	5c 85       	ldd	r21, Y+12	; 0x0c
     f20:	04 c0       	rjmp	.+8      	; 0xf2a <__fixsfsi+0x68>
     f22:	56 95       	lsr	r21
     f24:	47 95       	ror	r20
     f26:	37 95       	ror	r19
     f28:	27 95       	ror	r18
     f2a:	8a 95       	dec	r24
     f2c:	d2 f7       	brpl	.-12     	; 0xf22 <__fixsfsi+0x60>
     f2e:	66 23       	and	r22, r22
     f30:	b1 f0       	breq	.+44     	; 0xf5e <__fixsfsi+0x9c>
     f32:	50 95       	com	r21
     f34:	40 95       	com	r20
     f36:	30 95       	com	r19
     f38:	21 95       	neg	r18
     f3a:	3f 4f       	sbci	r19, 0xFF	; 255
     f3c:	4f 4f       	sbci	r20, 0xFF	; 255
     f3e:	5f 4f       	sbci	r21, 0xFF	; 255
     f40:	0e c0       	rjmp	.+28     	; 0xf5e <__fixsfsi+0x9c>
     f42:	20 e0       	ldi	r18, 0x00	; 0
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	40 e0       	ldi	r20, 0x00	; 0
     f48:	50 e0       	ldi	r21, 0x00	; 0
     f4a:	09 c0       	rjmp	.+18     	; 0xf5e <__fixsfsi+0x9c>
     f4c:	2f ef       	ldi	r18, 0xFF	; 255
     f4e:	3f ef       	ldi	r19, 0xFF	; 255
     f50:	4f ef       	ldi	r20, 0xFF	; 255
     f52:	5f e7       	ldi	r21, 0x7F	; 127
     f54:	04 c0       	rjmp	.+8      	; 0xf5e <__fixsfsi+0x9c>
     f56:	20 e0       	ldi	r18, 0x00	; 0
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	40 e0       	ldi	r20, 0x00	; 0
     f5c:	50 e8       	ldi	r21, 0x80	; 128
     f5e:	b9 01       	movw	r22, r18
     f60:	ca 01       	movw	r24, r20
     f62:	2c 96       	adiw	r28, 0x0c	; 12
     f64:	e2 e0       	ldi	r30, 0x02	; 2
     f66:	0c 94 c1 15 	jmp	0x2b82	; 0x2b82 <__epilogue_restores__+0x20>

00000f6a <__clzsi2>:
     f6a:	ef 92       	push	r14
     f6c:	ff 92       	push	r15
     f6e:	0f 93       	push	r16
     f70:	1f 93       	push	r17
     f72:	7b 01       	movw	r14, r22
     f74:	8c 01       	movw	r16, r24
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	e8 16       	cp	r14, r24
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	f8 06       	cpc	r15, r24
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	08 07       	cpc	r16, r24
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	18 07       	cpc	r17, r24
     f86:	88 f4       	brcc	.+34     	; 0xfaa <__clzsi2+0x40>
     f88:	8f ef       	ldi	r24, 0xFF	; 255
     f8a:	e8 16       	cp	r14, r24
     f8c:	f1 04       	cpc	r15, r1
     f8e:	01 05       	cpc	r16, r1
     f90:	11 05       	cpc	r17, r1
     f92:	31 f0       	breq	.+12     	; 0xfa0 <__clzsi2+0x36>
     f94:	28 f0       	brcs	.+10     	; 0xfa0 <__clzsi2+0x36>
     f96:	88 e0       	ldi	r24, 0x08	; 8
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	a0 e0       	ldi	r26, 0x00	; 0
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	17 c0       	rjmp	.+46     	; 0xfce <__clzsi2+0x64>
     fa0:	80 e0       	ldi	r24, 0x00	; 0
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	a0 e0       	ldi	r26, 0x00	; 0
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	12 c0       	rjmp	.+36     	; 0xfce <__clzsi2+0x64>
     faa:	80 e0       	ldi	r24, 0x00	; 0
     fac:	e8 16       	cp	r14, r24
     fae:	80 e0       	ldi	r24, 0x00	; 0
     fb0:	f8 06       	cpc	r15, r24
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	08 07       	cpc	r16, r24
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	18 07       	cpc	r17, r24
     fba:	28 f0       	brcs	.+10     	; 0xfc6 <__clzsi2+0x5c>
     fbc:	88 e1       	ldi	r24, 0x18	; 24
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	a0 e0       	ldi	r26, 0x00	; 0
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	04 c0       	rjmp	.+8      	; 0xfce <__clzsi2+0x64>
     fc6:	80 e1       	ldi	r24, 0x10	; 16
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	a0 e0       	ldi	r26, 0x00	; 0
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	20 e2       	ldi	r18, 0x20	; 32
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	40 e0       	ldi	r20, 0x00	; 0
     fd4:	50 e0       	ldi	r21, 0x00	; 0
     fd6:	28 1b       	sub	r18, r24
     fd8:	39 0b       	sbc	r19, r25
     fda:	4a 0b       	sbc	r20, r26
     fdc:	5b 0b       	sbc	r21, r27
     fde:	04 c0       	rjmp	.+8      	; 0xfe8 <__clzsi2+0x7e>
     fe0:	16 95       	lsr	r17
     fe2:	07 95       	ror	r16
     fe4:	f7 94       	ror	r15
     fe6:	e7 94       	ror	r14
     fe8:	8a 95       	dec	r24
     fea:	d2 f7       	brpl	.-12     	; 0xfe0 <__clzsi2+0x76>
     fec:	f7 01       	movw	r30, r14
     fee:	e4 57       	subi	r30, 0x74	; 116
     ff0:	ff 4f       	sbci	r31, 0xFF	; 255
     ff2:	80 81       	ld	r24, Z
     ff4:	28 1b       	sub	r18, r24
     ff6:	31 09       	sbc	r19, r1
     ff8:	41 09       	sbc	r20, r1
     ffa:	51 09       	sbc	r21, r1
     ffc:	c9 01       	movw	r24, r18
     ffe:	1f 91       	pop	r17
    1000:	0f 91       	pop	r16
    1002:	ff 90       	pop	r15
    1004:	ef 90       	pop	r14
    1006:	08 95       	ret

00001008 <__pack_f>:
    1008:	df 92       	push	r13
    100a:	ef 92       	push	r14
    100c:	ff 92       	push	r15
    100e:	0f 93       	push	r16
    1010:	1f 93       	push	r17
    1012:	fc 01       	movw	r30, r24
    1014:	e4 80       	ldd	r14, Z+4	; 0x04
    1016:	f5 80       	ldd	r15, Z+5	; 0x05
    1018:	06 81       	ldd	r16, Z+6	; 0x06
    101a:	17 81       	ldd	r17, Z+7	; 0x07
    101c:	d1 80       	ldd	r13, Z+1	; 0x01
    101e:	80 81       	ld	r24, Z
    1020:	82 30       	cpi	r24, 0x02	; 2
    1022:	48 f4       	brcc	.+18     	; 0x1036 <__pack_f+0x2e>
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	a0 e1       	ldi	r26, 0x10	; 16
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	e8 2a       	or	r14, r24
    102e:	f9 2a       	or	r15, r25
    1030:	0a 2b       	or	r16, r26
    1032:	1b 2b       	or	r17, r27
    1034:	a5 c0       	rjmp	.+330    	; 0x1180 <__pack_f+0x178>
    1036:	84 30       	cpi	r24, 0x04	; 4
    1038:	09 f4       	brne	.+2      	; 0x103c <__pack_f+0x34>
    103a:	9f c0       	rjmp	.+318    	; 0x117a <__pack_f+0x172>
    103c:	82 30       	cpi	r24, 0x02	; 2
    103e:	21 f4       	brne	.+8      	; 0x1048 <__pack_f+0x40>
    1040:	ee 24       	eor	r14, r14
    1042:	ff 24       	eor	r15, r15
    1044:	87 01       	movw	r16, r14
    1046:	05 c0       	rjmp	.+10     	; 0x1052 <__pack_f+0x4a>
    1048:	e1 14       	cp	r14, r1
    104a:	f1 04       	cpc	r15, r1
    104c:	01 05       	cpc	r16, r1
    104e:	11 05       	cpc	r17, r1
    1050:	19 f4       	brne	.+6      	; 0x1058 <__pack_f+0x50>
    1052:	e0 e0       	ldi	r30, 0x00	; 0
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	96 c0       	rjmp	.+300    	; 0x1184 <__pack_f+0x17c>
    1058:	62 81       	ldd	r22, Z+2	; 0x02
    105a:	73 81       	ldd	r23, Z+3	; 0x03
    105c:	9f ef       	ldi	r25, 0xFF	; 255
    105e:	62 38       	cpi	r22, 0x82	; 130
    1060:	79 07       	cpc	r23, r25
    1062:	0c f0       	brlt	.+2      	; 0x1066 <__pack_f+0x5e>
    1064:	5b c0       	rjmp	.+182    	; 0x111c <__pack_f+0x114>
    1066:	22 e8       	ldi	r18, 0x82	; 130
    1068:	3f ef       	ldi	r19, 0xFF	; 255
    106a:	26 1b       	sub	r18, r22
    106c:	37 0b       	sbc	r19, r23
    106e:	2a 31       	cpi	r18, 0x1A	; 26
    1070:	31 05       	cpc	r19, r1
    1072:	2c f0       	brlt	.+10     	; 0x107e <__pack_f+0x76>
    1074:	20 e0       	ldi	r18, 0x00	; 0
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	40 e0       	ldi	r20, 0x00	; 0
    107a:	50 e0       	ldi	r21, 0x00	; 0
    107c:	2a c0       	rjmp	.+84     	; 0x10d2 <__pack_f+0xca>
    107e:	b8 01       	movw	r22, r16
    1080:	a7 01       	movw	r20, r14
    1082:	02 2e       	mov	r0, r18
    1084:	04 c0       	rjmp	.+8      	; 0x108e <__pack_f+0x86>
    1086:	76 95       	lsr	r23
    1088:	67 95       	ror	r22
    108a:	57 95       	ror	r21
    108c:	47 95       	ror	r20
    108e:	0a 94       	dec	r0
    1090:	d2 f7       	brpl	.-12     	; 0x1086 <__pack_f+0x7e>
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	a0 e0       	ldi	r26, 0x00	; 0
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	04 c0       	rjmp	.+8      	; 0x10a4 <__pack_f+0x9c>
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	aa 1f       	adc	r26, r26
    10a2:	bb 1f       	adc	r27, r27
    10a4:	2a 95       	dec	r18
    10a6:	d2 f7       	brpl	.-12     	; 0x109c <__pack_f+0x94>
    10a8:	01 97       	sbiw	r24, 0x01	; 1
    10aa:	a1 09       	sbc	r26, r1
    10ac:	b1 09       	sbc	r27, r1
    10ae:	8e 21       	and	r24, r14
    10b0:	9f 21       	and	r25, r15
    10b2:	a0 23       	and	r26, r16
    10b4:	b1 23       	and	r27, r17
    10b6:	00 97       	sbiw	r24, 0x00	; 0
    10b8:	a1 05       	cpc	r26, r1
    10ba:	b1 05       	cpc	r27, r1
    10bc:	21 f0       	breq	.+8      	; 0x10c6 <__pack_f+0xbe>
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	a0 e0       	ldi	r26, 0x00	; 0
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	9a 01       	movw	r18, r20
    10c8:	ab 01       	movw	r20, r22
    10ca:	28 2b       	or	r18, r24
    10cc:	39 2b       	or	r19, r25
    10ce:	4a 2b       	or	r20, r26
    10d0:	5b 2b       	or	r21, r27
    10d2:	da 01       	movw	r26, r20
    10d4:	c9 01       	movw	r24, r18
    10d6:	8f 77       	andi	r24, 0x7F	; 127
    10d8:	90 70       	andi	r25, 0x00	; 0
    10da:	a0 70       	andi	r26, 0x00	; 0
    10dc:	b0 70       	andi	r27, 0x00	; 0
    10de:	80 34       	cpi	r24, 0x40	; 64
    10e0:	91 05       	cpc	r25, r1
    10e2:	a1 05       	cpc	r26, r1
    10e4:	b1 05       	cpc	r27, r1
    10e6:	39 f4       	brne	.+14     	; 0x10f6 <__pack_f+0xee>
    10e8:	27 ff       	sbrs	r18, 7
    10ea:	09 c0       	rjmp	.+18     	; 0x10fe <__pack_f+0xf6>
    10ec:	20 5c       	subi	r18, 0xC0	; 192
    10ee:	3f 4f       	sbci	r19, 0xFF	; 255
    10f0:	4f 4f       	sbci	r20, 0xFF	; 255
    10f2:	5f 4f       	sbci	r21, 0xFF	; 255
    10f4:	04 c0       	rjmp	.+8      	; 0x10fe <__pack_f+0xf6>
    10f6:	21 5c       	subi	r18, 0xC1	; 193
    10f8:	3f 4f       	sbci	r19, 0xFF	; 255
    10fa:	4f 4f       	sbci	r20, 0xFF	; 255
    10fc:	5f 4f       	sbci	r21, 0xFF	; 255
    10fe:	e0 e0       	ldi	r30, 0x00	; 0
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	20 30       	cpi	r18, 0x00	; 0
    1104:	a0 e0       	ldi	r26, 0x00	; 0
    1106:	3a 07       	cpc	r19, r26
    1108:	a0 e0       	ldi	r26, 0x00	; 0
    110a:	4a 07       	cpc	r20, r26
    110c:	a0 e4       	ldi	r26, 0x40	; 64
    110e:	5a 07       	cpc	r21, r26
    1110:	10 f0       	brcs	.+4      	; 0x1116 <__pack_f+0x10e>
    1112:	e1 e0       	ldi	r30, 0x01	; 1
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	79 01       	movw	r14, r18
    1118:	8a 01       	movw	r16, r20
    111a:	27 c0       	rjmp	.+78     	; 0x116a <__pack_f+0x162>
    111c:	60 38       	cpi	r22, 0x80	; 128
    111e:	71 05       	cpc	r23, r1
    1120:	64 f5       	brge	.+88     	; 0x117a <__pack_f+0x172>
    1122:	fb 01       	movw	r30, r22
    1124:	e1 58       	subi	r30, 0x81	; 129
    1126:	ff 4f       	sbci	r31, 0xFF	; 255
    1128:	d8 01       	movw	r26, r16
    112a:	c7 01       	movw	r24, r14
    112c:	8f 77       	andi	r24, 0x7F	; 127
    112e:	90 70       	andi	r25, 0x00	; 0
    1130:	a0 70       	andi	r26, 0x00	; 0
    1132:	b0 70       	andi	r27, 0x00	; 0
    1134:	80 34       	cpi	r24, 0x40	; 64
    1136:	91 05       	cpc	r25, r1
    1138:	a1 05       	cpc	r26, r1
    113a:	b1 05       	cpc	r27, r1
    113c:	39 f4       	brne	.+14     	; 0x114c <__pack_f+0x144>
    113e:	e7 fe       	sbrs	r14, 7
    1140:	0d c0       	rjmp	.+26     	; 0x115c <__pack_f+0x154>
    1142:	80 e4       	ldi	r24, 0x40	; 64
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	a0 e0       	ldi	r26, 0x00	; 0
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	04 c0       	rjmp	.+8      	; 0x1154 <__pack_f+0x14c>
    114c:	8f e3       	ldi	r24, 0x3F	; 63
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	a0 e0       	ldi	r26, 0x00	; 0
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	e8 0e       	add	r14, r24
    1156:	f9 1e       	adc	r15, r25
    1158:	0a 1f       	adc	r16, r26
    115a:	1b 1f       	adc	r17, r27
    115c:	17 ff       	sbrs	r17, 7
    115e:	05 c0       	rjmp	.+10     	; 0x116a <__pack_f+0x162>
    1160:	16 95       	lsr	r17
    1162:	07 95       	ror	r16
    1164:	f7 94       	ror	r15
    1166:	e7 94       	ror	r14
    1168:	31 96       	adiw	r30, 0x01	; 1
    116a:	87 e0       	ldi	r24, 0x07	; 7
    116c:	16 95       	lsr	r17
    116e:	07 95       	ror	r16
    1170:	f7 94       	ror	r15
    1172:	e7 94       	ror	r14
    1174:	8a 95       	dec	r24
    1176:	d1 f7       	brne	.-12     	; 0x116c <__pack_f+0x164>
    1178:	05 c0       	rjmp	.+10     	; 0x1184 <__pack_f+0x17c>
    117a:	ee 24       	eor	r14, r14
    117c:	ff 24       	eor	r15, r15
    117e:	87 01       	movw	r16, r14
    1180:	ef ef       	ldi	r30, 0xFF	; 255
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	6e 2f       	mov	r22, r30
    1186:	67 95       	ror	r22
    1188:	66 27       	eor	r22, r22
    118a:	67 95       	ror	r22
    118c:	90 2f       	mov	r25, r16
    118e:	9f 77       	andi	r25, 0x7F	; 127
    1190:	d7 94       	ror	r13
    1192:	dd 24       	eor	r13, r13
    1194:	d7 94       	ror	r13
    1196:	8e 2f       	mov	r24, r30
    1198:	86 95       	lsr	r24
    119a:	49 2f       	mov	r20, r25
    119c:	46 2b       	or	r20, r22
    119e:	58 2f       	mov	r21, r24
    11a0:	5d 29       	or	r21, r13
    11a2:	b7 01       	movw	r22, r14
    11a4:	ca 01       	movw	r24, r20
    11a6:	1f 91       	pop	r17
    11a8:	0f 91       	pop	r16
    11aa:	ff 90       	pop	r15
    11ac:	ef 90       	pop	r14
    11ae:	df 90       	pop	r13
    11b0:	08 95       	ret

000011b2 <__unpack_f>:
    11b2:	fc 01       	movw	r30, r24
    11b4:	db 01       	movw	r26, r22
    11b6:	40 81       	ld	r20, Z
    11b8:	51 81       	ldd	r21, Z+1	; 0x01
    11ba:	22 81       	ldd	r18, Z+2	; 0x02
    11bc:	62 2f       	mov	r22, r18
    11be:	6f 77       	andi	r22, 0x7F	; 127
    11c0:	70 e0       	ldi	r23, 0x00	; 0
    11c2:	22 1f       	adc	r18, r18
    11c4:	22 27       	eor	r18, r18
    11c6:	22 1f       	adc	r18, r18
    11c8:	93 81       	ldd	r25, Z+3	; 0x03
    11ca:	89 2f       	mov	r24, r25
    11cc:	88 0f       	add	r24, r24
    11ce:	82 2b       	or	r24, r18
    11d0:	28 2f       	mov	r18, r24
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	99 1f       	adc	r25, r25
    11d6:	99 27       	eor	r25, r25
    11d8:	99 1f       	adc	r25, r25
    11da:	11 96       	adiw	r26, 0x01	; 1
    11dc:	9c 93       	st	X, r25
    11de:	11 97       	sbiw	r26, 0x01	; 1
    11e0:	21 15       	cp	r18, r1
    11e2:	31 05       	cpc	r19, r1
    11e4:	a9 f5       	brne	.+106    	; 0x1250 <__unpack_f+0x9e>
    11e6:	41 15       	cp	r20, r1
    11e8:	51 05       	cpc	r21, r1
    11ea:	61 05       	cpc	r22, r1
    11ec:	71 05       	cpc	r23, r1
    11ee:	11 f4       	brne	.+4      	; 0x11f4 <__unpack_f+0x42>
    11f0:	82 e0       	ldi	r24, 0x02	; 2
    11f2:	37 c0       	rjmp	.+110    	; 0x1262 <__unpack_f+0xb0>
    11f4:	82 e8       	ldi	r24, 0x82	; 130
    11f6:	9f ef       	ldi	r25, 0xFF	; 255
    11f8:	13 96       	adiw	r26, 0x03	; 3
    11fa:	9c 93       	st	X, r25
    11fc:	8e 93       	st	-X, r24
    11fe:	12 97       	sbiw	r26, 0x02	; 2
    1200:	9a 01       	movw	r18, r20
    1202:	ab 01       	movw	r20, r22
    1204:	67 e0       	ldi	r22, 0x07	; 7
    1206:	22 0f       	add	r18, r18
    1208:	33 1f       	adc	r19, r19
    120a:	44 1f       	adc	r20, r20
    120c:	55 1f       	adc	r21, r21
    120e:	6a 95       	dec	r22
    1210:	d1 f7       	brne	.-12     	; 0x1206 <__unpack_f+0x54>
    1212:	83 e0       	ldi	r24, 0x03	; 3
    1214:	8c 93       	st	X, r24
    1216:	0d c0       	rjmp	.+26     	; 0x1232 <__unpack_f+0x80>
    1218:	22 0f       	add	r18, r18
    121a:	33 1f       	adc	r19, r19
    121c:	44 1f       	adc	r20, r20
    121e:	55 1f       	adc	r21, r21
    1220:	12 96       	adiw	r26, 0x02	; 2
    1222:	8d 91       	ld	r24, X+
    1224:	9c 91       	ld	r25, X
    1226:	13 97       	sbiw	r26, 0x03	; 3
    1228:	01 97       	sbiw	r24, 0x01	; 1
    122a:	13 96       	adiw	r26, 0x03	; 3
    122c:	9c 93       	st	X, r25
    122e:	8e 93       	st	-X, r24
    1230:	12 97       	sbiw	r26, 0x02	; 2
    1232:	20 30       	cpi	r18, 0x00	; 0
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	38 07       	cpc	r19, r24
    1238:	80 e0       	ldi	r24, 0x00	; 0
    123a:	48 07       	cpc	r20, r24
    123c:	80 e4       	ldi	r24, 0x40	; 64
    123e:	58 07       	cpc	r21, r24
    1240:	58 f3       	brcs	.-42     	; 0x1218 <__unpack_f+0x66>
    1242:	14 96       	adiw	r26, 0x04	; 4
    1244:	2d 93       	st	X+, r18
    1246:	3d 93       	st	X+, r19
    1248:	4d 93       	st	X+, r20
    124a:	5c 93       	st	X, r21
    124c:	17 97       	sbiw	r26, 0x07	; 7
    124e:	08 95       	ret
    1250:	2f 3f       	cpi	r18, 0xFF	; 255
    1252:	31 05       	cpc	r19, r1
    1254:	79 f4       	brne	.+30     	; 0x1274 <__unpack_f+0xc2>
    1256:	41 15       	cp	r20, r1
    1258:	51 05       	cpc	r21, r1
    125a:	61 05       	cpc	r22, r1
    125c:	71 05       	cpc	r23, r1
    125e:	19 f4       	brne	.+6      	; 0x1266 <__unpack_f+0xb4>
    1260:	84 e0       	ldi	r24, 0x04	; 4
    1262:	8c 93       	st	X, r24
    1264:	08 95       	ret
    1266:	64 ff       	sbrs	r22, 4
    1268:	03 c0       	rjmp	.+6      	; 0x1270 <__unpack_f+0xbe>
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	8c 93       	st	X, r24
    126e:	12 c0       	rjmp	.+36     	; 0x1294 <__unpack_f+0xe2>
    1270:	1c 92       	st	X, r1
    1272:	10 c0       	rjmp	.+32     	; 0x1294 <__unpack_f+0xe2>
    1274:	2f 57       	subi	r18, 0x7F	; 127
    1276:	30 40       	sbci	r19, 0x00	; 0
    1278:	13 96       	adiw	r26, 0x03	; 3
    127a:	3c 93       	st	X, r19
    127c:	2e 93       	st	-X, r18
    127e:	12 97       	sbiw	r26, 0x02	; 2
    1280:	83 e0       	ldi	r24, 0x03	; 3
    1282:	8c 93       	st	X, r24
    1284:	87 e0       	ldi	r24, 0x07	; 7
    1286:	44 0f       	add	r20, r20
    1288:	55 1f       	adc	r21, r21
    128a:	66 1f       	adc	r22, r22
    128c:	77 1f       	adc	r23, r23
    128e:	8a 95       	dec	r24
    1290:	d1 f7       	brne	.-12     	; 0x1286 <__unpack_f+0xd4>
    1292:	70 64       	ori	r23, 0x40	; 64
    1294:	14 96       	adiw	r26, 0x04	; 4
    1296:	4d 93       	st	X+, r20
    1298:	5d 93       	st	X+, r21
    129a:	6d 93       	st	X+, r22
    129c:	7c 93       	st	X, r23
    129e:	17 97       	sbiw	r26, 0x07	; 7
    12a0:	08 95       	ret

000012a2 <__fpcmp_parts_f>:
    12a2:	1f 93       	push	r17
    12a4:	dc 01       	movw	r26, r24
    12a6:	fb 01       	movw	r30, r22
    12a8:	9c 91       	ld	r25, X
    12aa:	92 30       	cpi	r25, 0x02	; 2
    12ac:	08 f4       	brcc	.+2      	; 0x12b0 <__fpcmp_parts_f+0xe>
    12ae:	47 c0       	rjmp	.+142    	; 0x133e <__fpcmp_parts_f+0x9c>
    12b0:	80 81       	ld	r24, Z
    12b2:	82 30       	cpi	r24, 0x02	; 2
    12b4:	08 f4       	brcc	.+2      	; 0x12b8 <__fpcmp_parts_f+0x16>
    12b6:	43 c0       	rjmp	.+134    	; 0x133e <__fpcmp_parts_f+0x9c>
    12b8:	94 30       	cpi	r25, 0x04	; 4
    12ba:	51 f4       	brne	.+20     	; 0x12d0 <__fpcmp_parts_f+0x2e>
    12bc:	11 96       	adiw	r26, 0x01	; 1
    12be:	1c 91       	ld	r17, X
    12c0:	84 30       	cpi	r24, 0x04	; 4
    12c2:	99 f5       	brne	.+102    	; 0x132a <__fpcmp_parts_f+0x88>
    12c4:	81 81       	ldd	r24, Z+1	; 0x01
    12c6:	68 2f       	mov	r22, r24
    12c8:	70 e0       	ldi	r23, 0x00	; 0
    12ca:	61 1b       	sub	r22, r17
    12cc:	71 09       	sbc	r23, r1
    12ce:	3f c0       	rjmp	.+126    	; 0x134e <__fpcmp_parts_f+0xac>
    12d0:	84 30       	cpi	r24, 0x04	; 4
    12d2:	21 f0       	breq	.+8      	; 0x12dc <__fpcmp_parts_f+0x3a>
    12d4:	92 30       	cpi	r25, 0x02	; 2
    12d6:	31 f4       	brne	.+12     	; 0x12e4 <__fpcmp_parts_f+0x42>
    12d8:	82 30       	cpi	r24, 0x02	; 2
    12da:	b9 f1       	breq	.+110    	; 0x134a <__fpcmp_parts_f+0xa8>
    12dc:	81 81       	ldd	r24, Z+1	; 0x01
    12de:	88 23       	and	r24, r24
    12e0:	89 f1       	breq	.+98     	; 0x1344 <__fpcmp_parts_f+0xa2>
    12e2:	2d c0       	rjmp	.+90     	; 0x133e <__fpcmp_parts_f+0x9c>
    12e4:	11 96       	adiw	r26, 0x01	; 1
    12e6:	1c 91       	ld	r17, X
    12e8:	11 97       	sbiw	r26, 0x01	; 1
    12ea:	82 30       	cpi	r24, 0x02	; 2
    12ec:	f1 f0       	breq	.+60     	; 0x132a <__fpcmp_parts_f+0x88>
    12ee:	81 81       	ldd	r24, Z+1	; 0x01
    12f0:	18 17       	cp	r17, r24
    12f2:	d9 f4       	brne	.+54     	; 0x132a <__fpcmp_parts_f+0x88>
    12f4:	12 96       	adiw	r26, 0x02	; 2
    12f6:	2d 91       	ld	r18, X+
    12f8:	3c 91       	ld	r19, X
    12fa:	13 97       	sbiw	r26, 0x03	; 3
    12fc:	82 81       	ldd	r24, Z+2	; 0x02
    12fe:	93 81       	ldd	r25, Z+3	; 0x03
    1300:	82 17       	cp	r24, r18
    1302:	93 07       	cpc	r25, r19
    1304:	94 f0       	brlt	.+36     	; 0x132a <__fpcmp_parts_f+0x88>
    1306:	28 17       	cp	r18, r24
    1308:	39 07       	cpc	r19, r25
    130a:	bc f0       	brlt	.+46     	; 0x133a <__fpcmp_parts_f+0x98>
    130c:	14 96       	adiw	r26, 0x04	; 4
    130e:	8d 91       	ld	r24, X+
    1310:	9d 91       	ld	r25, X+
    1312:	0d 90       	ld	r0, X+
    1314:	bc 91       	ld	r27, X
    1316:	a0 2d       	mov	r26, r0
    1318:	24 81       	ldd	r18, Z+4	; 0x04
    131a:	35 81       	ldd	r19, Z+5	; 0x05
    131c:	46 81       	ldd	r20, Z+6	; 0x06
    131e:	57 81       	ldd	r21, Z+7	; 0x07
    1320:	28 17       	cp	r18, r24
    1322:	39 07       	cpc	r19, r25
    1324:	4a 07       	cpc	r20, r26
    1326:	5b 07       	cpc	r21, r27
    1328:	18 f4       	brcc	.+6      	; 0x1330 <__fpcmp_parts_f+0x8e>
    132a:	11 23       	and	r17, r17
    132c:	41 f0       	breq	.+16     	; 0x133e <__fpcmp_parts_f+0x9c>
    132e:	0a c0       	rjmp	.+20     	; 0x1344 <__fpcmp_parts_f+0xa2>
    1330:	82 17       	cp	r24, r18
    1332:	93 07       	cpc	r25, r19
    1334:	a4 07       	cpc	r26, r20
    1336:	b5 07       	cpc	r27, r21
    1338:	40 f4       	brcc	.+16     	; 0x134a <__fpcmp_parts_f+0xa8>
    133a:	11 23       	and	r17, r17
    133c:	19 f0       	breq	.+6      	; 0x1344 <__fpcmp_parts_f+0xa2>
    133e:	61 e0       	ldi	r22, 0x01	; 1
    1340:	70 e0       	ldi	r23, 0x00	; 0
    1342:	05 c0       	rjmp	.+10     	; 0x134e <__fpcmp_parts_f+0xac>
    1344:	6f ef       	ldi	r22, 0xFF	; 255
    1346:	7f ef       	ldi	r23, 0xFF	; 255
    1348:	02 c0       	rjmp	.+4      	; 0x134e <__fpcmp_parts_f+0xac>
    134a:	60 e0       	ldi	r22, 0x00	; 0
    134c:	70 e0       	ldi	r23, 0x00	; 0
    134e:	cb 01       	movw	r24, r22
    1350:	1f 91       	pop	r17
    1352:	08 95       	ret

00001354 <GPIO_PIN_CONFIG>:
uint8 *PINX_REGS[]={&PINA,&PINB,&PINC,&PIND};

static Bool PIN_CONFIG(GPIO_CONFIG_t *GPIO_PIN);

Bool GPIO_PIN_CONFIG(GPIO_CONFIG_t *GPIO_PIN)
{
    1354:	dc 01       	movw	r26, r24
	Bool ret=E_OK;
	if(NULL==GPIO_PIN||GPIO_PIN->GPIO_PIN>PIN_MAX-1||GPIO_PIN->GPIO_PORT>PORT_MAX-1)
    1356:	00 97       	sbiw	r24, 0x00	; 0
    1358:	11 f4       	brne	.+4      	; 0x135e <GPIO_PIN_CONFIG+0xa>
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	08 95       	ret
    135e:	8c 91       	ld	r24, X
    1360:	28 2f       	mov	r18, r24
    1362:	26 95       	lsr	r18
    1364:	26 95       	lsr	r18
    1366:	27 70       	andi	r18, 0x07	; 7
    1368:	98 2f       	mov	r25, r24
    136a:	93 70       	andi	r25, 0x03	; 3
    136c:	e9 2f       	mov	r30, r25
    136e:	f0 e0       	ldi	r31, 0x00	; 0


static Bool PIN_CONFIG(GPIO_CONFIG_t *GPIO_PIN)
{
	Bool ret=E_OK;
	switch(GPIO_PIN->GPIO_STATE)
    1370:	82 95       	swap	r24
    1372:	86 95       	lsr	r24
    1374:	83 70       	andi	r24, 0x03	; 3
    1376:	48 2f       	mov	r20, r24
    1378:	50 e0       	ldi	r21, 0x00	; 0
    137a:	41 30       	cpi	r20, 0x01	; 1
    137c:	51 05       	cpc	r21, r1
    137e:	d1 f0       	breq	.+52     	; 0x13b4 <GPIO_PIN_CONFIG+0x60>
    1380:	42 30       	cpi	r20, 0x02	; 2
    1382:	51 05       	cpc	r21, r1
    1384:	09 f4       	brne	.+2      	; 0x1388 <GPIO_PIN_CONFIG+0x34>
    1386:	41 c0       	rjmp	.+130    	; 0x140a <GPIO_PIN_CONFIG+0xb6>
    1388:	45 2b       	or	r20, r21
    138a:	09 f0       	breq	.+2      	; 0x138e <GPIO_PIN_CONFIG+0x3a>
    138c:	3c c0       	rjmp	.+120    	; 0x1406 <GPIO_PIN_CONFIG+0xb2>
	{
		case GPIO_INPUT:
			CLEAR_BIT(*DDRX_REGS[GPIO_PIN->GPIO_PORT],GPIO_PIN->GPIO_PIN);
    138e:	ee 0f       	add	r30, r30
    1390:	ff 1f       	adc	r31, r31
    1392:	ec 56       	subi	r30, 0x6C	; 108
    1394:	fe 4f       	sbci	r31, 0xFE	; 254
    1396:	01 90       	ld	r0, Z+
    1398:	f0 81       	ld	r31, Z
    139a:	e0 2d       	mov	r30, r0
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <GPIO_PIN_CONFIG+0x52>
    13a2:	88 0f       	add	r24, r24
    13a4:	99 1f       	adc	r25, r25
    13a6:	2a 95       	dec	r18
    13a8:	e2 f7       	brpl	.-8      	; 0x13a2 <GPIO_PIN_CONFIG+0x4e>
    13aa:	80 95       	com	r24
    13ac:	20 81       	ld	r18, Z
    13ae:	28 23       	and	r18, r24
    13b0:	20 83       	st	Z, r18
    13b2:	29 c0       	rjmp	.+82     	; 0x1406 <GPIO_PIN_CONFIG+0xb2>
			break;
		case GPIO_OUTPUT:
			SET_BIT(*DDRX_REGS[GPIO_PIN->GPIO_PORT],GPIO_PIN->GPIO_PIN);
    13b4:	ee 0f       	add	r30, r30
    13b6:	ff 1f       	adc	r31, r31
    13b8:	ec 56       	subi	r30, 0x6C	; 108
    13ba:	fe 4f       	sbci	r31, 0xFE	; 254
    13bc:	01 90       	ld	r0, Z+
    13be:	f0 81       	ld	r31, Z
    13c0:	e0 2d       	mov	r30, r0
    13c2:	ca 01       	movw	r24, r20
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <GPIO_PIN_CONFIG+0x76>
    13c6:	88 0f       	add	r24, r24
    13c8:	99 1f       	adc	r25, r25
    13ca:	2a 95       	dec	r18
    13cc:	e2 f7       	brpl	.-8      	; 0x13c6 <GPIO_PIN_CONFIG+0x72>
    13ce:	9c 01       	movw	r18, r24
    13d0:	80 81       	ld	r24, Z
    13d2:	82 2b       	or	r24, r18
    13d4:	80 83       	st	Z, r24
			CLEAR_BIT(*PORTX_REGS[GPIO_PIN->GPIO_PORT],GPIO_PIN->GPIO_PIN);
    13d6:	8c 91       	ld	r24, X
    13d8:	e8 2f       	mov	r30, r24
    13da:	e3 70       	andi	r30, 0x03	; 3
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	ee 0f       	add	r30, r30
    13e0:	ff 1f       	adc	r31, r31
    13e2:	e4 57       	subi	r30, 0x74	; 116
    13e4:	fe 4f       	sbci	r31, 0xFE	; 254
    13e6:	01 90       	ld	r0, Z+
    13e8:	f0 81       	ld	r31, Z
    13ea:	e0 2d       	mov	r30, r0
    13ec:	86 95       	lsr	r24
    13ee:	86 95       	lsr	r24
    13f0:	87 70       	andi	r24, 0x07	; 7
    13f2:	02 c0       	rjmp	.+4      	; 0x13f8 <GPIO_PIN_CONFIG+0xa4>
    13f4:	44 0f       	add	r20, r20
    13f6:	55 1f       	adc	r21, r21
    13f8:	8a 95       	dec	r24
    13fa:	e2 f7       	brpl	.-8      	; 0x13f4 <GPIO_PIN_CONFIG+0xa0>
    13fc:	94 2f       	mov	r25, r20
    13fe:	90 95       	com	r25
    1400:	80 81       	ld	r24, Z
    1402:	89 23       	and	r24, r25
    1404:	80 83       	st	Z, r24
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	08 95       	ret
			break;
		case GPIO_INPUT_PULLUP:
			CLEAR_BIT(*DDRX_REGS[GPIO_PIN->GPIO_PORT],GPIO_PIN->GPIO_PIN);
    140a:	ee 0f       	add	r30, r30
    140c:	ff 1f       	adc	r31, r31
    140e:	ec 56       	subi	r30, 0x6C	; 108
    1410:	fe 4f       	sbci	r31, 0xFE	; 254
    1412:	01 90       	ld	r0, Z+
    1414:	f0 81       	ld	r31, Z
    1416:	e0 2d       	mov	r30, r0
    1418:	41 e0       	ldi	r20, 0x01	; 1
    141a:	50 e0       	ldi	r21, 0x00	; 0
    141c:	ca 01       	movw	r24, r20
    141e:	02 c0       	rjmp	.+4      	; 0x1424 <GPIO_PIN_CONFIG+0xd0>
    1420:	88 0f       	add	r24, r24
    1422:	99 1f       	adc	r25, r25
    1424:	2a 95       	dec	r18
    1426:	e2 f7       	brpl	.-8      	; 0x1420 <GPIO_PIN_CONFIG+0xcc>
    1428:	80 95       	com	r24
    142a:	20 81       	ld	r18, Z
    142c:	28 23       	and	r18, r24
    142e:	20 83       	st	Z, r18
			SET_BIT(*PORTX_REGS[GPIO_PIN->GPIO_PORT],GPIO_PIN->GPIO_PIN);
    1430:	8c 91       	ld	r24, X
    1432:	e8 2f       	mov	r30, r24
    1434:	e3 70       	andi	r30, 0x03	; 3
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	ee 0f       	add	r30, r30
    143a:	ff 1f       	adc	r31, r31
    143c:	e4 57       	subi	r30, 0x74	; 116
    143e:	fe 4f       	sbci	r31, 0xFE	; 254
    1440:	01 90       	ld	r0, Z+
    1442:	f0 81       	ld	r31, Z
    1444:	e0 2d       	mov	r30, r0
    1446:	86 95       	lsr	r24
    1448:	86 95       	lsr	r24
    144a:	87 70       	andi	r24, 0x07	; 7
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <GPIO_PIN_CONFIG+0xfe>
    144e:	44 0f       	add	r20, r20
    1450:	55 1f       	adc	r21, r21
    1452:	8a 95       	dec	r24
    1454:	e2 f7       	brpl	.-8      	; 0x144e <GPIO_PIN_CONFIG+0xfa>
    1456:	80 81       	ld	r24, Z
    1458:	84 2b       	or	r24, r20
    145a:	80 83       	st	Z, r24
    145c:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		PIN_CONFIG(GPIO_PIN);
	}
	return ret;
}
    145e:	08 95       	ret

00001460 <GPIO_PIN_READ>:

Bool GPIO_PIN_READ(GPIO_CONFIG_t *GPIO_PIN,Logic_Level *Level)
{
    1460:	fc 01       	movw	r30, r24
    1462:	db 01       	movw	r26, r22
	Bool ret = E_OK;
	if (NULL == GPIO_PIN)
    1464:	00 97       	sbiw	r24, 0x00	; 0
    1466:	11 f4       	brne	.+4      	; 0x146c <GPIO_PIN_READ+0xc>
    1468:	80 e0       	ldi	r24, 0x00	; 0
    146a:	08 95       	ret
		ret = E_NOK;
	else {
		*Level=READ_BIT(*PINX_REGS[GPIO_PIN->GPIO_PORT],GPIO_PIN->GPIO_PIN);
    146c:	20 81       	ld	r18, Z
    146e:	e2 2f       	mov	r30, r18
    1470:	e3 70       	andi	r30, 0x03	; 3
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	ee 0f       	add	r30, r30
    1476:	ff 1f       	adc	r31, r31
    1478:	e4 56       	subi	r30, 0x64	; 100
    147a:	fe 4f       	sbci	r31, 0xFE	; 254
    147c:	01 90       	ld	r0, Z+
    147e:	f0 81       	ld	r31, Z
    1480:	e0 2d       	mov	r30, r0
    1482:	80 81       	ld	r24, Z
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	26 95       	lsr	r18
    1488:	26 95       	lsr	r18
    148a:	27 70       	andi	r18, 0x07	; 7
    148c:	02 c0       	rjmp	.+4      	; 0x1492 <GPIO_PIN_READ+0x32>
    148e:	95 95       	asr	r25
    1490:	87 95       	ror	r24
    1492:	2a 95       	dec	r18
    1494:	e2 f7       	brpl	.-8      	; 0x148e <GPIO_PIN_READ+0x2e>
    1496:	81 70       	andi	r24, 0x01	; 1
    1498:	8c 93       	st	X, r24
    149a:	81 e0       	ldi	r24, 0x01	; 1
	}
	return ret;
}
    149c:	08 95       	ret

0000149e <GPIO_PIN_WRITE>:

Bool GPIO_PIN_WRITE(GPIO_CONFIG_t *GPIO_PIN,Logic_Level Level)
{
    149e:	fc 01       	movw	r30, r24
	Bool ret = E_OK;
	if (NULL == GPIO_PIN)
    14a0:	00 97       	sbiw	r24, 0x00	; 0
    14a2:	b9 f1       	breq	.+110    	; 0x1512 <GPIO_PIN_WRITE+0x74>
		ret = E_NOK;
	else {
		switch(Level)
    14a4:	66 23       	and	r22, r22
    14a6:	d1 f0       	breq	.+52     	; 0x14dc <GPIO_PIN_WRITE+0x3e>
    14a8:	61 30       	cpi	r22, 0x01	; 1
    14aa:	99 f5       	brne	.+102    	; 0x1512 <GPIO_PIN_WRITE+0x74>
		{
			case GPIO_HIGH:
				SET_BIT(*PORTX_REGS[GPIO_PIN->GPIO_PORT],GPIO_PIN->GPIO_PIN);
    14ac:	20 81       	ld	r18, Z
    14ae:	e2 2f       	mov	r30, r18
    14b0:	e3 70       	andi	r30, 0x03	; 3
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	ee 0f       	add	r30, r30
    14b6:	ff 1f       	adc	r31, r31
    14b8:	e4 57       	subi	r30, 0x74	; 116
    14ba:	fe 4f       	sbci	r31, 0xFE	; 254
    14bc:	01 90       	ld	r0, Z+
    14be:	f0 81       	ld	r31, Z
    14c0:	e0 2d       	mov	r30, r0
    14c2:	26 95       	lsr	r18
    14c4:	26 95       	lsr	r18
    14c6:	27 70       	andi	r18, 0x07	; 7
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <GPIO_PIN_WRITE+0x34>
    14ce:	88 0f       	add	r24, r24
    14d0:	99 1f       	adc	r25, r25
    14d2:	2a 95       	dec	r18
    14d4:	e2 f7       	brpl	.-8      	; 0x14ce <GPIO_PIN_WRITE+0x30>
    14d6:	20 81       	ld	r18, Z
    14d8:	28 2b       	or	r18, r24
    14da:	18 c0       	rjmp	.+48     	; 0x150c <GPIO_PIN_WRITE+0x6e>
				break;
			case GPIO_LOW:
				CLEAR_BIT(*PORTX_REGS[GPIO_PIN->GPIO_PORT],GPIO_PIN->GPIO_PIN);
    14dc:	20 81       	ld	r18, Z
    14de:	e2 2f       	mov	r30, r18
    14e0:	e3 70       	andi	r30, 0x03	; 3
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	ee 0f       	add	r30, r30
    14e6:	ff 1f       	adc	r31, r31
    14e8:	e4 57       	subi	r30, 0x74	; 116
    14ea:	fe 4f       	sbci	r31, 0xFE	; 254
    14ec:	01 90       	ld	r0, Z+
    14ee:	f0 81       	ld	r31, Z
    14f0:	e0 2d       	mov	r30, r0
    14f2:	26 95       	lsr	r18
    14f4:	26 95       	lsr	r18
    14f6:	27 70       	andi	r18, 0x07	; 7
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <GPIO_PIN_WRITE+0x64>
    14fe:	88 0f       	add	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	2a 95       	dec	r18
    1504:	e2 f7       	brpl	.-8      	; 0x14fe <GPIO_PIN_WRITE+0x60>
    1506:	80 95       	com	r24
    1508:	20 81       	ld	r18, Z
    150a:	28 23       	and	r18, r24
    150c:	20 83       	st	Z, r18
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	08 95       	ret
				break;
    1512:	80 e0       	ldi	r24, 0x00	; 0
			default:
				ret=E_NOK;
		}
	}
	return ret;
}
    1514:	08 95       	ret

00001516 <GPIO_PIN_Toggle>:

Bool GPIO_PIN_Toggle(GPIO_CONFIG_t *GPIO_PIN)
{
    1516:	fc 01       	movw	r30, r24
	Bool ret = E_OK;
	if (NULL == GPIO_PIN)
    1518:	00 97       	sbiw	r24, 0x00	; 0
    151a:	11 f4       	brne	.+4      	; 0x1520 <GPIO_PIN_Toggle+0xa>
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	08 95       	ret
		ret = E_NOK;
	else {
		TOGGLE_BIT(*PORTX_REGS[GPIO_PIN->GPIO_PORT], GPIO_PIN->GPIO_PIN);
    1520:	20 81       	ld	r18, Z
    1522:	e2 2f       	mov	r30, r18
    1524:	e3 70       	andi	r30, 0x03	; 3
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	ee 0f       	add	r30, r30
    152a:	ff 1f       	adc	r31, r31
    152c:	e4 57       	subi	r30, 0x74	; 116
    152e:	fe 4f       	sbci	r31, 0xFE	; 254
    1530:	01 90       	ld	r0, Z+
    1532:	f0 81       	ld	r31, Z
    1534:	e0 2d       	mov	r30, r0
    1536:	26 95       	lsr	r18
    1538:	26 95       	lsr	r18
    153a:	27 70       	andi	r18, 0x07	; 7
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	02 c0       	rjmp	.+4      	; 0x1546 <GPIO_PIN_Toggle+0x30>
    1542:	88 0f       	add	r24, r24
    1544:	99 1f       	adc	r25, r25
    1546:	2a 95       	dec	r18
    1548:	e2 f7       	brpl	.-8      	; 0x1542 <GPIO_PIN_Toggle+0x2c>
    154a:	20 81       	ld	r18, Z
    154c:	28 27       	eor	r18, r24
    154e:	20 83       	st	Z, r18
    1550:	81 e0       	ldi	r24, 0x01	; 1
	}
	return ret;
}
    1552:	08 95       	ret

00001554 <GPIO_PORT_CONFIG>:

Bool GPIO_PORT_CONFIG(PORT_INDEX Port,uint8 Config)
{
	Bool ret = E_OK;
	if(Port>PORT_MAX-1)
    1554:	84 30       	cpi	r24, 0x04	; 4
    1556:	10 f0       	brcs	.+4      	; 0x155c <GPIO_PORT_CONFIG+0x8>
    1558:	80 e0       	ldi	r24, 0x00	; 0
    155a:	08 95       	ret
		ret=E_NOK;
	else
	{
		*DDRX_REGS[Port] = Config;
    155c:	e8 2f       	mov	r30, r24
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	ee 0f       	add	r30, r30
    1562:	ff 1f       	adc	r31, r31
    1564:	ec 56       	subi	r30, 0x6C	; 108
    1566:	fe 4f       	sbci	r31, 0xFE	; 254
    1568:	01 90       	ld	r0, Z+
    156a:	f0 81       	ld	r31, Z
    156c:	e0 2d       	mov	r30, r0
    156e:	60 83       	st	Z, r22
    1570:	81 e0       	ldi	r24, 0x01	; 1
	}
	return ret;
}
    1572:	08 95       	ret

00001574 <GPIO_PORT_WRITE>:

Bool GPIO_PORT_WRITE(PORT_INDEX Port,Logic_Level Level){
	Bool ret = E_OK;
	if (Port>PORT_MAX-1)
    1574:	84 30       	cpi	r24, 0x04	; 4
    1576:	10 f0       	brcs	.+4      	; 0x157c <GPIO_PORT_WRITE+0x8>
    1578:	80 e0       	ldi	r24, 0x00	; 0
    157a:	08 95       	ret
		ret = E_NOK;
	else {
		*PORTX_REGS[Port] = Level;
    157c:	e8 2f       	mov	r30, r24
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	ee 0f       	add	r30, r30
    1582:	ff 1f       	adc	r31, r31
    1584:	e4 57       	subi	r30, 0x74	; 116
    1586:	fe 4f       	sbci	r31, 0xFE	; 254
    1588:	01 90       	ld	r0, Z+
    158a:	f0 81       	ld	r31, Z
    158c:	e0 2d       	mov	r30, r0
    158e:	60 83       	st	Z, r22
    1590:	81 e0       	ldi	r24, 0x01	; 1
	}
	return ret;
}
    1592:	08 95       	ret

00001594 <GPIO_PORT_READ>:

Bool GPIO_PORT_READ(PORT_INDEX Port,Logic_Level *Level)
{
    1594:	db 01       	movw	r26, r22
	Bool ret = E_OK;
	if (Port>PORT_MAX-1||NULL == Level)
    1596:	84 30       	cpi	r24, 0x04	; 4
    1598:	80 f4       	brcc	.+32     	; 0x15ba <GPIO_PORT_READ+0x26>
    159a:	61 15       	cp	r22, r1
    159c:	71 05       	cpc	r23, r1
    159e:	69 f0       	breq	.+26     	; 0x15ba <GPIO_PORT_READ+0x26>
		ret = E_NOK;
	else {
		*Level=*PINX_REGS[Port];
    15a0:	e8 2f       	mov	r30, r24
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	ee 0f       	add	r30, r30
    15a6:	ff 1f       	adc	r31, r31
    15a8:	e4 56       	subi	r30, 0x64	; 100
    15aa:	fe 4f       	sbci	r31, 0xFE	; 254
    15ac:	01 90       	ld	r0, Z+
    15ae:	f0 81       	ld	r31, Z
    15b0:	e0 2d       	mov	r30, r0
    15b2:	80 81       	ld	r24, Z
    15b4:	8c 93       	st	X, r24
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	08 95       	ret
    15ba:	80 e0       	ldi	r24, 0x00	; 0
	}
	return ret;
}
    15bc:	08 95       	ret

000015be <GPIO_PORT_Toggle>:

Bool GPIO_PORT_Toggle(PORT_INDEX Port)
{
	Bool ret = E_OK;
		if (Port>PORT_MAX-1)
    15be:	84 30       	cpi	r24, 0x04	; 4
    15c0:	10 f0       	brcs	.+4      	; 0x15c6 <GPIO_PORT_Toggle+0x8>
    15c2:	80 e0       	ldi	r24, 0x00	; 0
    15c4:	08 95       	ret
			ret = E_NOK;
		else {
			*PORTX_REGS[Port]=~(*PORTX_REGS[Port]);
    15c6:	e8 2f       	mov	r30, r24
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	ee 0f       	add	r30, r30
    15cc:	ff 1f       	adc	r31, r31
    15ce:	e4 57       	subi	r30, 0x74	; 116
    15d0:	fe 4f       	sbci	r31, 0xFE	; 254
    15d2:	01 90       	ld	r0, Z+
    15d4:	f0 81       	ld	r31, Z
    15d6:	e0 2d       	mov	r30, r0
    15d8:	80 81       	ld	r24, Z
    15da:	80 95       	com	r24
    15dc:	80 83       	st	Z, r24
    15de:	81 e0       	ldi	r24, 0x01	; 1
		}
		return ret;
}
    15e0:	08 95       	ret

000015e2 <I2C_WRITE_BYTE>:
	return ret;
}

void I2C_WRITE_BYTE(uint8 data)
{
	I2C_WRITE_BUFFER=data;
    15e2:	83 b9       	out	0x03, r24	; 3
	I2C_WRITE_ENABLE();
    15e4:	84 e8       	ldi	r24, 0x84	; 132
    15e6:	86 bf       	out	0x36, r24	; 54
	I2C_WAIT(); //wait for data transmission
    15e8:	06 b6       	in	r0, 0x36	; 54
    15ea:	07 fe       	sbrs	r0, 7
    15ec:	fd cf       	rjmp	.-6      	; 0x15e8 <I2C_WRITE_BYTE+0x6>
}
    15ee:	08 95       	ret

000015f0 <I2C_INIT>:

Bool I2C_INIT(I2C_CONFIG_t *I2C)
{
    15f0:	ef 92       	push	r14
    15f2:	ff 92       	push	r15
    15f4:	0f 93       	push	r16
    15f6:	1f 93       	push	r17
    15f8:	fc 01       	movw	r30, r24
	Bool ret=E_OK;
	switch(I2C->Prescaler_Freq)
    15fa:	64 81       	ldd	r22, Z+4	; 0x04
    15fc:	63 70       	andi	r22, 0x03	; 3
    15fe:	86 2f       	mov	r24, r22
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	81 30       	cpi	r24, 0x01	; 1
    1604:	91 05       	cpc	r25, r1
    1606:	79 f0       	breq	.+30     	; 0x1626 <I2C_INIT+0x36>
    1608:	82 30       	cpi	r24, 0x02	; 2
    160a:	91 05       	cpc	r25, r1
    160c:	1c f4       	brge	.+6      	; 0x1614 <I2C_INIT+0x24>
    160e:	89 2b       	or	r24, r25
    1610:	41 f0       	breq	.+16     	; 0x1622 <I2C_INIT+0x32>
    1612:	05 c0       	rjmp	.+10     	; 0x161e <I2C_INIT+0x2e>
    1614:	82 30       	cpi	r24, 0x02	; 2
    1616:	91 05       	cpc	r25, r1
    1618:	49 f0       	breq	.+18     	; 0x162c <I2C_INIT+0x3c>
    161a:	03 97       	sbiw	r24, 0x03	; 3
    161c:	49 f0       	breq	.+18     	; 0x1630 <I2C_INIT+0x40>
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	34 c0       	rjmp	.+104    	; 0x168a <I2C_INIT+0x9a>
	{
		case TWPS_PRESCALER_1:
			CLEAR_BIT(TWSR,TWPS0);
    1622:	08 98       	cbi	0x01, 0	; 1
    1624:	01 c0       	rjmp	.+2      	; 0x1628 <I2C_INIT+0x38>
			CLEAR_BIT(TWSR,TWPS1);
			break;
		case TWPS_PRESCALER_4:
			SET_BIT(TWSR,TWPS0);
    1626:	08 9a       	sbi	0x01, 0	; 1
			CLEAR_BIT(TWSR,TWPS1);
    1628:	09 98       	cbi	0x01, 1	; 1
    162a:	04 c0       	rjmp	.+8      	; 0x1634 <I2C_INIT+0x44>
			break;
		case TWPS_PRESCALER_16:
			CLEAR_BIT(TWSR,TWPS0);
    162c:	08 98       	cbi	0x01, 0	; 1
    162e:	01 c0       	rjmp	.+2      	; 0x1632 <I2C_INIT+0x42>
			SET_BIT(TWSR,TWPS1);
			break;
		case TWPS_PRESCALER_64:
			SET_BIT(TWSR,TWPS0);
    1630:	08 9a       	sbi	0x01, 0	; 1
			SET_BIT(TWSR,TWPS1);
    1632:	09 9a       	sbi	0x01, 1	; 1
			break;
		default:
			ret=E_NOK;
	}
	if(ret==E_OK)
		TWBR=((uint32)F_CPU/I2C->SCL_FREQ-16)/(2*Pow_4(I2C->Prescaler_Freq));
    1634:	20 81       	ld	r18, Z
    1636:	31 81       	ldd	r19, Z+1	; 0x01
    1638:	42 81       	ldd	r20, Z+2	; 0x02
    163a:	53 81       	ldd	r21, Z+3	; 0x03
    163c:	71 e0       	ldi	r23, 0x01	; 1
    163e:	e7 2e       	mov	r14, r23
    1640:	f1 2c       	mov	r15, r1
    1642:	01 2d       	mov	r16, r1
    1644:	11 2d       	mov	r17, r1
    1646:	80 e0       	ldi	r24, 0x00	; 0
    1648:	08 c0       	rjmp	.+16     	; 0x165a <I2C_INIT+0x6a>
static int32 Pow_4(int8 exp)
{
	int8 Counter=0;
	int32 ret=1;
	for(Counter=0;Counter<=exp-1;Counter++)
		ret*=4;
    164a:	92 e0       	ldi	r25, 0x02	; 2
    164c:	ee 0c       	add	r14, r14
    164e:	ff 1c       	adc	r15, r15
    1650:	00 1f       	adc	r16, r16
    1652:	11 1f       	adc	r17, r17
    1654:	9a 95       	dec	r25
    1656:	d1 f7       	brne	.-12     	; 0x164c <I2C_INIT+0x5c>

static int32 Pow_4(int8 exp)
{
	int8 Counter=0;
	int32 ret=1;
	for(Counter=0;Counter<=exp-1;Counter++)
    1658:	8f 5f       	subi	r24, 0xFF	; 255
    165a:	86 17       	cp	r24, r22
    165c:	b4 f3       	brlt	.-20     	; 0x164a <I2C_INIT+0x5a>
			break;
		default:
			ret=E_NOK;
	}
	if(ret==E_OK)
		TWBR=((uint32)F_CPU/I2C->SCL_FREQ-16)/(2*Pow_4(I2C->Prescaler_Freq));
    165e:	60 e0       	ldi	r22, 0x00	; 0
    1660:	72 e1       	ldi	r23, 0x12	; 18
    1662:	8a e7       	ldi	r24, 0x7A	; 122
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <__udivmodsi4>
    166a:	20 51       	subi	r18, 0x10	; 16
    166c:	30 40       	sbci	r19, 0x00	; 0
    166e:	40 40       	sbci	r20, 0x00	; 0
    1670:	50 40       	sbci	r21, 0x00	; 0
    1672:	ee 0c       	add	r14, r14
    1674:	ff 1c       	adc	r15, r15
    1676:	00 1f       	adc	r16, r16
    1678:	11 1f       	adc	r17, r17
    167a:	ca 01       	movw	r24, r20
    167c:	b9 01       	movw	r22, r18
    167e:	a8 01       	movw	r20, r16
    1680:	97 01       	movw	r18, r14
    1682:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <__udivmodsi4>
    1686:	20 b9       	out	0x00, r18	; 0
    1688:	81 e0       	ldi	r24, 0x01	; 1
#if I2C_RECIEVE_INTERRUPT==FEATURE_ENABLE
	I2C_RX_CALLBACK_PTR=I2C->I2C_RX_CALLBACK;
	SET_BIT(TWCR,TWIE);
#endif
	return ret;
}
    168a:	1f 91       	pop	r17
    168c:	0f 91       	pop	r16
    168e:	ff 90       	pop	r15
    1690:	ef 90       	pop	r14
    1692:	08 95       	ret

00001694 <I2C_Write_BYTE>:

Bool I2C_Write_BYTE(uint8 Add,uint8 REG_add,uint8 Data)
{
    1694:	98 2f       	mov	r25, r24
	Bool ret = E_OK;
	I2C_GEN_START_COND(); //initiate Start Condition on SCL/SDA
    1696:	84 ea       	ldi	r24, 0xA4	; 164
    1698:	86 bf       	out	0x36, r24	; 54
	I2C_WAIT();
    169a:	06 b6       	in	r0, 0x36	; 54
    169c:	07 fe       	sbrs	r0, 7
    169e:	fd cf       	rjmp	.-6      	; 0x169a <I2C_Write_BYTE+0x6>
	switch (I2C_STATUS) {
    16a0:	81 b1       	in	r24, 0x01	; 1
    16a2:	88 33       	cpi	r24, 0x38	; 56
    16a4:	01 f1       	breq	.+64     	; 0x16e6 <I2C_Write_BYTE+0x52>
	return ret;
}

void I2C_WRITE_BYTE(uint8 data)
{
	I2C_WRITE_BUFFER=data;
    16a6:	93 b9       	out	0x03, r25	; 3
	I2C_WRITE_ENABLE();
    16a8:	84 e8       	ldi	r24, 0x84	; 132
    16aa:	86 bf       	out	0x36, r24	; 54
	I2C_WAIT(); //wait for data transmission
    16ac:	06 b6       	in	r0, 0x36	; 54
    16ae:	07 fe       	sbrs	r0, 7
    16b0:	fd cf       	rjmp	.-6      	; 0x16ac <I2C_Write_BYTE+0x18>
	case TWSR_ARBIT_LOSS:
		ret = E_NOK; //Error
	} //start bit sent SDA switched from high to low bus is busy hence send address
	if (ret == E_OK) {
		I2C_WRITE_BYTE(Add | I2C_WRITE);
		switch (I2C_STATUS) {
    16b2:	81 b1       	in	r24, 0x01	; 1
    16b4:	88 31       	cpi	r24, 0x18	; 24
    16b6:	b9 f4       	brne	.+46     	; 0x16e6 <I2C_Write_BYTE+0x52>
	return ret;
}

void I2C_WRITE_BYTE(uint8 data)
{
	I2C_WRITE_BUFFER=data;
    16b8:	63 b9       	out	0x03, r22	; 3
	I2C_WRITE_ENABLE();
    16ba:	84 e8       	ldi	r24, 0x84	; 132
    16bc:	86 bf       	out	0x36, r24	; 54
	I2C_WAIT(); //wait for data transmission
    16be:	06 b6       	in	r0, 0x36	; 54
    16c0:	07 fe       	sbrs	r0, 7
    16c2:	fd cf       	rjmp	.-6      	; 0x16be <I2C_Write_BYTE+0x2a>
			ret = E_NOK;
		} //salve+W/R transmitted send data
	}
	if (ret == E_OK) {
		I2C_WRITE_BYTE(REG_add | I2C_WRITE);
		switch (I2C_STATUS) {
    16c4:	81 b1       	in	r24, 0x01	; 1
    16c6:	88 32       	cpi	r24, 0x28	; 40
    16c8:	71 f4       	brne	.+28     	; 0x16e6 <I2C_Write_BYTE+0x52>
	return ret;
}

void I2C_WRITE_BYTE(uint8 data)
{
	I2C_WRITE_BUFFER=data;
    16ca:	43 b9       	out	0x03, r20	; 3
	I2C_WRITE_ENABLE();
    16cc:	84 e8       	ldi	r24, 0x84	; 132
    16ce:	86 bf       	out	0x36, r24	; 54
	I2C_WAIT(); //wait for data transmission
    16d0:	06 b6       	in	r0, 0x36	; 54
    16d2:	07 fe       	sbrs	r0, 7
    16d4:	fd cf       	rjmp	.-6      	; 0x16d0 <I2C_Write_BYTE+0x3c>
			ret = E_NOK;
		}
	}
	if (ret == E_OK) {
		I2C_WRITE_BYTE(Data);
		I2C_WAIT();
    16d6:	06 b6       	in	r0, 0x36	; 54
    16d8:	07 fe       	sbrs	r0, 7
    16da:	fd cf       	rjmp	.-6      	; 0x16d6 <I2C_Write_BYTE+0x42>
		switch (I2C_STATUS) {
    16dc:	81 b1       	in	r24, 0x01	; 1
    16de:	88 32       	cpi	r24, 0x28	; 40
    16e0:	11 f4       	brne	.+4      	; 0x16e6 <I2C_Write_BYTE+0x52>
    16e2:	91 e0       	ldi	r25, 0x01	; 1
    16e4:	01 c0       	rjmp	.+2      	; 0x16e8 <I2C_Write_BYTE+0x54>
    16e6:	90 e0       	ldi	r25, 0x00	; 0
			break;
		default:
			ret = E_NOK;
		}
	}
	I2C_GEN_STOP_COND();
    16e8:	84 e9       	ldi	r24, 0x94	; 148
    16ea:	86 bf       	out	0x36, r24	; 54
	I2C_WAIT_STOP();
    16ec:	06 b6       	in	r0, 0x36	; 54
    16ee:	04 fc       	sbrc	r0, 4
    16f0:	fd cf       	rjmp	.-6      	; 0x16ec <I2C_Write_BYTE+0x58>
	return ret;
}
    16f2:	89 2f       	mov	r24, r25
    16f4:	08 95       	ret

000016f6 <I2C_Write_NBYTE_>:

Bool I2C_Write_NBYTE_(uint8 Add,uint8 *Data,uint8 No_bytes)
{
    16f6:	98 2f       	mov	r25, r24
	Bool ret = E_OK;
	I2C_GEN_START_COND(); //initiate Start Condition on SCL/SDA
    16f8:	84 ea       	ldi	r24, 0xA4	; 164
    16fa:	86 bf       	out	0x36, r24	; 54
	I2C_WAIT();
    16fc:	06 b6       	in	r0, 0x36	; 54
    16fe:	07 fe       	sbrs	r0, 7
    1700:	fd cf       	rjmp	.-6      	; 0x16fc <I2C_Write_NBYTE_+0x6>
	switch (I2C_STATUS) {
    1702:	81 b1       	in	r24, 0x01	; 1
    1704:	88 33       	cpi	r24, 0x38	; 56
    1706:	19 f1       	breq	.+70     	; 0x174e <I2C_Write_NBYTE_+0x58>
	return ret;
}

void I2C_WRITE_BYTE(uint8 data)
{
	I2C_WRITE_BUFFER=data;
    1708:	93 b9       	out	0x03, r25	; 3
	I2C_WRITE_ENABLE();
    170a:	84 e8       	ldi	r24, 0x84	; 132
    170c:	86 bf       	out	0x36, r24	; 54
	I2C_WAIT(); //wait for data transmission
    170e:	06 b6       	in	r0, 0x36	; 54
    1710:	07 fe       	sbrs	r0, 7
    1712:	fd cf       	rjmp	.-6      	; 0x170e <I2C_Write_NBYTE_+0x18>
		case TWSR_ARBIT_LOSS:
			ret = E_NOK; //Error
	} //start bit sent SDA switched from high to low bus is busy hence send address
	if (ret == E_OK) {
		I2C_WRITE_BYTE(Add | I2C_WRITE);
		switch (I2C_STATUS) {
    1714:	81 b1       	in	r24, 0x01	; 1
    1716:	88 31       	cpi	r24, 0x18	; 24
    1718:	d1 f4       	brne	.+52     	; 0x174e <I2C_Write_NBYTE_+0x58>
    171a:	90 e0       	ldi	r25, 0x00	; 0
				ret = E_NOK;
		} //salve+W/R transmitted send data
	}
	if (ret == E_OK) {
		uint8 Bytes_sent = 0;
		for (Bytes_sent = 0; Bytes_sent <= No_bytes - 1; Bytes_sent++) {
    171c:	50 e0       	ldi	r21, 0x00	; 0
}

void I2C_WRITE_BYTE(uint8 data)
{
	I2C_WRITE_BUFFER=data;
	I2C_WRITE_ENABLE();
    171e:	24 e8       	ldi	r18, 0x84	; 132
    1720:	0f c0       	rjmp	.+30     	; 0x1740 <I2C_Write_NBYTE_+0x4a>
		} //salve+W/R transmitted send data
	}
	if (ret == E_OK) {
		uint8 Bytes_sent = 0;
		for (Bytes_sent = 0; Bytes_sent <= No_bytes - 1; Bytes_sent++) {
			I2C_WRITE_BYTE(*(Data + Bytes_sent));
    1722:	e6 0f       	add	r30, r22
    1724:	f7 1f       	adc	r31, r23
    1726:	80 81       	ld	r24, Z
	return ret;
}

void I2C_WRITE_BYTE(uint8 data)
{
	I2C_WRITE_BUFFER=data;
    1728:	83 b9       	out	0x03, r24	; 3
	I2C_WRITE_ENABLE();
    172a:	26 bf       	out	0x36, r18	; 54
	I2C_WAIT(); //wait for data transmission
    172c:	06 b6       	in	r0, 0x36	; 54
    172e:	07 fe       	sbrs	r0, 7
    1730:	fd cf       	rjmp	.-6      	; 0x172c <I2C_Write_NBYTE_+0x36>
	}
	if (ret == E_OK) {
		uint8 Bytes_sent = 0;
		for (Bytes_sent = 0; Bytes_sent <= No_bytes - 1; Bytes_sent++) {
			I2C_WRITE_BYTE(*(Data + Bytes_sent));
			I2C_WAIT();
    1732:	06 b6       	in	r0, 0x36	; 54
    1734:	07 fe       	sbrs	r0, 7
    1736:	fd cf       	rjmp	.-6      	; 0x1732 <I2C_Write_NBYTE_+0x3c>
			switch (I2C_STATUS) {
    1738:	81 b1       	in	r24, 0x01	; 1
    173a:	88 32       	cpi	r24, 0x28	; 40
    173c:	41 f4       	brne	.+16     	; 0x174e <I2C_Write_NBYTE_+0x58>
				ret = E_NOK;
		} //salve+W/R transmitted send data
	}
	if (ret == E_OK) {
		uint8 Bytes_sent = 0;
		for (Bytes_sent = 0; Bytes_sent <= No_bytes - 1; Bytes_sent++) {
    173e:	9f 5f       	subi	r25, 0xFF	; 255
    1740:	e9 2f       	mov	r30, r25
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	e4 17       	cp	r30, r20
    1746:	f5 07       	cpc	r31, r21
    1748:	64 f3       	brlt	.-40     	; 0x1722 <I2C_Write_NBYTE_+0x2c>
    174a:	91 e0       	ldi	r25, 0x01	; 1
    174c:	01 c0       	rjmp	.+2      	; 0x1750 <I2C_Write_NBYTE_+0x5a>
    174e:	90 e0       	ldi	r25, 0x00	; 0
			}
			if (ret == E_NOK)
				break;
		}
	}
	I2C_GEN_STOP_COND();
    1750:	84 e9       	ldi	r24, 0x94	; 148
    1752:	86 bf       	out	0x36, r24	; 54
	I2C_WAIT_STOP();
    1754:	06 b6       	in	r0, 0x36	; 54
    1756:	04 fc       	sbrc	r0, 4
    1758:	fd cf       	rjmp	.-6      	; 0x1754 <I2C_Write_NBYTE_+0x5e>
	return ret;
}
    175a:	89 2f       	mov	r24, r25
    175c:	08 95       	ret

0000175e <I2C_WRITE_NBYTES>:

Bool I2C_WRITE_NBYTES(uint8 Add,uint8 REG_add,uint8 *Data,uint8 No_bytes)
{
    175e:	98 2f       	mov	r25, r24
	Bool ret = E_OK;
	I2C_GEN_START_COND();//initiate Start Condition on SCL/SDA
    1760:	84 ea       	ldi	r24, 0xA4	; 164
    1762:	86 bf       	out	0x36, r24	; 54
	I2C_WAIT();
    1764:	06 b6       	in	r0, 0x36	; 54
    1766:	07 fe       	sbrs	r0, 7
    1768:	fd cf       	rjmp	.-6      	; 0x1764 <I2C_WRITE_NBYTES+0x6>
	switch(I2C_STATUS)
    176a:	81 b1       	in	r24, 0x01	; 1
    176c:	88 33       	cpi	r24, 0x38	; 56
    176e:	61 f1       	breq	.+88     	; 0x17c8 <I2C_WRITE_NBYTES+0x6a>
	return ret;
}

void I2C_WRITE_BYTE(uint8 data)
{
	I2C_WRITE_BUFFER=data;
    1770:	93 b9       	out	0x03, r25	; 3
	I2C_WRITE_ENABLE();
    1772:	84 e8       	ldi	r24, 0x84	; 132
    1774:	86 bf       	out	0x36, r24	; 54
	I2C_WAIT(); //wait for data transmission
    1776:	06 b6       	in	r0, 0x36	; 54
    1778:	07 fe       	sbrs	r0, 7
    177a:	fd cf       	rjmp	.-6      	; 0x1776 <I2C_WRITE_NBYTES+0x18>
			ret=E_NOK;//Error
	}//start bit sent SDA switched from high to low bus is busy hence send address
	if(ret==E_OK)
	{
		I2C_WRITE_BYTE(Add|I2C_WRITE);
		switch (I2C_STATUS) {
    177c:	81 b1       	in	r24, 0x01	; 1
    177e:	88 31       	cpi	r24, 0x18	; 24
    1780:	19 f5       	brne	.+70     	; 0x17c8 <I2C_WRITE_NBYTES+0x6a>
	return ret;
}

void I2C_WRITE_BYTE(uint8 data)
{
	I2C_WRITE_BUFFER=data;
    1782:	63 b9       	out	0x03, r22	; 3
	I2C_WRITE_ENABLE();
    1784:	84 e8       	ldi	r24, 0x84	; 132
    1786:	86 bf       	out	0x36, r24	; 54
	I2C_WAIT(); //wait for data transmission
    1788:	06 b6       	in	r0, 0x36	; 54
    178a:	07 fe       	sbrs	r0, 7
    178c:	fd cf       	rjmp	.-6      	; 0x1788 <I2C_WRITE_NBYTES+0x2a>
		} //salve+W/R transmitted send data
	}
	if(ret==E_OK)
	{
		I2C_WRITE_BYTE(REG_add|I2C_WRITE);
		switch(I2C_STATUS)
    178e:	81 b1       	in	r24, 0x01	; 1
    1790:	88 32       	cpi	r24, 0x28	; 40
    1792:	d1 f4       	brne	.+52     	; 0x17c8 <I2C_WRITE_NBYTES+0x6a>
    1794:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	if(ret==E_OK)
	{
		uint8 Bytes_sent=0;
		for(Bytes_sent=0;Bytes_sent<=No_bytes-1;Bytes_sent++)
    1796:	30 e0       	ldi	r19, 0x00	; 0
}

void I2C_WRITE_BYTE(uint8 data)
{
	I2C_WRITE_BUFFER=data;
	I2C_WRITE_ENABLE();
    1798:	64 e8       	ldi	r22, 0x84	; 132
    179a:	0f c0       	rjmp	.+30     	; 0x17ba <I2C_WRITE_NBYTES+0x5c>
	if(ret==E_OK)
	{
		uint8 Bytes_sent=0;
		for(Bytes_sent=0;Bytes_sent<=No_bytes-1;Bytes_sent++)
		{
			I2C_WRITE_BYTE(*(Data+Bytes_sent));
    179c:	e4 0f       	add	r30, r20
    179e:	f5 1f       	adc	r31, r21
    17a0:	80 81       	ld	r24, Z
	return ret;
}

void I2C_WRITE_BYTE(uint8 data)
{
	I2C_WRITE_BUFFER=data;
    17a2:	83 b9       	out	0x03, r24	; 3
	I2C_WRITE_ENABLE();
    17a4:	66 bf       	out	0x36, r22	; 54
	I2C_WAIT(); //wait for data transmission
    17a6:	06 b6       	in	r0, 0x36	; 54
    17a8:	07 fe       	sbrs	r0, 7
    17aa:	fd cf       	rjmp	.-6      	; 0x17a6 <I2C_WRITE_NBYTES+0x48>
	{
		uint8 Bytes_sent=0;
		for(Bytes_sent=0;Bytes_sent<=No_bytes-1;Bytes_sent++)
		{
			I2C_WRITE_BYTE(*(Data+Bytes_sent));
			I2C_WAIT();
    17ac:	06 b6       	in	r0, 0x36	; 54
    17ae:	07 fe       	sbrs	r0, 7
    17b0:	fd cf       	rjmp	.-6      	; 0x17ac <I2C_WRITE_NBYTES+0x4e>
			switch(I2C_STATUS)
    17b2:	81 b1       	in	r24, 0x01	; 1
    17b4:	88 32       	cpi	r24, 0x28	; 40
    17b6:	41 f4       	brne	.+16     	; 0x17c8 <I2C_WRITE_NBYTES+0x6a>
		}
	}
	if(ret==E_OK)
	{
		uint8 Bytes_sent=0;
		for(Bytes_sent=0;Bytes_sent<=No_bytes-1;Bytes_sent++)
    17b8:	9f 5f       	subi	r25, 0xFF	; 255
    17ba:	e9 2f       	mov	r30, r25
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	e2 17       	cp	r30, r18
    17c0:	f3 07       	cpc	r31, r19
    17c2:	64 f3       	brlt	.-40     	; 0x179c <I2C_WRITE_NBYTES+0x3e>
    17c4:	91 e0       	ldi	r25, 0x01	; 1
    17c6:	01 c0       	rjmp	.+2      	; 0x17ca <I2C_WRITE_NBYTES+0x6c>
    17c8:	90 e0       	ldi	r25, 0x00	; 0
			}
			if(ret==E_NOK)
				break;
		}
	}
	I2C_GEN_STOP_COND();
    17ca:	84 e9       	ldi	r24, 0x94	; 148
    17cc:	86 bf       	out	0x36, r24	; 54
	I2C_WAIT_STOP();
    17ce:	06 b6       	in	r0, 0x36	; 54
    17d0:	04 fc       	sbrc	r0, 4
    17d2:	fd cf       	rjmp	.-6      	; 0x17ce <I2C_WRITE_NBYTES+0x70>
	return ret;
}
    17d4:	89 2f       	mov	r24, r25
    17d6:	08 95       	ret

000017d8 <I2C_READ_BYTE>:

Bool I2C_READ_BYTE(uint8 Add,uint8 REG_add,uint8 *Data)
{
    17d8:	98 2f       	mov	r25, r24
    17da:	fa 01       	movw	r30, r20
	Bool ret = E_OK;
	I2C_GEN_START_COND(); //initiate Start Condition on SCL/SDA
    17dc:	84 ea       	ldi	r24, 0xA4	; 164
    17de:	86 bf       	out	0x36, r24	; 54
	I2C_WAIT();
    17e0:	06 b6       	in	r0, 0x36	; 54
    17e2:	07 fe       	sbrs	r0, 7
    17e4:	fd cf       	rjmp	.-6      	; 0x17e0 <I2C_READ_BYTE+0x8>
	switch (I2C_STATUS) {
    17e6:	81 b1       	in	r24, 0x01	; 1
    17e8:	88 33       	cpi	r24, 0x38	; 56
    17ea:	99 f1       	breq	.+102    	; 0x1852 <I2C_READ_BYTE+0x7a>
	return ret;
}

void I2C_WRITE_BYTE(uint8 data)
{
	I2C_WRITE_BUFFER=data;
    17ec:	93 b9       	out	0x03, r25	; 3
	I2C_WRITE_ENABLE();
    17ee:	84 e8       	ldi	r24, 0x84	; 132
    17f0:	86 bf       	out	0x36, r24	; 54
	I2C_WAIT(); //wait for data transmission
    17f2:	06 b6       	in	r0, 0x36	; 54
    17f4:	07 fe       	sbrs	r0, 7
    17f6:	fd cf       	rjmp	.-6      	; 0x17f2 <I2C_READ_BYTE+0x1a>
	case TWSR_ARBIT_LOSS:
		ret = E_NOK; //Error
	} //start bit sent SDA switched from high to low bus is busy hence send address
	if (ret == E_OK) {
		I2C_WRITE_BYTE(Add | I2C_WRITE);
		switch (I2C_STATUS) {
    17f8:	81 b1       	in	r24, 0x01	; 1
    17fa:	88 31       	cpi	r24, 0x18	; 24
    17fc:	51 f5       	brne	.+84     	; 0x1852 <I2C_READ_BYTE+0x7a>
	return ret;
}

void I2C_WRITE_BYTE(uint8 data)
{
	I2C_WRITE_BUFFER=data;
    17fe:	63 b9       	out	0x03, r22	; 3
	I2C_WRITE_ENABLE();
    1800:	84 e8       	ldi	r24, 0x84	; 132
    1802:	86 bf       	out	0x36, r24	; 54
	I2C_WAIT(); //wait for data transmission
    1804:	06 b6       	in	r0, 0x36	; 54
    1806:	07 fe       	sbrs	r0, 7
    1808:	fd cf       	rjmp	.-6      	; 0x1804 <I2C_READ_BYTE+0x2c>
			ret = E_NOK;
		} //salve+W/R transmitted send data
	}
	if (ret == E_OK) {
		I2C_WRITE_BYTE(REG_add | I2C_WRITE);
		switch (I2C_STATUS) {
    180a:	81 b1       	in	r24, 0x01	; 1
    180c:	88 32       	cpi	r24, 0x28	; 40
    180e:	09 f5       	brne	.+66     	; 0x1852 <I2C_READ_BYTE+0x7a>
		default:
			ret = E_NOK;
		}
	}
	if (ret == E_OK) {
		I2C_GEN_START_COND(); //initiate Repeated Start Condition on SCL/SDA
    1810:	84 ea       	ldi	r24, 0xA4	; 164
    1812:	86 bf       	out	0x36, r24	; 54
		I2C_WAIT();
    1814:	06 b6       	in	r0, 0x36	; 54
    1816:	07 fe       	sbrs	r0, 7
    1818:	fd cf       	rjmp	.-6      	; 0x1814 <I2C_READ_BYTE+0x3c>
		switch (I2C_STATUS) {
    181a:	81 b1       	in	r24, 0x01	; 1
    181c:	88 30       	cpi	r24, 0x08	; 8
    181e:	11 f0       	breq	.+4      	; 0x1824 <I2C_READ_BYTE+0x4c>
    1820:	80 31       	cpi	r24, 0x10	; 16
    1822:	b9 f4       	brne	.+46     	; 0x1852 <I2C_READ_BYTE+0x7a>
			ret = E_NOK;
		}
	}
	if (ret == E_OK) //send data
	{
		I2C_WRITE_BYTE(Add | I2C_READ);
    1824:	91 60       	ori	r25, 0x01	; 1
	return ret;
}

void I2C_WRITE_BYTE(uint8 data)
{
	I2C_WRITE_BUFFER=data;
    1826:	93 b9       	out	0x03, r25	; 3
	I2C_WRITE_ENABLE();
    1828:	84 e8       	ldi	r24, 0x84	; 132
    182a:	86 bf       	out	0x36, r24	; 54
	I2C_WAIT(); //wait for data transmission
    182c:	06 b6       	in	r0, 0x36	; 54
    182e:	07 fe       	sbrs	r0, 7
    1830:	fd cf       	rjmp	.-6      	; 0x182c <I2C_READ_BYTE+0x54>
		}
	}
	if (ret == E_OK) //send data
	{
		I2C_WRITE_BYTE(Add | I2C_READ);
		switch (I2C_STATUS) {
    1832:	81 b1       	in	r24, 0x01	; 1
    1834:	80 34       	cpi	r24, 0x40	; 64
    1836:	69 f4       	brne	.+26     	; 0x1852 <I2C_READ_BYTE+0x7a>
		default:
			ret = E_NOK;
		}
	}
	if (ret == E_OK) {
		I2C_READ_NACK();
    1838:	84 e8       	ldi	r24, 0x84	; 132
    183a:	86 bf       	out	0x36, r24	; 54
		I2C_WAIT();
    183c:	06 b6       	in	r0, 0x36	; 54
    183e:	07 fe       	sbrs	r0, 7
    1840:	fd cf       	rjmp	.-6      	; 0x183c <I2C_READ_BYTE+0x64>
		*Data = I2C_WRITE_BUFFER;
    1842:	83 b1       	in	r24, 0x03	; 3
    1844:	80 83       	st	Z, r24
		if (I2C_STATUS != TW_MSR_DATA_R_NACK)
    1846:	81 b1       	in	r24, 0x01	; 1
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	88 35       	cpi	r24, 0x58	; 88
    184c:	19 f4       	brne	.+6      	; 0x1854 <I2C_READ_BYTE+0x7c>
    184e:	91 e0       	ldi	r25, 0x01	; 1
    1850:	01 c0       	rjmp	.+2      	; 0x1854 <I2C_READ_BYTE+0x7c>
    1852:	90 e0       	ldi	r25, 0x00	; 0
			ret = E_NOK;
	}
	return ret;
}
    1854:	89 2f       	mov	r24, r25
    1856:	08 95       	ret

00001858 <I2C_READ_NBYTES>:

Bool I2C_READ_NBYTES(uint8 Add,uint8 REG_add,uint8 *Data,int8 No_bytes)
{
    1858:	98 2f       	mov	r25, r24
    185a:	72 2f       	mov	r23, r18
	Bool ret = E_OK;
	I2C_GEN_START_COND(); //initiate Start Condition on SCL/SDA
    185c:	84 ea       	ldi	r24, 0xA4	; 164
    185e:	86 bf       	out	0x36, r24	; 54
	I2C_WAIT();
    1860:	06 b6       	in	r0, 0x36	; 54
    1862:	07 fe       	sbrs	r0, 7
    1864:	fd cf       	rjmp	.-6      	; 0x1860 <I2C_READ_NBYTES+0x8>
	switch (I2C_STATUS) {
    1866:	81 b1       	in	r24, 0x01	; 1
    1868:	88 33       	cpi	r24, 0x38	; 56
    186a:	09 f4       	brne	.+2      	; 0x186e <I2C_READ_NBYTES+0x16>
    186c:	46 c0       	rjmp	.+140    	; 0x18fa <I2C_READ_NBYTES+0xa2>
	return ret;
}

void I2C_WRITE_BYTE(uint8 data)
{
	I2C_WRITE_BUFFER=data;
    186e:	93 b9       	out	0x03, r25	; 3
	I2C_WRITE_ENABLE();
    1870:	84 e8       	ldi	r24, 0x84	; 132
    1872:	86 bf       	out	0x36, r24	; 54
	I2C_WAIT(); //wait for data transmission
    1874:	06 b6       	in	r0, 0x36	; 54
    1876:	07 fe       	sbrs	r0, 7
    1878:	fd cf       	rjmp	.-6      	; 0x1874 <I2C_READ_NBYTES+0x1c>
		case TWSR_ARBIT_LOSS:
			ret = E_NOK; //Error
	} //start bit sent SDA switched from high to low bus is busy hence send address
	if (ret == E_OK) {
		I2C_WRITE_BYTE(Add | I2C_WRITE);
		switch (I2C_STATUS) {
    187a:	81 b1       	in	r24, 0x01	; 1
    187c:	88 31       	cpi	r24, 0x18	; 24
    187e:	e9 f5       	brne	.+122    	; 0x18fa <I2C_READ_NBYTES+0xa2>
	return ret;
}

void I2C_WRITE_BYTE(uint8 data)
{
	I2C_WRITE_BUFFER=data;
    1880:	63 b9       	out	0x03, r22	; 3
	I2C_WRITE_ENABLE();
    1882:	84 e8       	ldi	r24, 0x84	; 132
    1884:	86 bf       	out	0x36, r24	; 54
	I2C_WAIT(); //wait for data transmission
    1886:	06 b6       	in	r0, 0x36	; 54
    1888:	07 fe       	sbrs	r0, 7
    188a:	fd cf       	rjmp	.-6      	; 0x1886 <I2C_READ_NBYTES+0x2e>
				ret = E_NOK;
		} //salve+W/R transmitted send data
	}
	if (ret == E_OK) {
		I2C_WRITE_BYTE(REG_add | I2C_WRITE);
		switch (I2C_STATUS) {
    188c:	81 b1       	in	r24, 0x01	; 1
    188e:	88 32       	cpi	r24, 0x28	; 40
    1890:	a1 f5       	brne	.+104    	; 0x18fa <I2C_READ_NBYTES+0xa2>
			default:
				ret = E_NOK;
			}
	}
	if (ret == E_OK) {
		I2C_GEN_START_COND(); //initiate Repeated Start Condition on SCL/SDA
    1892:	84 ea       	ldi	r24, 0xA4	; 164
    1894:	86 bf       	out	0x36, r24	; 54
		I2C_WAIT();
    1896:	06 b6       	in	r0, 0x36	; 54
    1898:	07 fe       	sbrs	r0, 7
    189a:	fd cf       	rjmp	.-6      	; 0x1896 <I2C_READ_NBYTES+0x3e>
		switch (I2C_STATUS) {
    189c:	81 b1       	in	r24, 0x01	; 1
    189e:	88 30       	cpi	r24, 0x08	; 8
    18a0:	11 f0       	breq	.+4      	; 0x18a6 <I2C_READ_NBYTES+0x4e>
    18a2:	80 31       	cpi	r24, 0x10	; 16
    18a4:	51 f5       	brne	.+84     	; 0x18fa <I2C_READ_NBYTES+0xa2>
				ret = E_NOK;
		}
	}
	if(ret==E_OK)//send data
	{
		I2C_WRITE_BYTE(Add | I2C_READ);
    18a6:	91 60       	ori	r25, 0x01	; 1
	return ret;
}

void I2C_WRITE_BYTE(uint8 data)
{
	I2C_WRITE_BUFFER=data;
    18a8:	93 b9       	out	0x03, r25	; 3
	I2C_WRITE_ENABLE();
    18aa:	84 e8       	ldi	r24, 0x84	; 132
    18ac:	86 bf       	out	0x36, r24	; 54
	I2C_WAIT(); //wait for data transmission
    18ae:	06 b6       	in	r0, 0x36	; 54
    18b0:	07 fe       	sbrs	r0, 7
    18b2:	fd cf       	rjmp	.-6      	; 0x18ae <I2C_READ_NBYTES+0x56>
		}
	}
	if(ret==E_OK)//send data
	{
		I2C_WRITE_BYTE(Add | I2C_READ);
		switch (I2C_STATUS)
    18b4:	81 b1       	in	r24, 0x01	; 1
    18b6:	80 34       	cpi	r24, 0x40	; 64
    18b8:	01 f5       	brne	.+64     	; 0x18fa <I2C_READ_NBYTES+0xa2>
    18ba:	fa 01       	movw	r30, r20
    18bc:	91 e0       	ldi	r25, 0x01	; 1
					if(I2C_STATUS!=TW_MSR_DATA_R_NACK)
							ret=E_NOK;
				}
				else
				{
					I2C_READ_ACK();
    18be:	34 ec       	ldi	r19, 0xC4	; 196
	if (ret == E_OK) {
		for(;No_bytes>0;No_bytes--)
		{
				if(No_bytes==1)
				{
					I2C_READ_NACK();
    18c0:	24 e8       	ldi	r18, 0x84	; 132
    18c2:	18 c0       	rjmp	.+48     	; 0x18f4 <I2C_READ_NBYTES+0x9c>
		}
	}
	if (ret == E_OK) {
		for(;No_bytes>0;No_bytes--)
		{
				if(No_bytes==1)
    18c4:	71 30       	cpi	r23, 0x01	; 1
    18c6:	59 f4       	brne	.+22     	; 0x18de <I2C_READ_NBYTES+0x86>
				{
					I2C_READ_NACK();
    18c8:	26 bf       	out	0x36, r18	; 54
					I2C_WAIT();
    18ca:	06 b6       	in	r0, 0x36	; 54
    18cc:	07 fe       	sbrs	r0, 7
    18ce:	fd cf       	rjmp	.-6      	; 0x18ca <I2C_READ_NBYTES+0x72>
					*Data++=I2C_WRITE_BUFFER;
    18d0:	83 b1       	in	r24, 0x03	; 3
    18d2:	80 83       	st	Z, r24
					if(I2C_STATUS!=TW_MSR_DATA_R_NACK)
    18d4:	81 b1       	in	r24, 0x01	; 1
    18d6:	88 35       	cpi	r24, 0x58	; 88
    18d8:	59 f0       	breq	.+22     	; 0x18f0 <I2C_READ_NBYTES+0x98>
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	09 c0       	rjmp	.+18     	; 0x18f0 <I2C_READ_NBYTES+0x98>
							ret=E_NOK;
				}
				else
				{
					I2C_READ_ACK();
    18de:	36 bf       	out	0x36, r19	; 54
					I2C_WAIT();
    18e0:	06 b6       	in	r0, 0x36	; 54
    18e2:	07 fe       	sbrs	r0, 7
    18e4:	fd cf       	rjmp	.-6      	; 0x18e0 <I2C_READ_NBYTES+0x88>
					*Data++ = I2C_WRITE_BUFFER;
    18e6:	83 b1       	in	r24, 0x03	; 3
    18e8:	80 83       	st	Z, r24
					if(I2C_STATUS!=TW_MSR_DATA_R_ACK)
    18ea:	81 b1       	in	r24, 0x01	; 1
    18ec:	80 35       	cpi	r24, 0x50	; 80
    18ee:	29 f4       	brne	.+10     	; 0x18fa <I2C_READ_NBYTES+0xa2>
			default:
				ret = E_NOK;
		}
	}
	if (ret == E_OK) {
		for(;No_bytes>0;No_bytes--)
    18f0:	71 50       	subi	r23, 0x01	; 1
    18f2:	31 96       	adiw	r30, 0x01	; 1
    18f4:	17 16       	cp	r1, r23
    18f6:	34 f3       	brlt	.-52     	; 0x18c4 <I2C_READ_NBYTES+0x6c>
    18f8:	01 c0       	rjmp	.+2      	; 0x18fc <I2C_READ_NBYTES+0xa4>
    18fa:	90 e0       	ldi	r25, 0x00	; 0
						break;
					}
				}
		}
	}
	I2C_GEN_STOP_COND();
    18fc:	84 e9       	ldi	r24, 0x94	; 148
    18fe:	86 bf       	out	0x36, r24	; 54
	I2C_WAIT_STOP();
    1900:	06 b6       	in	r0, 0x36	; 54
    1902:	04 fc       	sbrc	r0, 4
    1904:	fd cf       	rjmp	.-6      	; 0x1900 <I2C_READ_NBYTES+0xa8>
	return ret;
}
    1906:	89 2f       	mov	r24, r25
    1908:	08 95       	ret

0000190a <EXT_Int_init>:
#endif
	return ret;
}

Bool EXT_Int_init(EXT_INT_CONFIG_t *Int)
{
    190a:	fc 01       	movw	r30, r24
	Bool ret=E_OK;
	if(NULL==Int)
    190c:	00 97       	sbiw	r24, 0x00	; 0
    190e:	09 f4       	brne	.+2      	; 0x1912 <EXT_Int_init+0x8>
    1910:	88 c0       	rjmp	.+272    	; 0x1a22 <EXT_Int_init+0x118>
	static void (*INT2_Callback_Ptr)(void);
#endif

static inline void Ext_INT_Disable()
{
	GLOBAL_INT_DISABLE();
    1912:	8f b7       	in	r24, 0x3f	; 63
    1914:	80 68       	ori	r24, 0x80	; 128
    1916:	8f bf       	out	0x3f, r24	; 63
	EXT_INT0_MODULE_DISABLE();
    1918:	8b b7       	in	r24, 0x3b	; 59
    191a:	8f 7b       	andi	r24, 0xBF	; 191
    191c:	8b bf       	out	0x3b, r24	; 59
	EXT_INT1_MODULE_DISABLE();
    191e:	8b b7       	in	r24, 0x3b	; 59
    1920:	8f 77       	andi	r24, 0x7F	; 127
    1922:	8b bf       	out	0x3b, r24	; 59
	EXT_INT2_MODULE_DISABLE();
    1924:	8b b7       	in	r24, 0x3b	; 59
    1926:	8f 7d       	andi	r24, 0xDF	; 223
    1928:	8b bf       	out	0x3b, r24	; 59
	if(NULL==Int)
		ret=E_NOK;
	else
	{
		Ext_INT_Disable();
		switch(Int->Pin)
    192a:	80 81       	ld	r24, Z
    192c:	81 30       	cpi	r24, 0x01	; 1
    192e:	89 f1       	breq	.+98     	; 0x1992 <EXT_Int_init+0x88>
    1930:	81 30       	cpi	r24, 0x01	; 1
    1932:	20 f0       	brcs	.+8      	; 0x193c <EXT_Int_init+0x32>
    1934:	82 30       	cpi	r24, 0x02	; 2
    1936:	09 f0       	breq	.+2      	; 0x193a <EXT_Int_init+0x30>
    1938:	74 c0       	rjmp	.+232    	; 0x1a22 <EXT_Int_init+0x118>
    193a:	56 c0       	rjmp	.+172    	; 0x19e8 <EXT_Int_init+0xde>
		{
			case EXT_INT0:
				GLOBAL_INT_ENABLE();
    193c:	8f b7       	in	r24, 0x3f	; 63
    193e:	80 68       	ori	r24, 0x80	; 128
    1940:	8f bf       	out	0x3f, r24	; 63

static Bool Ext_INT0_init(EXT_INT_CONFIG_t *Int)
{
	Bool ret=E_OK;
#if EXT_INT0_FEATURE_ENABLE==FEATURE_ENABLE
	switch(Int->Sense_Control)
    1942:	81 81       	ldd	r24, Z+1	; 0x01
    1944:	81 30       	cpi	r24, 0x01	; 1
    1946:	51 f0       	breq	.+20     	; 0x195c <EXT_Int_init+0x52>
    1948:	81 30       	cpi	r24, 0x01	; 1
    194a:	28 f0       	brcs	.+10     	; 0x1956 <EXT_Int_init+0x4c>
    194c:	82 30       	cpi	r24, 0x02	; 2
    194e:	79 f0       	breq	.+30     	; 0x196e <EXT_Int_init+0x64>
    1950:	83 30       	cpi	r24, 0x03	; 3
    1952:	99 f4       	brne	.+38     	; 0x197a <EXT_Int_init+0x70>
    1954:	09 c0       	rjmp	.+18     	; 0x1968 <EXT_Int_init+0x5e>
	{
		case EXT_INT_LOW_LEVEL:
					CLEAR_BIT(MCUCR,ISC00);
    1956:	85 b7       	in	r24, 0x35	; 53
    1958:	8e 7f       	andi	r24, 0xFE	; 254
    195a:	02 c0       	rjmp	.+4      	; 0x1960 <EXT_Int_init+0x56>
					CLEAR_BIT(MCUCR,ISC01);
					break;
		case EXT_INT_LEVEL_CHANGE:
				   SET_BIT(MCUCR,ISC00);
    195c:	85 b7       	in	r24, 0x35	; 53
    195e:	81 60       	ori	r24, 0x01	; 1
    1960:	85 bf       	out	0x35, r24	; 53
				   CLEAR_BIT(MCUCR,ISC01);
    1962:	85 b7       	in	r24, 0x35	; 53
    1964:	8d 7f       	andi	r24, 0xFD	; 253
    1966:	08 c0       	rjmp	.+16     	; 0x1978 <EXT_Int_init+0x6e>
				   break;
		case EXT_INT_FALLING_EDGE:
		     	   CLEAR_BIT(MCUCR,ISC00);
    1968:	85 b7       	in	r24, 0x35	; 53
    196a:	8e 7f       	andi	r24, 0xFE	; 254
    196c:	02 c0       	rjmp	.+4      	; 0x1972 <EXT_Int_init+0x68>
				   SET_BIT(MCUCR,ISC01);
				   break;
		case EXT_INT_RISING_EDGE:
				   SET_BIT(MCUCR,ISC00);
    196e:	85 b7       	in	r24, 0x35	; 53
    1970:	81 60       	ori	r24, 0x01	; 1
    1972:	85 bf       	out	0x35, r24	; 53
				   SET_BIT(MCUCR,ISC01);
    1974:	85 b7       	in	r24, 0x35	; 53
    1976:	82 60       	ori	r24, 0x02	; 2
    1978:	85 bf       	out	0x35, r24	; 53
				   break;
		default:
			ret=E_NOK;
	}
	INT0_Callback_Ptr=Int->INT0_Callback;
    197a:	82 81       	ldd	r24, Z+2	; 0x02
    197c:	93 81       	ldd	r25, Z+3	; 0x03
    197e:	90 93 a5 01 	sts	0x01A5, r25
    1982:	80 93 a4 01 	sts	0x01A4, r24
		switch(Int->Pin)
		{
			case EXT_INT0:
				GLOBAL_INT_ENABLE();
				Ext_INT0_init(Int);
				EXT_INT0_FLAG_CLEAR();
    1986:	8a b7       	in	r24, 0x3a	; 58
    1988:	80 64       	ori	r24, 0x40	; 64
    198a:	8a bf       	out	0x3a, r24	; 58
				EXT_INT0_MODULE_ENABLE();
    198c:	8b b7       	in	r24, 0x3b	; 59
    198e:	80 64       	ori	r24, 0x40	; 64
    1990:	45 c0       	rjmp	.+138    	; 0x1a1c <EXT_Int_init+0x112>
				break;
			case EXT_INT1:
				GLOBAL_INT_ENABLE();
    1992:	8f b7       	in	r24, 0x3f	; 63
    1994:	80 68       	ori	r24, 0x80	; 128
    1996:	8f bf       	out	0x3f, r24	; 63

static Bool Ext_INT1_init(EXT_INT_CONFIG_t *Int)
{
	Bool ret = E_OK;
#if EXT_INT1_FEATURE_ENABLE==FEATURE_ENABLE
	switch (Int->Sense_Control) {
    1998:	81 81       	ldd	r24, Z+1	; 0x01
    199a:	81 30       	cpi	r24, 0x01	; 1
    199c:	51 f0       	breq	.+20     	; 0x19b2 <EXT_Int_init+0xa8>
    199e:	81 30       	cpi	r24, 0x01	; 1
    19a0:	28 f0       	brcs	.+10     	; 0x19ac <EXT_Int_init+0xa2>
    19a2:	82 30       	cpi	r24, 0x02	; 2
    19a4:	79 f0       	breq	.+30     	; 0x19c4 <EXT_Int_init+0xba>
    19a6:	83 30       	cpi	r24, 0x03	; 3
    19a8:	99 f4       	brne	.+38     	; 0x19d0 <EXT_Int_init+0xc6>
    19aa:	09 c0       	rjmp	.+18     	; 0x19be <EXT_Int_init+0xb4>
	case EXT_INT_LOW_LEVEL:
			CLEAR_BIT(MCUCR, ISC10);
    19ac:	85 b7       	in	r24, 0x35	; 53
    19ae:	8b 7f       	andi	r24, 0xFB	; 251
    19b0:	02 c0       	rjmp	.+4      	; 0x19b6 <EXT_Int_init+0xac>
			CLEAR_BIT(MCUCR, ISC11);
			break;
	case EXT_INT_LEVEL_CHANGE:
			SET_BIT(MCUCR, ISC10);
    19b2:	85 b7       	in	r24, 0x35	; 53
    19b4:	84 60       	ori	r24, 0x04	; 4
    19b6:	85 bf       	out	0x35, r24	; 53
			CLEAR_BIT(MCUCR, ISC11);
    19b8:	85 b7       	in	r24, 0x35	; 53
    19ba:	87 7f       	andi	r24, 0xF7	; 247
    19bc:	08 c0       	rjmp	.+16     	; 0x19ce <EXT_Int_init+0xc4>
			break;
	case EXT_INT_FALLING_EDGE:
			CLEAR_BIT(MCUCR, ISC10);
    19be:	85 b7       	in	r24, 0x35	; 53
    19c0:	8b 7f       	andi	r24, 0xFB	; 251
    19c2:	02 c0       	rjmp	.+4      	; 0x19c8 <EXT_Int_init+0xbe>
			SET_BIT(MCUCR, ISC11);
		    break;
	case EXT_INT_RISING_EDGE:
			SET_BIT(MCUCR, ISC10);
    19c4:	85 b7       	in	r24, 0x35	; 53
    19c6:	84 60       	ori	r24, 0x04	; 4
    19c8:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR, ISC11);
    19ca:	85 b7       	in	r24, 0x35	; 53
    19cc:	88 60       	ori	r24, 0x08	; 8
    19ce:	85 bf       	out	0x35, r24	; 53
			break;
	default:
		ret = E_NOK;
	}
	INT1_Callback_Ptr=Int->INT1_Callback;
    19d0:	84 81       	ldd	r24, Z+4	; 0x04
    19d2:	95 81       	ldd	r25, Z+5	; 0x05
    19d4:	90 93 a7 01 	sts	0x01A7, r25
    19d8:	80 93 a6 01 	sts	0x01A6, r24
				EXT_INT0_MODULE_ENABLE();
				break;
			case EXT_INT1:
				GLOBAL_INT_ENABLE();
				Ext_INT1_init(Int);
				EXT_INT1_FLAG_CLEAR();
    19dc:	8a b7       	in	r24, 0x3a	; 58
    19de:	80 68       	ori	r24, 0x80	; 128
    19e0:	8a bf       	out	0x3a, r24	; 58
				EXT_INT1_MODULE_ENABLE();
    19e2:	8b b7       	in	r24, 0x3b	; 59
    19e4:	80 68       	ori	r24, 0x80	; 128
    19e6:	1a c0       	rjmp	.+52     	; 0x1a1c <EXT_Int_init+0x112>
				break;
			case  EXT_INT2:
				GLOBAL_INT_ENABLE();
    19e8:	8f b7       	in	r24, 0x3f	; 63
    19ea:	80 68       	ori	r24, 0x80	; 128
    19ec:	8f bf       	out	0x3f, r24	; 63

static Bool Ext_INT2_init(EXT_INT_CONFIG_t *Int)
{
	Bool ret=E_OK;
#if EXT_INT2_FEATURE_ENABLE==FEATURE_ENABLE
	switch(Int->Sense_Control)
    19ee:	81 81       	ldd	r24, Z+1	; 0x01
    19f0:	84 30       	cpi	r24, 0x04	; 4
    19f2:	19 f0       	breq	.+6      	; 0x19fa <EXT_Int_init+0xf0>
    19f4:	85 30       	cpi	r24, 0x05	; 5
    19f6:	39 f4       	brne	.+14     	; 0x1a06 <EXT_Int_init+0xfc>
    19f8:	03 c0       	rjmp	.+6      	; 0x1a00 <EXT_Int_init+0xf6>
	{
		case EXT_INT2_FALLING_EDGE:
			EXT_INT2_FEDG();
    19fa:	84 b7       	in	r24, 0x34	; 52
    19fc:	80 64       	ori	r24, 0x40	; 64
    19fe:	02 c0       	rjmp	.+4      	; 0x1a04 <EXT_Int_init+0xfa>
			break;
		case EXT_INT2_RISING_EDGE:
			EXT_INT2_RSEDG();
    1a00:	84 b7       	in	r24, 0x34	; 52
    1a02:	8f 7b       	andi	r24, 0xBF	; 191
    1a04:	84 bf       	out	0x34, r24	; 52
			break;
		default:
			ret=E_NOK;
	}
	INT2_Callback_Ptr=Int->INT2_Callback;
    1a06:	86 81       	ldd	r24, Z+6	; 0x06
    1a08:	97 81       	ldd	r25, Z+7	; 0x07
    1a0a:	90 93 a9 01 	sts	0x01A9, r25
    1a0e:	80 93 a8 01 	sts	0x01A8, r24
				EXT_INT1_MODULE_ENABLE();
				break;
			case  EXT_INT2:
				GLOBAL_INT_ENABLE();
				Ext_INT2_init(Int);
				EXT_INT2_FLAG_CLEAR();
    1a12:	8a b7       	in	r24, 0x3a	; 58
    1a14:	80 62       	ori	r24, 0x20	; 32
    1a16:	8a bf       	out	0x3a, r24	; 58
				EXT_INT2_MODULE_ENABLE();
    1a18:	8b b7       	in	r24, 0x3b	; 59
    1a1a:	80 62       	ori	r24, 0x20	; 32
    1a1c:	8b bf       	out	0x3b, r24	; 59
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	08 95       	ret
				break;
    1a22:	80 e0       	ldi	r24, 0x00	; 0
			default:
				ret=E_NOK;
		}
	}
	return ret;
}
    1a24:	08 95       	ret

00001a26 <INT0_ISR_>:

void INT0_ISR_()
{
	EXT_INT0_FLAG_CLEAR();
    1a26:	8a b7       	in	r24, 0x3a	; 58
    1a28:	80 64       	ori	r24, 0x40	; 64
    1a2a:	8a bf       	out	0x3a, r24	; 58
	if(INT0_Callback_Ptr)
    1a2c:	e0 91 a4 01 	lds	r30, 0x01A4
    1a30:	f0 91 a5 01 	lds	r31, 0x01A5
    1a34:	30 97       	sbiw	r30, 0x00	; 0
    1a36:	09 f0       	breq	.+2      	; 0x1a3a <INT0_ISR_+0x14>
		INT0_Callback_Ptr();
    1a38:	09 95       	icall
    1a3a:	08 95       	ret

00001a3c <INT1_ISR_>:
}

void INT1_ISR_()
{
	EXT_INT1_FLAG_CLEAR();
    1a3c:	8a b7       	in	r24, 0x3a	; 58
    1a3e:	80 68       	ori	r24, 0x80	; 128
    1a40:	8a bf       	out	0x3a, r24	; 58
	if(INT1_Callback_Ptr)
    1a42:	e0 91 a6 01 	lds	r30, 0x01A6
    1a46:	f0 91 a7 01 	lds	r31, 0x01A7
    1a4a:	30 97       	sbiw	r30, 0x00	; 0
    1a4c:	09 f0       	breq	.+2      	; 0x1a50 <INT1_ISR_+0x14>
		INT1_Callback_Ptr();
    1a4e:	09 95       	icall
    1a50:	08 95       	ret

00001a52 <INT2_ISR_>:
}

void INT2_ISR_()
{
	EXT_INT2_FLAG_CLEAR();
    1a52:	8a b7       	in	r24, 0x3a	; 58
    1a54:	80 62       	ori	r24, 0x20	; 32
    1a56:	8a bf       	out	0x3a, r24	; 58
	if(INT2_Callback_Ptr)
    1a58:	e0 91 a8 01 	lds	r30, 0x01A8
    1a5c:	f0 91 a9 01 	lds	r31, 0x01A9
    1a60:	30 97       	sbiw	r30, 0x00	; 0
    1a62:	09 f0       	breq	.+2      	; 0x1a66 <INT2_ISR_+0x14>
		INT2_Callback_Ptr();
    1a64:	09 95       	icall
    1a66:	08 95       	ret

00001a68 <__vector_1>:
}

ISR(INT0_vect)
{
    1a68:	1f 92       	push	r1
    1a6a:	0f 92       	push	r0
    1a6c:	0f b6       	in	r0, 0x3f	; 63
    1a6e:	0f 92       	push	r0
    1a70:	11 24       	eor	r1, r1
    1a72:	2f 93       	push	r18
    1a74:	3f 93       	push	r19
    1a76:	4f 93       	push	r20
    1a78:	5f 93       	push	r21
    1a7a:	6f 93       	push	r22
    1a7c:	7f 93       	push	r23
    1a7e:	8f 93       	push	r24
    1a80:	9f 93       	push	r25
    1a82:	af 93       	push	r26
    1a84:	bf 93       	push	r27
    1a86:	ef 93       	push	r30
    1a88:	ff 93       	push	r31
	INT0_ISR_();
    1a8a:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <INT0_ISR_>
}
    1a8e:	ff 91       	pop	r31
    1a90:	ef 91       	pop	r30
    1a92:	bf 91       	pop	r27
    1a94:	af 91       	pop	r26
    1a96:	9f 91       	pop	r25
    1a98:	8f 91       	pop	r24
    1a9a:	7f 91       	pop	r23
    1a9c:	6f 91       	pop	r22
    1a9e:	5f 91       	pop	r21
    1aa0:	4f 91       	pop	r20
    1aa2:	3f 91       	pop	r19
    1aa4:	2f 91       	pop	r18
    1aa6:	0f 90       	pop	r0
    1aa8:	0f be       	out	0x3f, r0	; 63
    1aaa:	0f 90       	pop	r0
    1aac:	1f 90       	pop	r1
    1aae:	18 95       	reti

00001ab0 <__vector_2>:

ISR(INT1_vect)
{
    1ab0:	1f 92       	push	r1
    1ab2:	0f 92       	push	r0
    1ab4:	0f b6       	in	r0, 0x3f	; 63
    1ab6:	0f 92       	push	r0
    1ab8:	11 24       	eor	r1, r1
    1aba:	2f 93       	push	r18
    1abc:	3f 93       	push	r19
    1abe:	4f 93       	push	r20
    1ac0:	5f 93       	push	r21
    1ac2:	6f 93       	push	r22
    1ac4:	7f 93       	push	r23
    1ac6:	8f 93       	push	r24
    1ac8:	9f 93       	push	r25
    1aca:	af 93       	push	r26
    1acc:	bf 93       	push	r27
    1ace:	ef 93       	push	r30
    1ad0:	ff 93       	push	r31
	INT1_ISR_();
    1ad2:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <INT1_ISR_>
}
    1ad6:	ff 91       	pop	r31
    1ad8:	ef 91       	pop	r30
    1ada:	bf 91       	pop	r27
    1adc:	af 91       	pop	r26
    1ade:	9f 91       	pop	r25
    1ae0:	8f 91       	pop	r24
    1ae2:	7f 91       	pop	r23
    1ae4:	6f 91       	pop	r22
    1ae6:	5f 91       	pop	r21
    1ae8:	4f 91       	pop	r20
    1aea:	3f 91       	pop	r19
    1aec:	2f 91       	pop	r18
    1aee:	0f 90       	pop	r0
    1af0:	0f be       	out	0x3f, r0	; 63
    1af2:	0f 90       	pop	r0
    1af4:	1f 90       	pop	r1
    1af6:	18 95       	reti

00001af8 <__vector_3>:

ISR(INT2_vect)
{
    1af8:	1f 92       	push	r1
    1afa:	0f 92       	push	r0
    1afc:	0f b6       	in	r0, 0x3f	; 63
    1afe:	0f 92       	push	r0
    1b00:	11 24       	eor	r1, r1
    1b02:	2f 93       	push	r18
    1b04:	3f 93       	push	r19
    1b06:	4f 93       	push	r20
    1b08:	5f 93       	push	r21
    1b0a:	6f 93       	push	r22
    1b0c:	7f 93       	push	r23
    1b0e:	8f 93       	push	r24
    1b10:	9f 93       	push	r25
    1b12:	af 93       	push	r26
    1b14:	bf 93       	push	r27
    1b16:	ef 93       	push	r30
    1b18:	ff 93       	push	r31
	INT2_ISR_();
    1b1a:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <INT2_ISR_>
}
    1b1e:	ff 91       	pop	r31
    1b20:	ef 91       	pop	r30
    1b22:	bf 91       	pop	r27
    1b24:	af 91       	pop	r26
    1b26:	9f 91       	pop	r25
    1b28:	8f 91       	pop	r24
    1b2a:	7f 91       	pop	r23
    1b2c:	6f 91       	pop	r22
    1b2e:	5f 91       	pop	r21
    1b30:	4f 91       	pop	r20
    1b32:	3f 91       	pop	r19
    1b34:	2f 91       	pop	r18
    1b36:	0f 90       	pop	r0
    1b38:	0f be       	out	0x3f, r0	; 63
    1b3a:	0f 90       	pop	r0
    1b3c:	1f 90       	pop	r1
    1b3e:	18 95       	reti

00001b40 <Num_length>:
{
	OLED_send_cmd(OLED_DEACTIVATE_SCROLL);
}

static uint8 Num_length(int32 Num)
{
    1b40:	1f 93       	push	r17
    1b42:	10 e0       	ldi	r17, 0x00	; 0
    1b44:	0b c0       	rjmp	.+22     	; 0x1b5c <Num_length+0x1c>
	uint8 Length=0;
	while(Num>0)
	{
		Length++;
    1b46:	1f 5f       	subi	r17, 0xFF	; 255
		Num/=10;
    1b48:	2a e0       	ldi	r18, 0x0A	; 10
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	40 e0       	ldi	r20, 0x00	; 0
    1b4e:	50 e0       	ldi	r21, 0x00	; 0
    1b50:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <__divmodsi4>
    1b54:	c9 01       	movw	r24, r18
    1b56:	da 01       	movw	r26, r20
    1b58:	bc 01       	movw	r22, r24
    1b5a:	cd 01       	movw	r24, r26
}

static uint8 Num_length(int32 Num)
{
	uint8 Length=0;
	while(Num>0)
    1b5c:	16 16       	cp	r1, r22
    1b5e:	17 06       	cpc	r1, r23
    1b60:	18 06       	cpc	r1, r24
    1b62:	19 06       	cpc	r1, r25
    1b64:	84 f3       	brlt	.-32     	; 0x1b46 <Num_length+0x6>
	{
		Length++;
		Num/=10;
	}
	return Length;
}
    1b66:	81 2f       	mov	r24, r17
    1b68:	1f 91       	pop	r17
    1b6a:	08 95       	ret

00001b6c <OLED_send_cmd>:
 };

uint8_t Image[1024];

static Bool OLED_send_cmd(uint8 Cmd)
{
    1b6c:	1f 93       	push	r17
    1b6e:	18 2f       	mov	r17, r24
	Bool E_Stat=E_OK;
	I2C_GEN_START_COND();
    1b70:	84 ea       	ldi	r24, 0xA4	; 164
    1b72:	86 bf       	out	0x36, r24	; 54
	I2C_WAIT();
    1b74:	06 b6       	in	r0, 0x36	; 54
    1b76:	07 fe       	sbrs	r0, 7
    1b78:	fd cf       	rjmp	.-6      	; 0x1b74 <OLED_send_cmd+0x8>
	I2C_WRITE_BYTE(OLEDSSD_DISPLAY_ADD);
    1b7a:	8a e7       	ldi	r24, 0x7A	; 122
    1b7c:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <I2C_WRITE_BYTE>
	I2C_WRITE_BYTE(OLEDSSD_COMMAND);
    1b80:	80 e0       	ldi	r24, 0x00	; 0
    1b82:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <I2C_WRITE_BYTE>
	I2C_WRITE_BYTE(Cmd);
    1b86:	81 2f       	mov	r24, r17
    1b88:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <I2C_WRITE_BYTE>
	I2C_GEN_STOP_COND();
    1b8c:	84 e9       	ldi	r24, 0x94	; 148
    1b8e:	86 bf       	out	0x36, r24	; 54
	I2C_WAIT_STOP();
    1b90:	06 b6       	in	r0, 0x36	; 54
    1b92:	04 fc       	sbrc	r0, 4
    1b94:	fd cf       	rjmp	.-6      	; 0x1b90 <OLED_send_cmd+0x24>
	return E_Stat;
}
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	1f 91       	pop	r17
    1b9a:	08 95       	ret

00001b9c <OLED_DEACTIVATE_scroll>:
	OLED_send_cmd(OLED_ACTIVATE_SCROLL);
}

void OLED_DEACTIVATE_scroll()
{
	OLED_send_cmd(OLED_DEACTIVATE_SCROLL);
    1b9c:	8e e2       	ldi	r24, 0x2E	; 46
    1b9e:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
}
    1ba2:	08 95       	ret

00001ba4 <OLDE_ScrollLeft>:
	OLED_send_cmd(0XFF);
	OLED_send_cmd(OLED_ACTIVATE_SCROLL);
}

void OLDE_ScrollLeft(uint8_t Pag_start, uint8_t Pag_End)
{
    1ba4:	0f 93       	push	r16
    1ba6:	1f 93       	push	r17
    1ba8:	18 2f       	mov	r17, r24
    1baa:	06 2f       	mov	r16, r22
	OLED_send_cmd(OLED_HORIZONTAL_SCROLL_LEFT);
    1bac:	87 e2       	ldi	r24, 0x27	; 39
    1bae:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
	OLED_send_cmd(0X00);
    1bb2:	80 e0       	ldi	r24, 0x00	; 0
    1bb4:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
	OLED_send_cmd(Pag_start);
    1bb8:	81 2f       	mov	r24, r17
    1bba:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
	OLED_send_cmd(0X00);
    1bbe:	80 e0       	ldi	r24, 0x00	; 0
    1bc0:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
	OLED_send_cmd(Pag_End);
    1bc4:	80 2f       	mov	r24, r16
    1bc6:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
	OLED_send_cmd(0X00);
    1bca:	80 e0       	ldi	r24, 0x00	; 0
    1bcc:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
	OLED_send_cmd(0XFF);
    1bd0:	8f ef       	ldi	r24, 0xFF	; 255
    1bd2:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
	OLED_send_cmd(OLED_ACTIVATE_SCROLL);
    1bd6:	8f e2       	ldi	r24, 0x2F	; 47
    1bd8:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
}
    1bdc:	1f 91       	pop	r17
    1bde:	0f 91       	pop	r16
    1be0:	08 95       	ret

00001be2 <OLDE_ScrollRight>:
		E_stat=E_NOK;
	return E_stat;
}

void OLDE_ScrollRight(uint8_t Pag_start, uint8_t Pag_End)
{
    1be2:	0f 93       	push	r16
    1be4:	1f 93       	push	r17
    1be6:	18 2f       	mov	r17, r24
    1be8:	06 2f       	mov	r16, r22
	OLED_send_cmd(OLED_HORIZONTAL_SCROLL_RIGHT);
    1bea:	86 e2       	ldi	r24, 0x26	; 38
    1bec:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
	OLED_send_cmd(0X00);
    1bf0:	80 e0       	ldi	r24, 0x00	; 0
    1bf2:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
	OLED_send_cmd(Pag_start);
    1bf6:	81 2f       	mov	r24, r17
    1bf8:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
	OLED_send_cmd(0X00);
    1bfc:	80 e0       	ldi	r24, 0x00	; 0
    1bfe:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
	OLED_send_cmd(Pag_End);
    1c02:	80 2f       	mov	r24, r16
    1c04:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
	OLED_send_cmd(0X00);
    1c08:	80 e0       	ldi	r24, 0x00	; 0
    1c0a:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
	OLED_send_cmd(0XFF);
    1c0e:	8f ef       	ldi	r24, 0xFF	; 255
    1c10:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
	OLED_send_cmd(OLED_ACTIVATE_SCROLL);
    1c14:	8f e2       	ldi	r24, 0x2F	; 47
    1c16:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
}
    1c1a:	1f 91       	pop	r17
    1c1c:	0f 91       	pop	r16
    1c1e:	08 95       	ret

00001c20 <OLED_SET_CURSOR>:
	OLED_send_cmd(0);
	OLED_send_cmd(7);
}

Bool OLED_SET_CURSOR(uint8 X,uint8 Y)
{
    1c20:	0f 93       	push	r16
    1c22:	1f 93       	push	r17
    1c24:	18 2f       	mov	r17, r24
    1c26:	06 2f       	mov	r16, r22
	Bool E_stat=E_OK;
	if(X>OLED_COL_SIZE||Y>OLED_PAGE_SIZE)
    1c28:	81 38       	cpi	r24, 0x81	; 129
    1c2a:	d0 f4       	brcc	.+52     	; 0x1c60 <OLED_SET_CURSOR+0x40>
    1c2c:	68 30       	cpi	r22, 0x08	; 8
    1c2e:	c0 f4       	brcc	.+48     	; 0x1c60 <OLED_SET_CURSOR+0x40>
		E_stat=E_NOK;
	else
	{
		X_Cursor=X;
    1c30:	80 93 aa 01 	sts	0x01AA, r24
		Y_Cursor=Y;
    1c34:	60 93 ab 05 	sts	0x05AB, r22
		OLED_send_cmd(OLED_SET_COLUMN_ADDR);
    1c38:	81 e2       	ldi	r24, 0x21	; 33
    1c3a:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
		OLED_send_cmd(X);
    1c3e:	81 2f       	mov	r24, r17
    1c40:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
		OLED_send_cmd(127);
    1c44:	8f e7       	ldi	r24, 0x7F	; 127
    1c46:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
		OLED_send_cmd(OLED_SET_PAGE_ADDR);
    1c4a:	82 e2       	ldi	r24, 0x22	; 34
    1c4c:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
		OLED_send_cmd(Y);
    1c50:	80 2f       	mov	r24, r16
    1c52:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
		OLED_send_cmd(7);
    1c56:	87 e0       	ldi	r24, 0x07	; 7
    1c58:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	01 c0       	rjmp	.+2      	; 0x1c62 <OLED_SET_CURSOR+0x42>
    1c60:	80 e0       	ldi	r24, 0x00	; 0
		E_stat=E_OK;
	}
	return E_stat;
}
    1c62:	1f 91       	pop	r17
    1c64:	0f 91       	pop	r16
    1c66:	08 95       	ret

00001c68 <OLED_SET_PIXEL>:
	}
	return E_stat;
}

Bool OLED_SET_PIXEL(uint8 Page,uint8 Col)
{
    1c68:	0f 93       	push	r16
    1c6a:	1f 93       	push	r17
    1c6c:	18 2f       	mov	r17, r24
    1c6e:	06 2f       	mov	r16, r22
	Bool E_stat=E_OK;
	if(Page>63||Col>OLED_COL_SIZE-1)
    1c70:	80 34       	cpi	r24, 0x40	; 64
    1c72:	08 f5       	brcc	.+66     	; 0x1cb6 <OLED_SET_PIXEL+0x4e>
    1c74:	67 fd       	sbrc	r22, 7
    1c76:	1f c0       	rjmp	.+62     	; 0x1cb6 <OLED_SET_PIXEL+0x4e>
				E_stat=E_NOK;
	else
	{
		uint8 Pixel=Page/8;
		uint8 Pixel_pos=Page%8;
		OLED_SET_CURSOR(Col,Page);
    1c78:	86 2f       	mov	r24, r22
    1c7a:	61 2f       	mov	r22, r17
    1c7c:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <OLED_SET_CURSOR>
		Image[OLED_COL_SIZE*Pixel+Col]|=(1<<Pixel_pos);
    1c80:	e1 2f       	mov	r30, r17
    1c82:	e6 95       	lsr	r30
    1c84:	e6 95       	lsr	r30
    1c86:	e6 95       	lsr	r30
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	f6 95       	lsr	r31
    1c8c:	fe 2f       	mov	r31, r30
    1c8e:	ee 27       	eor	r30, r30
    1c90:	f7 95       	ror	r31
    1c92:	e7 95       	ror	r30
    1c94:	e0 0f       	add	r30, r16
    1c96:	f1 1d       	adc	r31, r1
    1c98:	e5 55       	subi	r30, 0x55	; 85
    1c9a:	fe 4f       	sbci	r31, 0xFE	; 254
    1c9c:	17 70       	andi	r17, 0x07	; 7
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	02 c0       	rjmp	.+4      	; 0x1ca8 <OLED_SET_PIXEL+0x40>
    1ca4:	88 0f       	add	r24, r24
    1ca6:	99 1f       	adc	r25, r25
    1ca8:	1a 95       	dec	r17
    1caa:	e2 f7       	brpl	.-8      	; 0x1ca4 <OLED_SET_PIXEL+0x3c>
    1cac:	20 81       	ld	r18, Z
    1cae:	28 2b       	or	r18, r24
    1cb0:	20 83       	st	Z, r18
    1cb2:	81 e0       	ldi	r24, 0x01	; 1
    1cb4:	01 c0       	rjmp	.+2      	; 0x1cb8 <OLED_SET_PIXEL+0x50>
    1cb6:	80 e0       	ldi	r24, 0x00	; 0
	}
	return E_stat;
}
    1cb8:	1f 91       	pop	r17
    1cba:	0f 91       	pop	r16
    1cbc:	08 95       	ret

00001cbe <OLED_Draw_Line>:
	}
	return E_stat;
}

void OLED_Draw_Line(uint8 x_0,uint8 y_0,uint8 x_1,uint8 y_1)
{
    1cbe:	9f 92       	push	r9
    1cc0:	af 92       	push	r10
    1cc2:	bf 92       	push	r11
    1cc4:	cf 92       	push	r12
    1cc6:	df 92       	push	r13
    1cc8:	ef 92       	push	r14
    1cca:	ff 92       	push	r15
    1ccc:	0f 93       	push	r16
    1cce:	1f 93       	push	r17
    1cd0:	cf 93       	push	r28
    1cd2:	df 93       	push	r29
    1cd4:	18 2f       	mov	r17, r24
    1cd6:	06 2f       	mov	r16, r22
    1cd8:	f4 2e       	mov	r15, r20
	uint8 steep;
	int8_t ystep;
	uint8_t delta_x, delta_y;
	int16_t err;
	steep = abs(y_1 - y_0) > abs(x_1 - x_0);
    1cda:	99 24       	eor	r9, r9
    1cdc:	42 2f       	mov	r20, r18
    1cde:	50 e0       	ldi	r21, 0x00	; 0
    1ce0:	46 1b       	sub	r20, r22
    1ce2:	51 09       	sbc	r21, r1
    1ce4:	57 ff       	sbrs	r21, 7
    1ce6:	03 c0       	rjmp	.+6      	; 0x1cee <OLED_Draw_Line+0x30>
    1ce8:	50 95       	com	r21
    1cea:	41 95       	neg	r20
    1cec:	5f 4f       	sbci	r21, 0xFF	; 255
    1cee:	8f 2d       	mov	r24, r15
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	81 1b       	sub	r24, r17
    1cf4:	91 09       	sbc	r25, r1
    1cf6:	97 ff       	sbrs	r25, 7
    1cf8:	03 c0       	rjmp	.+6      	; 0x1d00 <OLED_Draw_Line+0x42>
    1cfa:	90 95       	com	r25
    1cfc:	81 95       	neg	r24
    1cfe:	9f 4f       	sbci	r25, 0xFF	; 255
    1d00:	84 17       	cp	r24, r20
    1d02:	95 07       	cpc	r25, r21
    1d04:	44 f4       	brge	.+16     	; 0x1d16 <OLED_Draw_Line+0x58>
    1d06:	99 24       	eor	r9, r9
    1d08:	93 94       	inc	r9
	if (steep) {
    1d0a:	80 2f       	mov	r24, r16
    1d0c:	01 2f       	mov	r16, r17
    1d0e:	18 2f       	mov	r17, r24
    1d10:	82 2f       	mov	r24, r18
    1d12:	2f 2d       	mov	r18, r15
    1d14:	f8 2e       	mov	r15, r24
		OLED_SWAP(x_0, y_0);
		OLED_SWAP(x_1, y_1);
	}
	if (x_0 > x_1) {
    1d16:	f1 16       	cp	r15, r17
    1d18:	30 f4       	brcc	.+12     	; 0x1d26 <OLED_Draw_Line+0x68>
    1d1a:	8f 2d       	mov	r24, r15
    1d1c:	f1 2e       	mov	r15, r17
    1d1e:	18 2f       	mov	r17, r24
    1d20:	82 2f       	mov	r24, r18
    1d22:	20 2f       	mov	r18, r16
    1d24:	08 2f       	mov	r16, r24
		OLED_SWAP(x_0, x_1);
		OLED_SWAP(y_0, y_1);
	}
	delta_x = x_1 - x_0;
    1d26:	3f 2d       	mov	r19, r15
    1d28:	31 1b       	sub	r19, r17
	delta_y = abs(y_1 - y_0);
    1d2a:	82 2f       	mov	r24, r18
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	80 1b       	sub	r24, r16
    1d30:	91 09       	sbc	r25, r1
    1d32:	97 ff       	sbrs	r25, 7
    1d34:	03 c0       	rjmp	.+6      	; 0x1d3c <OLED_Draw_Line+0x7e>
    1d36:	90 95       	com	r25
    1d38:	81 95       	neg	r24
    1d3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d3c:	98 2f       	mov	r25, r24

	err = delta_x / 2;
	if (y_0 < y_1)
    1d3e:	02 17       	cp	r16, r18
    1d40:	18 f0       	brcs	.+6      	; 0x1d48 <OLED_Draw_Line+0x8a>
    1d42:	ee 24       	eor	r14, r14
    1d44:	ea 94       	dec	r14
    1d46:	02 c0       	rjmp	.+4      	; 0x1d4c <OLED_Draw_Line+0x8e>
    1d48:	ee 24       	eor	r14, r14
    1d4a:	e3 94       	inc	r14
		OLED_SWAP(y_0, y_1);
	}
	delta_x = x_1 - x_0;
	delta_y = abs(y_1 - y_0);

	err = delta_x / 2;
    1d4c:	83 2f       	mov	r24, r19
    1d4e:	86 95       	lsr	r24
    1d50:	c8 2f       	mov	r28, r24
    1d52:	d0 e0       	ldi	r29, 0x00	; 0
		if (steep) {
			OLED_SET_PIXEL(y_0, x_0);
		} else {
			OLED_SET_PIXEL(x_0, y_0);
		}
		err -= delta_y;
    1d54:	a9 2e       	mov	r10, r25
    1d56:	bb 24       	eor	r11, r11
		if (err < 0) {
			y_0 += ystep;
			err += delta_x;
    1d58:	c3 2e       	mov	r12, r19
    1d5a:	dd 24       	eor	r13, r13
    1d5c:	11 c0       	rjmp	.+34     	; 0x1d80 <OLED_Draw_Line+0xc2>
		ystep = 1;
	else
		ystep = -1;

	for (; x_0 <= x_1; x_0++) {
		if (steep) {
    1d5e:	99 20       	and	r9, r9
    1d60:	19 f0       	breq	.+6      	; 0x1d68 <OLED_Draw_Line+0xaa>
			OLED_SET_PIXEL(y_0, x_0);
    1d62:	80 2f       	mov	r24, r16
    1d64:	61 2f       	mov	r22, r17
    1d66:	02 c0       	rjmp	.+4      	; 0x1d6c <OLED_Draw_Line+0xae>
		} else {
			OLED_SET_PIXEL(x_0, y_0);
    1d68:	81 2f       	mov	r24, r17
    1d6a:	60 2f       	mov	r22, r16
    1d6c:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <OLED_SET_PIXEL>
		}
		err -= delta_y;
    1d70:	ca 19       	sub	r28, r10
    1d72:	db 09       	sbc	r29, r11
		if (err < 0) {
    1d74:	d7 ff       	sbrs	r29, 7
    1d76:	03 c0       	rjmp	.+6      	; 0x1d7e <OLED_Draw_Line+0xc0>
			y_0 += ystep;
    1d78:	0e 0d       	add	r16, r14
			err += delta_x;
    1d7a:	cc 0d       	add	r28, r12
    1d7c:	dd 1d       	adc	r29, r13
	if (y_0 < y_1)
		ystep = 1;
	else
		ystep = -1;

	for (; x_0 <= x_1; x_0++) {
    1d7e:	1f 5f       	subi	r17, 0xFF	; 255
    1d80:	f1 16       	cp	r15, r17
    1d82:	68 f7       	brcc	.-38     	; 0x1d5e <OLED_Draw_Line+0xa0>
		if (err < 0) {
			y_0 += ystep;
			err += delta_x;
		}
	}
}
    1d84:	df 91       	pop	r29
    1d86:	cf 91       	pop	r28
    1d88:	1f 91       	pop	r17
    1d8a:	0f 91       	pop	r16
    1d8c:	ff 90       	pop	r15
    1d8e:	ef 90       	pop	r14
    1d90:	df 90       	pop	r13
    1d92:	cf 90       	pop	r12
    1d94:	bf 90       	pop	r11
    1d96:	af 90       	pop	r10
    1d98:	9f 90       	pop	r9
    1d9a:	08 95       	ret

00001d9c <OLED_DRAW_Vertical_LINE>:
{
	OLED_Draw_Line(Center_y,Center_x,Center_y,Center_x+Width-1);
}

void OLED_DRAW_Vertical_LINE(uint8 Center_x,uint8 Center_y,uint8 height)
{
    1d9c:	28 2f       	mov	r18, r24
    1d9e:	86 2f       	mov	r24, r22
    1da0:	94 2f       	mov	r25, r20
	OLED_Draw_Line(Center_y,Center_x,Center_y+height-1,Center_x);
    1da2:	46 2f       	mov	r20, r22
    1da4:	41 50       	subi	r20, 0x01	; 1
    1da6:	49 0f       	add	r20, r25
    1da8:	62 2f       	mov	r22, r18
    1daa:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <OLED_Draw_Line>
}
    1dae:	08 95       	ret

00001db0 <OLED_DRAW_HORZ_LINE>:
		}
	}
}

void OLED_DRAW_HORZ_LINE(uint8 Center_x,uint8 Center_y,uint8 Width)
{
    1db0:	98 2f       	mov	r25, r24
    1db2:	36 2f       	mov	r19, r22
	OLED_Draw_Line(Center_y,Center_x,Center_y,Center_x+Width-1);
    1db4:	28 2f       	mov	r18, r24
    1db6:	21 50       	subi	r18, 0x01	; 1
    1db8:	24 0f       	add	r18, r20
    1dba:	86 2f       	mov	r24, r22
    1dbc:	69 2f       	mov	r22, r25
    1dbe:	43 2f       	mov	r20, r19
    1dc0:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <OLED_Draw_Line>
}
    1dc4:	08 95       	ret

00001dc6 <OLED_DRAW_RECTANGLE>:
{
	OLED_Draw_Line(Center_y,Center_x,Center_y+height-1,Center_x);
}

void OLED_DRAW_RECTANGLE(uint8 x,uint8 y,uint8 Width,uint8 Height)
{
    1dc6:	ef 92       	push	r14
    1dc8:	ff 92       	push	r15
    1dca:	0f 93       	push	r16
    1dcc:	1f 93       	push	r17
    1dce:	18 2f       	mov	r17, r24
    1dd0:	06 2f       	mov	r16, r22
    1dd2:	f4 2e       	mov	r15, r20
    1dd4:	e2 2e       	mov	r14, r18
	OLED_DRAW_HORZ_LINE(x,y,Width);
    1dd6:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <OLED_DRAW_HORZ_LINE>
	OLED_DRAW_HORZ_LINE(x,y+Height-1,Width);
    1dda:	60 2f       	mov	r22, r16
    1ddc:	61 50       	subi	r22, 0x01	; 1
    1dde:	6e 0d       	add	r22, r14
    1de0:	81 2f       	mov	r24, r17
    1de2:	4f 2d       	mov	r20, r15
    1de4:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <OLED_DRAW_HORZ_LINE>
	OLED_DRAW_Vertical_LINE(x,y,Height);
    1de8:	81 2f       	mov	r24, r17
    1dea:	60 2f       	mov	r22, r16
    1dec:	4e 2d       	mov	r20, r14
    1dee:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <OLED_DRAW_Vertical_LINE>
	OLED_DRAW_Vertical_LINE(x+Width-1,y,Height);
    1df2:	11 50       	subi	r17, 0x01	; 1
    1df4:	81 2f       	mov	r24, r17
    1df6:	8f 0d       	add	r24, r15
    1df8:	60 2f       	mov	r22, r16
    1dfa:	4e 2d       	mov	r20, r14
    1dfc:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <OLED_DRAW_Vertical_LINE>
}
    1e00:	1f 91       	pop	r17
    1e02:	0f 91       	pop	r16
    1e04:	ff 90       	pop	r15
    1e06:	ef 90       	pop	r14
    1e08:	08 95       	ret

00001e0a <OLED_display_Image>:
		I2C_WAIT_STOP();
	}
}

Bool OLED_display_Image(unsigned char *Bitmap)
{
    1e0a:	9f 92       	push	r9
    1e0c:	af 92       	push	r10
    1e0e:	bf 92       	push	r11
    1e10:	cf 92       	push	r12
    1e12:	df 92       	push	r13
    1e14:	ef 92       	push	r14
    1e16:	ff 92       	push	r15
    1e18:	0f 93       	push	r16
    1e1a:	1f 93       	push	r17
    1e1c:	cf 93       	push	r28
    1e1e:	df 93       	push	r29
    1e20:	5c 01       	movw	r10, r24
	Bool E_stat=E_OK;
	if(Bitmap==NULL)
    1e22:	00 97       	sbiw	r24, 0x00	; 0
    1e24:	09 f4       	brne	.+2      	; 0x1e28 <OLED_display_Image+0x1e>
    1e26:	44 c0       	rjmp	.+136    	; 0x1eb0 <OLED_display_Image+0xa6>
	else
	{
		uint8 Cnt = 0;
		uint8 L_cnt=0;
		uint16 Seg_Cnt=0;
		OLED_send_cmd(OLED_SET_COLUMN_ADDR);
    1e28:	81 e2       	ldi	r24, 0x21	; 33
    1e2a:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
		OLED_send_cmd(0);
    1e2e:	80 e0       	ldi	r24, 0x00	; 0
    1e30:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
		OLED_send_cmd(127);
    1e34:	8f e7       	ldi	r24, 0x7F	; 127
    1e36:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
		OLED_send_cmd(OLED_SET_PAGE_ADDR);
    1e3a:	82 e2       	ldi	r24, 0x22	; 34
    1e3c:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
		OLED_send_cmd(0);
    1e40:	80 e0       	ldi	r24, 0x00	; 0
    1e42:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
		OLED_send_cmd(7);
    1e46:	87 e0       	ldi	r24, 0x07	; 7
    1e48:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
    1e4c:	dd 24       	eor	r13, r13
    1e4e:	c0 e0       	ldi	r28, 0x00	; 0
    1e50:	d0 e0       	ldi	r29, 0x00	; 0
		for (Cnt = 0; Cnt <= OLED_PAGE_SIZE; Cnt++)
		{
			OLED_SET_CURSOR(0,Cnt);
			I2C_GEN_START_COND();
    1e52:	34 ea       	ldi	r19, 0xA4	; 164
    1e54:	93 2e       	mov	r9, r19
			I2C_WRITE_BYTE(0x40);
			for(L_cnt=0;L_cnt<OLED_COL_SIZE;L_cnt++)
			{
				I2C_WRITE_BYTE(pgm_read_byte(&Bitmap[Seg_Cnt++]));
			}
			I2C_GEN_STOP_COND();
    1e56:	24 e9       	ldi	r18, 0x94	; 148
    1e58:	c2 2e       	mov	r12, r18
		OLED_send_cmd(OLED_SET_PAGE_ADDR);
		OLED_send_cmd(0);
		OLED_send_cmd(7);
		for (Cnt = 0; Cnt <= OLED_PAGE_SIZE; Cnt++)
		{
			OLED_SET_CURSOR(0,Cnt);
    1e5a:	80 e0       	ldi	r24, 0x00	; 0
    1e5c:	6d 2d       	mov	r22, r13
    1e5e:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <OLED_SET_CURSOR>
			I2C_GEN_START_COND();
    1e62:	96 be       	out	0x36, r9	; 54
			I2C_WAIT();
    1e64:	06 b6       	in	r0, 0x36	; 54
    1e66:	07 fe       	sbrs	r0, 7
    1e68:	fd cf       	rjmp	.-6      	; 0x1e64 <OLED_display_Image+0x5a>
			I2C_WRITE_BYTE(OLEDSSD_DISPLAY_ADD);
    1e6a:	8a e7       	ldi	r24, 0x7A	; 122
    1e6c:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <I2C_WRITE_BYTE>
			I2C_WRITE_BYTE(0x40);
    1e70:	80 e4       	ldi	r24, 0x40	; 64
    1e72:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <I2C_WRITE_BYTE>
    1e76:	85 01       	movw	r16, r10
    1e78:	0c 0f       	add	r16, r28
    1e7a:	1d 1f       	adc	r17, r29
			for(L_cnt=0;L_cnt<OLED_COL_SIZE;L_cnt++)
    1e7c:	90 e8       	ldi	r25, 0x80	; 128
    1e7e:	e9 2e       	mov	r14, r25
    1e80:	f1 2c       	mov	r15, r1
    1e82:	ec 0e       	add	r14, r28
    1e84:	fd 1e       	adc	r15, r29
    1e86:	07 c0       	rjmp	.+14     	; 0x1e96 <OLED_display_Image+0x8c>
			{
				I2C_WRITE_BYTE(pgm_read_byte(&Bitmap[Seg_Cnt++]));
    1e88:	21 96       	adiw	r28, 0x01	; 1
    1e8a:	f8 01       	movw	r30, r16
    1e8c:	84 91       	lpm	r24, Z+
    1e8e:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <I2C_WRITE_BYTE>
    1e92:	0f 5f       	subi	r16, 0xFF	; 255
    1e94:	1f 4f       	sbci	r17, 0xFF	; 255
			OLED_SET_CURSOR(0,Cnt);
			I2C_GEN_START_COND();
			I2C_WAIT();
			I2C_WRITE_BYTE(OLEDSSD_DISPLAY_ADD);
			I2C_WRITE_BYTE(0x40);
			for(L_cnt=0;L_cnt<OLED_COL_SIZE;L_cnt++)
    1e96:	ce 15       	cp	r28, r14
    1e98:	df 05       	cpc	r29, r15
    1e9a:	b1 f7       	brne	.-20     	; 0x1e88 <OLED_display_Image+0x7e>
			{
				I2C_WRITE_BYTE(pgm_read_byte(&Bitmap[Seg_Cnt++]));
			}
			I2C_GEN_STOP_COND();
    1e9c:	c6 be       	out	0x36, r12	; 54
			I2C_WAIT_STOP();
    1e9e:	06 b6       	in	r0, 0x36	; 54
    1ea0:	04 fc       	sbrc	r0, 4
    1ea2:	fd cf       	rjmp	.-6      	; 0x1e9e <OLED_display_Image+0x94>
		OLED_send_cmd(0);
		OLED_send_cmd(127);
		OLED_send_cmd(OLED_SET_PAGE_ADDR);
		OLED_send_cmd(0);
		OLED_send_cmd(7);
		for (Cnt = 0; Cnt <= OLED_PAGE_SIZE; Cnt++)
    1ea4:	d3 94       	inc	r13
    1ea6:	f8 e0       	ldi	r31, 0x08	; 8
    1ea8:	df 16       	cp	r13, r31
    1eaa:	b9 f6       	brne	.-82     	; 0x1e5a <OLED_display_Image+0x50>
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	01 c0       	rjmp	.+2      	; 0x1eb2 <OLED_display_Image+0xa8>
    1eb0:	80 e0       	ldi	r24, 0x00	; 0
			I2C_GEN_STOP_COND();
			I2C_WAIT_STOP();
		}
	}
	return E_stat;
}
    1eb2:	df 91       	pop	r29
    1eb4:	cf 91       	pop	r28
    1eb6:	1f 91       	pop	r17
    1eb8:	0f 91       	pop	r16
    1eba:	ff 90       	pop	r15
    1ebc:	ef 90       	pop	r14
    1ebe:	df 90       	pop	r13
    1ec0:	cf 90       	pop	r12
    1ec2:	bf 90       	pop	r11
    1ec4:	af 90       	pop	r10
    1ec6:	9f 90       	pop	r9
    1ec8:	08 95       	ret

00001eca <OLED_DISPLAY>:
	}
	return E_stat;
}

void OLED_DISPLAY()
{
    1eca:	bf 92       	push	r11
    1ecc:	cf 92       	push	r12
    1ece:	df 92       	push	r13
    1ed0:	ef 92       	push	r14
    1ed2:	ff 92       	push	r15
    1ed4:	0f 93       	push	r16
    1ed6:	1f 93       	push	r17
    1ed8:	cf 93       	push	r28
    1eda:	df 93       	push	r29
	uint8 Cnt = 0;
	uint8 L_cnt = 0;
	uint16 Seg_Cnt = 0;
	OLED_send_cmd(OLED_SET_COLUMN_ADDR);
    1edc:	81 e2       	ldi	r24, 0x21	; 33
    1ede:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
	OLED_send_cmd(0);
    1ee2:	80 e0       	ldi	r24, 0x00	; 0
    1ee4:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
	OLED_send_cmd(127);
    1ee8:	8f e7       	ldi	r24, 0x7F	; 127
    1eea:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
	OLED_send_cmd(OLED_SET_PAGE_ADDR);
    1eee:	82 e2       	ldi	r24, 0x22	; 34
    1ef0:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
	OLED_send_cmd(0);
    1ef4:	80 e0       	ldi	r24, 0x00	; 0
    1ef6:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
	OLED_send_cmd(7);
    1efa:	87 e0       	ldi	r24, 0x07	; 7
    1efc:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
    1f00:	dd 24       	eor	r13, r13
    1f02:	c0 e0       	ldi	r28, 0x00	; 0
    1f04:	d0 e0       	ldi	r29, 0x00	; 0
	for (Cnt = 0; Cnt <= OLED_PAGE_SIZE; Cnt++) {
		OLED_SET_CURSOR(0, Cnt);
		I2C_GEN_START_COND();
    1f06:	64 ea       	ldi	r22, 0xA4	; 164
    1f08:	b6 2e       	mov	r11, r22
		I2C_WRITE_BYTE(OLEDSSD_DISPLAY_ADD);
		I2C_WRITE_BYTE(0x40);
		for (L_cnt = 0; L_cnt < OLED_COL_SIZE; L_cnt++) {
			I2C_WRITE_BYTE(Image[Seg_Cnt++]);
		}
		I2C_GEN_STOP_COND();
    1f0a:	54 e9       	ldi	r21, 0x94	; 148
    1f0c:	c5 2e       	mov	r12, r21
	OLED_send_cmd(127);
	OLED_send_cmd(OLED_SET_PAGE_ADDR);
	OLED_send_cmd(0);
	OLED_send_cmd(7);
	for (Cnt = 0; Cnt <= OLED_PAGE_SIZE; Cnt++) {
		OLED_SET_CURSOR(0, Cnt);
    1f0e:	80 e0       	ldi	r24, 0x00	; 0
    1f10:	6d 2d       	mov	r22, r13
    1f12:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <OLED_SET_CURSOR>
		I2C_GEN_START_COND();
    1f16:	b6 be       	out	0x36, r11	; 54
		I2C_WAIT();
    1f18:	06 b6       	in	r0, 0x36	; 54
    1f1a:	07 fe       	sbrs	r0, 7
    1f1c:	fd cf       	rjmp	.-6      	; 0x1f18 <OLED_DISPLAY+0x4e>
		I2C_WRITE_BYTE(OLEDSSD_DISPLAY_ADD);
    1f1e:	8a e7       	ldi	r24, 0x7A	; 122
    1f20:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <I2C_WRITE_BYTE>
		I2C_WRITE_BYTE(0x40);
    1f24:	80 e4       	ldi	r24, 0x40	; 64
    1f26:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <I2C_WRITE_BYTE>
    1f2a:	8e 01       	movw	r16, r28
    1f2c:	05 55       	subi	r16, 0x55	; 85
    1f2e:	1e 4f       	sbci	r17, 0xFE	; 254
		for (L_cnt = 0; L_cnt < OLED_COL_SIZE; L_cnt++) {
    1f30:	40 e8       	ldi	r20, 0x80	; 128
    1f32:	e4 2e       	mov	r14, r20
    1f34:	f1 2c       	mov	r15, r1
    1f36:	ec 0e       	add	r14, r28
    1f38:	fd 1e       	adc	r15, r29
    1f3a:	06 c0       	rjmp	.+12     	; 0x1f48 <OLED_DISPLAY+0x7e>
			I2C_WRITE_BYTE(Image[Seg_Cnt++]);
    1f3c:	21 96       	adiw	r28, 0x01	; 1
    1f3e:	f8 01       	movw	r30, r16
    1f40:	81 91       	ld	r24, Z+
    1f42:	8f 01       	movw	r16, r30
    1f44:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <I2C_WRITE_BYTE>
		OLED_SET_CURSOR(0, Cnt);
		I2C_GEN_START_COND();
		I2C_WAIT();
		I2C_WRITE_BYTE(OLEDSSD_DISPLAY_ADD);
		I2C_WRITE_BYTE(0x40);
		for (L_cnt = 0; L_cnt < OLED_COL_SIZE; L_cnt++) {
    1f48:	ce 15       	cp	r28, r14
    1f4a:	df 05       	cpc	r29, r15
    1f4c:	b9 f7       	brne	.-18     	; 0x1f3c <OLED_DISPLAY+0x72>
			I2C_WRITE_BYTE(Image[Seg_Cnt++]);
		}
		I2C_GEN_STOP_COND();
    1f4e:	c6 be       	out	0x36, r12	; 54
		I2C_WAIT_STOP();
    1f50:	06 b6       	in	r0, 0x36	; 54
    1f52:	04 fc       	sbrc	r0, 4
    1f54:	fd cf       	rjmp	.-6      	; 0x1f50 <OLED_DISPLAY+0x86>
	OLED_send_cmd(0);
	OLED_send_cmd(127);
	OLED_send_cmd(OLED_SET_PAGE_ADDR);
	OLED_send_cmd(0);
	OLED_send_cmd(7);
	for (Cnt = 0; Cnt <= OLED_PAGE_SIZE; Cnt++) {
    1f56:	d3 94       	inc	r13
    1f58:	f8 e0       	ldi	r31, 0x08	; 8
    1f5a:	df 16       	cp	r13, r31
    1f5c:	c1 f6       	brne	.-80     	; 0x1f0e <OLED_DISPLAY+0x44>
			I2C_WRITE_BYTE(Image[Seg_Cnt++]);
		}
		I2C_GEN_STOP_COND();
		I2C_WAIT_STOP();
	}
}
    1f5e:	df 91       	pop	r29
    1f60:	cf 91       	pop	r28
    1f62:	1f 91       	pop	r17
    1f64:	0f 91       	pop	r16
    1f66:	ff 90       	pop	r15
    1f68:	ef 90       	pop	r14
    1f6a:	df 90       	pop	r13
    1f6c:	cf 90       	pop	r12
    1f6e:	bf 90       	pop	r11
    1f70:	08 95       	ret

00001f72 <OLED_DISPLAY_CHAR>:
	}
	return E_stat;
}

Bool OLED_DISPLAY_CHAR(char C)
{
    1f72:	1f 93       	push	r17
    1f74:	cf 93       	push	r28
    1f76:	df 93       	push	r29
    1f78:	98 2f       	mov	r25, r24
	Bool E_stat=E_OK;
	uint8 Char_Cnt=0;
	if(X_Cursor>128||C=='\n')
    1f7a:	80 91 aa 01 	lds	r24, 0x01AA
    1f7e:	81 38       	cpi	r24, 0x81	; 129
    1f80:	10 f4       	brcc	.+4      	; 0x1f86 <OLED_DISPLAY_CHAR+0x14>
    1f82:	9a 30       	cpi	r25, 0x0A	; 10
    1f84:	79 f4       	brne	.+30     	; 0x1fa4 <OLED_DISPLAY_CHAR+0x32>
}

static Bool OLED_NEW_line()
{
	Bool E_Stat=E_OK;
	Y_Cursor++;
    1f86:	80 91 ab 05 	lds	r24, 0x05AB
    1f8a:	8f 5f       	subi	r24, 0xFF	; 255
    1f8c:	80 93 ab 05 	sts	0x05AB, r24
	if(Y_Cursor>7)
    1f90:	88 30       	cpi	r24, 0x08	; 8
    1f92:	10 f0       	brcs	.+4      	; 0x1f98 <OLED_DISPLAY_CHAR+0x26>
		Y_Cursor=0;
    1f94:	10 92 ab 05 	sts	0x05AB, r1
	E_Stat=OLED_SET_CURSOR(0,Y_Cursor);
    1f98:	80 e0       	ldi	r24, 0x00	; 0
    1f9a:	60 91 ab 05 	lds	r22, 0x05AB
    1f9e:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <OLED_SET_CURSOR>
    1fa2:	26 c0       	rjmp	.+76     	; 0x1ff0 <OLED_DISPLAY_CHAR+0x7e>
	{
		OLED_NEW_line();
	}
	else
	{
		uint8 Char_position=C-32;
    1fa4:	19 2f       	mov	r17, r25
    1fa6:	10 52       	subi	r17, 0x20	; 32
		I2C_GEN_START_COND();
    1fa8:	84 ea       	ldi	r24, 0xA4	; 164
    1faa:	86 bf       	out	0x36, r24	; 54
		I2C_WAIT();
    1fac:	06 b6       	in	r0, 0x36	; 54
    1fae:	07 fe       	sbrs	r0, 7
    1fb0:	fd cf       	rjmp	.-6      	; 0x1fac <OLED_DISPLAY_CHAR+0x3a>
		I2C_WRITE_BYTE(OLEDSSD_DISPLAY_ADD);
    1fb2:	8a e7       	ldi	r24, 0x7A	; 122
    1fb4:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <I2C_WRITE_BYTE>
		I2C_WRITE_BYTE(0x40);
    1fb8:	80 e4       	ldi	r24, 0x40	; 64
    1fba:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <I2C_WRITE_BYTE>
    1fbe:	85 e0       	ldi	r24, 0x05	; 5
    1fc0:	18 9f       	mul	r17, r24
    1fc2:	e0 01       	movw	r28, r0
    1fc4:	11 24       	eor	r1, r1
    1fc6:	cc 5a       	subi	r28, 0xAC	; 172
    1fc8:	df 4f       	sbci	r29, 0xFF	; 255
    1fca:	10 e0       	ldi	r17, 0x00	; 0
		for(Char_Cnt=0;Char_Cnt<5;Char_Cnt++)
		{
			I2C_WRITE_BYTE(pgm_read_byte(&OledFontTable[Char_position][Char_Cnt]));
    1fcc:	fe 01       	movw	r30, r28
    1fce:	84 91       	lpm	r24, Z+
    1fd0:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <I2C_WRITE_BYTE>
			X_Cursor++;
    1fd4:	80 91 aa 01 	lds	r24, 0x01AA
    1fd8:	8f 5f       	subi	r24, 0xFF	; 255
    1fda:	80 93 aa 01 	sts	0x01AA, r24
		uint8 Char_position=C-32;
		I2C_GEN_START_COND();
		I2C_WAIT();
		I2C_WRITE_BYTE(OLEDSSD_DISPLAY_ADD);
		I2C_WRITE_BYTE(0x40);
		for(Char_Cnt=0;Char_Cnt<5;Char_Cnt++)
    1fde:	1f 5f       	subi	r17, 0xFF	; 255
    1fe0:	21 96       	adiw	r28, 0x01	; 1
    1fe2:	15 30       	cpi	r17, 0x05	; 5
    1fe4:	99 f7       	brne	.-26     	; 0x1fcc <OLED_DISPLAY_CHAR+0x5a>
		{
			I2C_WRITE_BYTE(pgm_read_byte(&OledFontTable[Char_position][Char_Cnt]));
			X_Cursor++;
		}
		I2C_GEN_STOP_COND();
    1fe6:	84 e9       	ldi	r24, 0x94	; 148
    1fe8:	86 bf       	out	0x36, r24	; 54
		I2C_WAIT_STOP();
    1fea:	06 b6       	in	r0, 0x36	; 54
    1fec:	04 fc       	sbrc	r0, 4
    1fee:	fd cf       	rjmp	.-6      	; 0x1fea <OLED_DISPLAY_CHAR+0x78>
	}
	return E_stat;
}
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
    1ff2:	df 91       	pop	r29
    1ff4:	cf 91       	pop	r28
    1ff6:	1f 91       	pop	r17
    1ff8:	08 95       	ret

00001ffa <OLED_DISPLAY_String>:
	}
	return E_stat;
}

Bool OLED_DISPLAY_String(char *str,uint8 X,uint8 Y,uint8 Font)
{
    1ffa:	9f 92       	push	r9
    1ffc:	af 92       	push	r10
    1ffe:	bf 92       	push	r11
    2000:	cf 92       	push	r12
    2002:	df 92       	push	r13
    2004:	ef 92       	push	r14
    2006:	ff 92       	push	r15
    2008:	0f 93       	push	r16
    200a:	1f 93       	push	r17
    200c:	cf 93       	push	r28
    200e:	df 93       	push	r29
    2010:	6c 01       	movw	r12, r24
    2012:	b4 2e       	mov	r11, r20
	Bool E_stat=E_OK;
	if(Font==1)
    2014:	21 30       	cpi	r18, 0x01	; 1
    2016:	a1 f4       	brne	.+40     	; 0x2040 <OLED_DISPLAY_String+0x46>
	{
		OLED_SET_CURSOR(X,Y);
    2018:	86 2f       	mov	r24, r22
    201a:	64 2f       	mov	r22, r20
    201c:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <OLED_SET_CURSOR>
}

static Bool OLED_DISPLAY_String_font_1(char *str)
{
	Bool E_stat=E_OK;
	if(NULL==str)
    2020:	c1 14       	cp	r12, r1
    2022:	d1 04       	cpc	r13, r1
    2024:	09 f4       	brne	.+2      	; 0x2028 <OLED_DISPLAY_String+0x2e>
    2026:	84 c0       	rjmp	.+264    	; 0x2130 <OLED_DISPLAY_String+0x136>
    2028:	10 e0       	ldi	r17, 0x00	; 0
    202a:	03 c0       	rjmp	.+6      	; 0x2032 <OLED_DISPLAY_String+0x38>
	else
	{
		uint8 Str_pos=0;
		while(*(str+Str_pos)!='\0')
		{
			E_stat=OLED_DISPLAY_CHAR(*(str+Str_pos));
    202c:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <OLED_DISPLAY_CHAR>
			Str_pos++;
    2030:	1f 5f       	subi	r17, 0xFF	; 255
	if(NULL==str)
		E_stat=E_NOK;
	else
	{
		uint8 Str_pos=0;
		while(*(str+Str_pos)!='\0')
    2032:	f6 01       	movw	r30, r12
    2034:	e1 0f       	add	r30, r17
    2036:	f1 1d       	adc	r31, r1
    2038:	80 81       	ld	r24, Z
    203a:	88 23       	and	r24, r24
    203c:	b9 f7       	brne	.-18     	; 0x202c <OLED_DISPLAY_String+0x32>
    203e:	78 c0       	rjmp	.+240    	; 0x2130 <OLED_DISPLAY_String+0x136>
	if(Font==1)
	{
		OLED_SET_CURSOR(X,Y);
		OLED_DISPLAY_String_font_1(str);
	}
	else if(Font==2)
    2040:	22 30       	cpi	r18, 0x02	; 2
    2042:	11 f0       	breq	.+4      	; 0x2048 <OLED_DISPLAY_String+0x4e>
    2044:	80 e0       	ldi	r24, 0x00	; 0
    2046:	75 c0       	rjmp	.+234    	; 0x2132 <OLED_DISPLAY_String+0x138>
	Bool E_stat = E_OK;
	uint8 Char_Cnt = 0;
	uint8 Font_Cnt=0;
	uint8 C;
	uint8 Old_Y=Y;
	X_Cursor=X;
    2048:	60 93 aa 01 	sts	0x01AA, r22
	Y_Cursor=Y;
    204c:	40 93 ab 05 	sts	0x05AB, r20
    2050:	ee 24       	eor	r14, r14
			Y_Cursor++;
			if(Y_Cursor>7)
				Y_Cursor=0;
		}
		OLED_SET_CURSOR(X_Cursor,Y_Cursor);
		I2C_GEN_START_COND();
    2052:	f4 ea       	ldi	r31, 0xA4	; 164
    2054:	9f 2e       	mov	r9, r31
		I2C_WRITE_BYTE(OLEDSSD_DISPLAY_ADD);
		I2C_WRITE_BYTE(0x40);
		for (Font_Cnt = 0; Font_Cnt < 8; Font_Cnt++) {
			I2C_WRITE_BYTE(pgm_read_byte(&ssd1306xled_font8x16 [C*16  + Font_Cnt]));
		}
		I2C_GEN_STOP_COND();
    2056:	e4 e9       	ldi	r30, 0x94	; 148
    2058:	ae 2e       	mov	r10, r30
    205a:	63 c0       	rjmp	.+198    	; 0x2122 <OLED_DISPLAY_String+0x128>
	uint8 Old_Y=Y;
	X_Cursor=X;
	Y_Cursor=Y;
	while(*(str+Char_Cnt)!='\0')
	{
		C=*(str+Char_Cnt)-0x20;
    205c:	1e 2f       	mov	r17, r30
    205e:	10 52       	subi	r17, 0x20	; 32
		if(X_Cursor>120)
    2060:	80 91 aa 01 	lds	r24, 0x01AA
    2064:	89 37       	cpi	r24, 0x79	; 121
    2066:	58 f0       	brcs	.+22     	; 0x207e <OLED_DISPLAY_String+0x84>
		{
			X_Cursor=0;
    2068:	10 92 aa 01 	sts	0x01AA, r1
			Y_Cursor++;
    206c:	80 91 ab 05 	lds	r24, 0x05AB
    2070:	8f 5f       	subi	r24, 0xFF	; 255
    2072:	80 93 ab 05 	sts	0x05AB, r24
			if(Y_Cursor>7)
    2076:	88 30       	cpi	r24, 0x08	; 8
    2078:	10 f0       	brcs	.+4      	; 0x207e <OLED_DISPLAY_String+0x84>
				Y_Cursor=0;
    207a:	10 92 ab 05 	sts	0x05AB, r1
		}
		OLED_SET_CURSOR(X_Cursor,Y_Cursor);
    207e:	80 91 aa 01 	lds	r24, 0x01AA
    2082:	60 91 ab 05 	lds	r22, 0x05AB
    2086:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <OLED_SET_CURSOR>
		I2C_GEN_START_COND();
    208a:	96 be       	out	0x36, r9	; 54
		I2C_WAIT();
    208c:	06 b6       	in	r0, 0x36	; 54
    208e:	07 fe       	sbrs	r0, 7
    2090:	fd cf       	rjmp	.-6      	; 0x208c <OLED_DISPLAY_String+0x92>
		I2C_WRITE_BYTE(OLEDSSD_DISPLAY_ADD);
    2092:	8a e7       	ldi	r24, 0x7A	; 122
    2094:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <I2C_WRITE_BYTE>
		I2C_WRITE_BYTE(0x40);
    2098:	80 e4       	ldi	r24, 0x40	; 64
    209a:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <I2C_WRITE_BYTE>
	}
	return E_stat;
}

Bool OLED_DISPLAY_String(char *str,uint8 X,uint8 Y,uint8 Font)
{
    209e:	01 2f       	mov	r16, r17
    20a0:	10 e0       	ldi	r17, 0x00	; 0
    20a2:	74 e0       	ldi	r23, 0x04	; 4
    20a4:	00 0f       	add	r16, r16
    20a6:	11 1f       	adc	r17, r17
    20a8:	7a 95       	dec	r23
    20aa:	e1 f7       	brne	.-8      	; 0x20a4 <OLED_DISPLAY_String+0xaa>
    20ac:	e8 01       	movw	r28, r16
    20ae:	c1 5d       	subi	r28, 0xD1	; 209
    20b0:	dd 4f       	sbci	r29, 0xFD	; 253
    20b2:	ff 24       	eor	r15, r15
		I2C_GEN_START_COND();
		I2C_WAIT();
		I2C_WRITE_BYTE(OLEDSSD_DISPLAY_ADD);
		I2C_WRITE_BYTE(0x40);
		for (Font_Cnt = 0; Font_Cnt < 8; Font_Cnt++) {
			I2C_WRITE_BYTE(pgm_read_byte(&ssd1306xled_font8x16 [C*16  + Font_Cnt]));
    20b4:	fe 01       	movw	r30, r28
    20b6:	84 91       	lpm	r24, Z+
    20b8:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <I2C_WRITE_BYTE>
		OLED_SET_CURSOR(X_Cursor,Y_Cursor);
		I2C_GEN_START_COND();
		I2C_WAIT();
		I2C_WRITE_BYTE(OLEDSSD_DISPLAY_ADD);
		I2C_WRITE_BYTE(0x40);
		for (Font_Cnt = 0; Font_Cnt < 8; Font_Cnt++) {
    20bc:	f3 94       	inc	r15
    20be:	21 96       	adiw	r28, 0x01	; 1
    20c0:	f8 e0       	ldi	r31, 0x08	; 8
    20c2:	ff 16       	cp	r15, r31
    20c4:	b9 f7       	brne	.-18     	; 0x20b4 <OLED_DISPLAY_String+0xba>
			I2C_WRITE_BYTE(pgm_read_byte(&ssd1306xled_font8x16 [C*16  + Font_Cnt]));
		}
		I2C_GEN_STOP_COND();
    20c6:	a6 be       	out	0x36, r10	; 54
		I2C_WAIT_STOP();
    20c8:	06 b6       	in	r0, 0x36	; 54
    20ca:	04 fc       	sbrc	r0, 4
    20cc:	fd cf       	rjmp	.-6      	; 0x20c8 <OLED_DISPLAY_String+0xce>
		OLED_SET_CURSOR(X_Cursor,Y_Cursor+1);
    20ce:	60 91 ab 05 	lds	r22, 0x05AB
    20d2:	6f 5f       	subi	r22, 0xFF	; 255
    20d4:	80 91 aa 01 	lds	r24, 0x01AA
    20d8:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <OLED_SET_CURSOR>
		I2C_GEN_START_COND();
    20dc:	96 be       	out	0x36, r9	; 54
		I2C_WAIT();
    20de:	06 b6       	in	r0, 0x36	; 54
    20e0:	07 fe       	sbrs	r0, 7
    20e2:	fd cf       	rjmp	.-6      	; 0x20de <OLED_DISPLAY_String+0xe4>
		I2C_WRITE_BYTE(OLEDSSD_DISPLAY_ADD);
    20e4:	8a e7       	ldi	r24, 0x7A	; 122
    20e6:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <I2C_WRITE_BYTE>
		I2C_WRITE_BYTE(0x40);
    20ea:	80 e4       	ldi	r24, 0x40	; 64
    20ec:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <I2C_WRITE_BYTE>
    20f0:	e8 01       	movw	r28, r16
    20f2:	c9 5c       	subi	r28, 0xC9	; 201
    20f4:	dd 4f       	sbci	r29, 0xFD	; 253
		for (Font_Cnt = 0; Font_Cnt < 8; Font_Cnt++) {
    20f6:	01 5c       	subi	r16, 0xC1	; 193
    20f8:	1d 4f       	sbci	r17, 0xFD	; 253
			I2C_WRITE_BYTE(
					pgm_read_byte(&ssd1306xled_font8x16 [C*16+ Font_Cnt+8]));
    20fa:	fe 01       	movw	r30, r28
    20fc:	84 91       	lpm	r24, Z+
		I2C_GEN_START_COND();
		I2C_WAIT();
		I2C_WRITE_BYTE(OLEDSSD_DISPLAY_ADD);
		I2C_WRITE_BYTE(0x40);
		for (Font_Cnt = 0; Font_Cnt < 8; Font_Cnt++) {
			I2C_WRITE_BYTE(
    20fe:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <I2C_WRITE_BYTE>
    2102:	21 96       	adiw	r28, 0x01	; 1
		OLED_SET_CURSOR(X_Cursor,Y_Cursor+1);
		I2C_GEN_START_COND();
		I2C_WAIT();
		I2C_WRITE_BYTE(OLEDSSD_DISPLAY_ADD);
		I2C_WRITE_BYTE(0x40);
		for (Font_Cnt = 0; Font_Cnt < 8; Font_Cnt++) {
    2104:	c0 17       	cp	r28, r16
    2106:	d1 07       	cpc	r29, r17
    2108:	c1 f7       	brne	.-16     	; 0x20fa <OLED_DISPLAY_String+0x100>
			I2C_WRITE_BYTE(
					pgm_read_byte(&ssd1306xled_font8x16 [C*16+ Font_Cnt+8]));
		}
		I2C_GEN_STOP_COND();
    210a:	a6 be       	out	0x36, r10	; 54
		I2C_WAIT_STOP();
    210c:	06 b6       	in	r0, 0x36	; 54
    210e:	04 fc       	sbrc	r0, 4
    2110:	fd cf       	rjmp	.-6      	; 0x210c <OLED_DISPLAY_String+0x112>
		X_Cursor+=8;
    2112:	80 91 aa 01 	lds	r24, 0x01AA
    2116:	88 5f       	subi	r24, 0xF8	; 248
    2118:	80 93 aa 01 	sts	0x01AA, r24
		Y_Cursor=Old_Y;
    211c:	b0 92 ab 05 	sts	0x05AB, r11
		Char_Cnt++;
    2120:	e3 94       	inc	r14
	uint8 Font_Cnt=0;
	uint8 C;
	uint8 Old_Y=Y;
	X_Cursor=X;
	Y_Cursor=Y;
	while(*(str+Char_Cnt)!='\0')
    2122:	f6 01       	movw	r30, r12
    2124:	ee 0d       	add	r30, r14
    2126:	f1 1d       	adc	r31, r1
    2128:	e0 81       	ld	r30, Z
    212a:	ee 23       	and	r30, r30
    212c:	09 f0       	breq	.+2      	; 0x2130 <OLED_DISPLAY_String+0x136>
    212e:	96 cf       	rjmp	.-212    	; 0x205c <OLED_DISPLAY_String+0x62>
    2130:	81 e0       	ldi	r24, 0x01	; 1
		OLED_DISPLAY_String_Font_2(str,X,Y);
	}
	else
		E_stat=E_NOK;
	return E_stat;
}
    2132:	df 91       	pop	r29
    2134:	cf 91       	pop	r28
    2136:	1f 91       	pop	r17
    2138:	0f 91       	pop	r16
    213a:	ff 90       	pop	r15
    213c:	ef 90       	pop	r14
    213e:	df 90       	pop	r13
    2140:	cf 90       	pop	r12
    2142:	bf 90       	pop	r11
    2144:	af 90       	pop	r10
    2146:	9f 90       	pop	r9
    2148:	08 95       	ret

0000214a <OLED_display_Float>:
	}
	return E_stat;
}

Bool OLED_display_Float(float32 Num,uint8 Col_C,uint8 Row_C,uint8 Font)
{
    214a:	2f 92       	push	r2
    214c:	3f 92       	push	r3
    214e:	4f 92       	push	r4
    2150:	5f 92       	push	r5
    2152:	6f 92       	push	r6
    2154:	7f 92       	push	r7
    2156:	8f 92       	push	r8
    2158:	9f 92       	push	r9
    215a:	af 92       	push	r10
    215c:	bf 92       	push	r11
    215e:	cf 92       	push	r12
    2160:	df 92       	push	r13
    2162:	ef 92       	push	r14
    2164:	ff 92       	push	r15
    2166:	0f 93       	push	r16
    2168:	1f 93       	push	r17
    216a:	df 93       	push	r29
    216c:	cf 93       	push	r28
    216e:	cd b7       	in	r28, 0x3d	; 61
    2170:	de b7       	in	r29, 0x3e	; 62
    2172:	a3 97       	sbiw	r28, 0x23	; 35
    2174:	0f b6       	in	r0, 0x3f	; 63
    2176:	f8 94       	cli
    2178:	de bf       	out	0x3e, r29	; 62
    217a:	0f be       	out	0x3f, r0	; 63
    217c:	cd bf       	out	0x3d, r28	; 61
    217e:	6b 01       	movw	r12, r22
    2180:	7c 01       	movw	r14, r24
    2182:	49 a3       	std	Y+33, r20	; 0x21
    2184:	2a a3       	std	Y+34, r18	; 0x22
    2186:	0b a3       	std	Y+35, r16	; 0x23
    2188:	fe 01       	movw	r30, r28
    218a:	31 96       	adiw	r30, 0x01	; 1
}

static void Memset(uint8 *str,uint8 Len)
{
	uint8 Cnt=0;
	while(Cnt<Len)
    218c:	ce 01       	movw	r24, r28
    218e:	4f 96       	adiw	r24, 0x1f	; 31
	{
		*(str+Cnt)='\0';
    2190:	11 92       	st	Z+, r1
}

static void Memset(uint8 *str,uint8 Len)
{
	uint8 Cnt=0;
	while(Cnt<Len)
    2192:	e8 17       	cp	r30, r24
    2194:	f9 07       	cpc	r31, r25
    2196:	e1 f7       	brne	.-8      	; 0x2190 <OLED_display_Float+0x46>
	uint8 Cnt = 0;
	int32 Int_part=0;
	int32 Fract_part=0;
	int8 Fract;
	Memset(Str_Arr, 30);
	if(Num<0)
    2198:	c7 01       	movw	r24, r14
    219a:	b6 01       	movw	r22, r12
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	40 e0       	ldi	r20, 0x00	; 0
    21a2:	50 e0       	ldi	r21, 0x00	; 0
    21a4:	0e 94 d3 06 	call	0xda6	; 0xda6 <__ltsf2>
    21a8:	87 fd       	sbrc	r24, 7
    21aa:	02 c0       	rjmp	.+4      	; 0x21b0 <OLED_display_Float+0x66>
    21ac:	22 24       	eor	r2, r2
    21ae:	06 c0       	rjmp	.+12     	; 0x21bc <OLED_display_Float+0x72>
	{
		Num *= -1;
    21b0:	f7 fa       	bst	r15, 7
    21b2:	f0 94       	com	r15
    21b4:	f7 f8       	bld	r15, 7
    21b6:	f0 94       	com	r15
    21b8:	22 24       	eor	r2, r2
    21ba:	23 94       	inc	r2
		Neg_flag = 1;
	}
	if(Row_C>OLED_PAGE_SIZE||Col_C>OLED_COL_SIZE-1)
    21bc:	8a a1       	ldd	r24, Y+34	; 0x22
    21be:	88 30       	cpi	r24, 0x08	; 8
    21c0:	08 f0       	brcs	.+2      	; 0x21c4 <OLED_display_Float+0x7a>
    21c2:	ae c0       	rjmp	.+348    	; 0x2320 <OLED_display_Float+0x1d6>
    21c4:	99 a1       	ldd	r25, Y+33	; 0x21
    21c6:	97 fd       	sbrc	r25, 7
    21c8:	ab c0       	rjmp	.+342    	; 0x2320 <OLED_display_Float+0x1d6>
			E_stat=E_NOK;
	else
	{
		Int_part=(int32)Num;
    21ca:	c7 01       	movw	r24, r14
    21cc:	b6 01       	movw	r22, r12
    21ce:	0e 94 61 07 	call	0xec2	; 0xec2 <__fixsfsi>
    21d2:	4b 01       	movw	r8, r22
    21d4:	5c 01       	movw	r10, r24
		Fract_part=(Num-Int_part)*1000000;
    21d6:	0e 94 03 07 	call	0xe06	; 0xe06 <__floatsisf>
    21da:	9b 01       	movw	r18, r22
    21dc:	ac 01       	movw	r20, r24
    21de:	c7 01       	movw	r24, r14
    21e0:	b6 01       	movw	r22, r12
    21e2:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <__subsf3>
    21e6:	20 e0       	ldi	r18, 0x00	; 0
    21e8:	34 e2       	ldi	r19, 0x24	; 36
    21ea:	44 e7       	ldi	r20, 0x74	; 116
    21ec:	59 e4       	ldi	r21, 0x49	; 73
    21ee:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <__mulsf3>
    21f2:	0e 94 61 07 	call	0xec2	; 0xec2 <__fixsfsi>
    21f6:	7b 01       	movw	r14, r22
    21f8:	8c 01       	movw	r16, r24
    21fa:	2b 01       	movw	r4, r22
    21fc:	38 01       	movw	r6, r16
		i_length=Num_length(Int_part);
    21fe:	c5 01       	movw	r24, r10
    2200:	b4 01       	movw	r22, r8
    2202:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <Num_length>
    2206:	38 2e       	mov	r3, r24
		f_length=Num_length(Fract_part);
    2208:	b7 01       	movw	r22, r14
    220a:	c8 01       	movw	r24, r16
    220c:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <Num_length>
    2210:	18 2f       	mov	r17, r24
		Length=i_length+f_length+1;
    2212:	38 0e       	add	r3, r24
    2214:	33 94       	inc	r3
		OLED_SET_CURSOR(Col_C,Row_C);
    2216:	89 a1       	ldd	r24, Y+33	; 0x21
    2218:	6a a1       	ldd	r22, Y+34	; 0x22
    221a:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <OLED_SET_CURSOR>
		if (Neg_flag == 1)
    221e:	e1 e0       	ldi	r30, 0x01	; 1
    2220:	2e 16       	cp	r2, r30
    2222:	11 f4       	brne	.+4      	; 0x2228 <OLED_display_Float+0xde>
			Str_Arr[0] = '-';
    2224:	8d e2       	ldi	r24, 0x2D	; 45
    2226:	89 83       	std	Y+1, r24	; 0x01
	}
	return E_stat;
}

Bool OLED_display_Float(float32 Num,uint8 Col_C,uint8 Row_C,uint8 Font)
{
    2228:	e3 2c       	mov	r14, r3
    222a:	ff 24       	eor	r15, r15
    222c:	c7 01       	movw	r24, r14
    222e:	01 97       	sbiw	r24, 0x01	; 1
    2230:	98 a3       	std	Y+32, r25	; 0x20
    2232:	8f 8f       	std	Y+31, r24	; 0x1f
    2234:	6e 01       	movw	r12, r28
    2236:	ce 0c       	add	r12, r14
    2238:	df 1c       	adc	r13, r15
    223a:	00 e0       	ldi	r16, 0x00	; 0
    223c:	26 c0       	rjmp	.+76     	; 0x228a <OLED_display_Float+0x140>
		if (Neg_flag == 1)
			Str_Arr[0] = '-';
		else {
		}
		for (Cnt = 0; Cnt < f_length; Cnt++) {
			Fract=Fract_part%10;
    223e:	b2 01       	movw	r22, r4
    2240:	c3 01       	movw	r24, r6
    2242:	2a e0       	ldi	r18, 0x0A	; 10
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	40 e0       	ldi	r20, 0x00	; 0
    2248:	50 e0       	ldi	r21, 0x00	; 0
    224a:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <__divmodsi4>
			if (Neg_flag == 0)
    224e:	22 20       	and	r2, r2
    2250:	31 f4       	brne	.+12     	; 0x225e <OLED_display_Float+0x114>
			{
				if(Fract!=0)
    2252:	66 23       	and	r22, r22
    2254:	51 f0       	breq	.+20     	; 0x226a <OLED_display_Float+0x120>
					Str_Arr[Length - Cnt - 1] = Fract+ zero;
    2256:	60 5d       	subi	r22, 0xD0	; 208
    2258:	f6 01       	movw	r30, r12
    225a:	60 83       	st	Z, r22
    225c:	08 c0       	rjmp	.+16     	; 0x226e <OLED_display_Float+0x124>
				else
					Str_Arr[Length - Cnt] = '\0';
			}
			else
			{
				if(Fract!=0)
    225e:	66 23       	and	r22, r22
    2260:	21 f0       	breq	.+8      	; 0x226a <OLED_display_Float+0x120>
					Str_Arr[Length - Cnt] = Fract+ zero;
    2262:	60 5d       	subi	r22, 0xD0	; 208
    2264:	f6 01       	movw	r30, r12
    2266:	61 83       	std	Z+1, r22	; 0x01
    2268:	02 c0       	rjmp	.+4      	; 0x226e <OLED_display_Float+0x124>
				else
					Str_Arr[Length - Cnt] = '\0';
    226a:	f6 01       	movw	r30, r12
    226c:	11 82       	std	Z+1, r1	; 0x01
			}
			Fract_part /= 10;
    226e:	b2 01       	movw	r22, r4
    2270:	c3 01       	movw	r24, r6
    2272:	2a e0       	ldi	r18, 0x0A	; 10
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	40 e0       	ldi	r20, 0x00	; 0
    2278:	50 e0       	ldi	r21, 0x00	; 0
    227a:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <__divmodsi4>
    227e:	29 01       	movw	r4, r18
    2280:	3a 01       	movw	r6, r20
		OLED_SET_CURSOR(Col_C,Row_C);
		if (Neg_flag == 1)
			Str_Arr[0] = '-';
		else {
		}
		for (Cnt = 0; Cnt < f_length; Cnt++) {
    2282:	0f 5f       	subi	r16, 0xFF	; 255
    2284:	08 94       	sec
    2286:	c1 08       	sbc	r12, r1
    2288:	d1 08       	sbc	r13, r1
    228a:	01 17       	cp	r16, r17
    228c:	c0 f2       	brcs	.-80     	; 0x223e <OLED_display_Float+0xf4>
    228e:	81 2f       	mov	r24, r17
    2290:	90 e0       	ldi	r25, 0x00	; 0
				else
					Str_Arr[Length - Cnt] = '\0';
			}
			Fract_part /= 10;
		}
		if (Neg_flag == 0)
    2292:	22 20       	and	r2, r2
    2294:	41 f4       	brne	.+16     	; 0x22a6 <OLED_display_Float+0x15c>
			Str_Arr[Length - Cnt - 1] ='.';
    2296:	f7 01       	movw	r30, r14
    2298:	e8 1b       	sub	r30, r24
    229a:	f9 0b       	sbc	r31, r25
    229c:	ec 0f       	add	r30, r28
    229e:	fd 1f       	adc	r31, r29
    22a0:	8e e2       	ldi	r24, 0x2E	; 46
    22a2:	80 83       	st	Z, r24
    22a4:	07 c0       	rjmp	.+14     	; 0x22b4 <OLED_display_Float+0x16a>
		else
			Str_Arr[Length - Cnt] = '.';
    22a6:	f7 01       	movw	r30, r14
    22a8:	e8 1b       	sub	r30, r24
    22aa:	f9 0b       	sbc	r31, r25
    22ac:	ec 0f       	add	r30, r28
    22ae:	fd 1f       	adc	r31, r29
    22b0:	8e e2       	ldi	r24, 0x2E	; 46
    22b2:	81 83       	std	Z+1, r24	; 0x01
		Cnt++;
    22b4:	d1 2e       	mov	r13, r17
    22b6:	d3 94       	inc	r13
    22b8:	3e 01       	movw	r6, r28
    22ba:	08 94       	sec
    22bc:	61 1c       	adc	r6, r1
    22be:	71 1c       	adc	r7, r1
    22c0:	24 c0       	rjmp	.+72     	; 0x230a <OLED_display_Float+0x1c0>
    22c2:	8d 2d       	mov	r24, r13
    22c4:	90 e0       	ldi	r25, 0x00	; 0
		for (; Cnt < Length; Cnt++) {
			if (Neg_flag == 0)
    22c6:	22 20       	and	r2, r2
    22c8:	19 f4       	brne	.+6      	; 0x22d0 <OLED_display_Float+0x186>
				Str_Arr[Length - Cnt - 1] = Int_part % 10 + zero;
    22ca:	0f 8d       	ldd	r16, Y+31	; 0x1f
    22cc:	18 a1       	ldd	r17, Y+32	; 0x20
    22ce:	01 c0       	rjmp	.+2      	; 0x22d2 <OLED_display_Float+0x188>
			else
				Str_Arr[Length - Cnt] = Int_part % 10 + zero;
    22d0:	87 01       	movw	r16, r14
    22d2:	08 1b       	sub	r16, r24
    22d4:	19 0b       	sbc	r17, r25
    22d6:	06 0d       	add	r16, r6
    22d8:	17 1d       	adc	r17, r7
    22da:	c5 01       	movw	r24, r10
    22dc:	b4 01       	movw	r22, r8
    22de:	2a e0       	ldi	r18, 0x0A	; 10
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	40 e0       	ldi	r20, 0x00	; 0
    22e4:	50 e0       	ldi	r21, 0x00	; 0
    22e6:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <__divmodsi4>
    22ea:	60 5d       	subi	r22, 0xD0	; 208
    22ec:	f8 01       	movw	r30, r16
    22ee:	60 83       	st	Z, r22
			Int_part /= 10;
    22f0:	c5 01       	movw	r24, r10
    22f2:	b4 01       	movw	r22, r8
    22f4:	2a e0       	ldi	r18, 0x0A	; 10
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	40 e0       	ldi	r20, 0x00	; 0
    22fa:	50 e0       	ldi	r21, 0x00	; 0
    22fc:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <__divmodsi4>
    2300:	c9 01       	movw	r24, r18
    2302:	da 01       	movw	r26, r20
    2304:	4c 01       	movw	r8, r24
    2306:	5d 01       	movw	r10, r26
		if (Neg_flag == 0)
			Str_Arr[Length - Cnt - 1] ='.';
		else
			Str_Arr[Length - Cnt] = '.';
		Cnt++;
		for (; Cnt < Length; Cnt++) {
    2308:	d3 94       	inc	r13
    230a:	d3 14       	cp	r13, r3
    230c:	d0 f2       	brcs	.-76     	; 0x22c2 <OLED_display_Float+0x178>
				Str_Arr[Length - Cnt - 1] = Int_part % 10 + zero;
			else
				Str_Arr[Length - Cnt] = Int_part % 10 + zero;
			Int_part /= 10;
		}
		OLED_DISPLAY_String(Str_Arr,Col_C,Row_C,Font);
    230e:	ce 01       	movw	r24, r28
    2310:	01 96       	adiw	r24, 0x01	; 1
    2312:	69 a1       	ldd	r22, Y+33	; 0x21
    2314:	4a a1       	ldd	r20, Y+34	; 0x22
    2316:	2b a1       	ldd	r18, Y+35	; 0x23
    2318:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <OLED_DISPLAY_String>
    231c:	81 e0       	ldi	r24, 0x01	; 1
    231e:	01 c0       	rjmp	.+2      	; 0x2322 <OLED_display_Float+0x1d8>
    2320:	80 e0       	ldi	r24, 0x00	; 0
	}
	return E_stat;
}
    2322:	a3 96       	adiw	r28, 0x23	; 35
    2324:	0f b6       	in	r0, 0x3f	; 63
    2326:	f8 94       	cli
    2328:	de bf       	out	0x3e, r29	; 62
    232a:	0f be       	out	0x3f, r0	; 63
    232c:	cd bf       	out	0x3d, r28	; 61
    232e:	cf 91       	pop	r28
    2330:	df 91       	pop	r29
    2332:	1f 91       	pop	r17
    2334:	0f 91       	pop	r16
    2336:	ff 90       	pop	r15
    2338:	ef 90       	pop	r14
    233a:	df 90       	pop	r13
    233c:	cf 90       	pop	r12
    233e:	bf 90       	pop	r11
    2340:	af 90       	pop	r10
    2342:	9f 90       	pop	r9
    2344:	8f 90       	pop	r8
    2346:	7f 90       	pop	r7
    2348:	6f 90       	pop	r6
    234a:	5f 90       	pop	r5
    234c:	4f 90       	pop	r4
    234e:	3f 90       	pop	r3
    2350:	2f 90       	pop	r2
    2352:	08 95       	ret

00002354 <OLED_display_Integer>:
		Cnt++;
	}
}

Bool OLED_display_Integer(int32 Num,uint8 Col_C,uint8 Row_C,uint8 Font)
{
    2354:	6f 92       	push	r6
    2356:	7f 92       	push	r7
    2358:	8f 92       	push	r8
    235a:	9f 92       	push	r9
    235c:	af 92       	push	r10
    235e:	bf 92       	push	r11
    2360:	cf 92       	push	r12
    2362:	df 92       	push	r13
    2364:	ef 92       	push	r14
    2366:	ff 92       	push	r15
    2368:	0f 93       	push	r16
    236a:	1f 93       	push	r17
    236c:	df 93       	push	r29
    236e:	cf 93       	push	r28
    2370:	cd b7       	in	r28, 0x3d	; 61
    2372:	de b7       	in	r29, 0x3e	; 62
    2374:	6e 97       	sbiw	r28, 0x1e	; 30
    2376:	0f b6       	in	r0, 0x3f	; 63
    2378:	f8 94       	cli
    237a:	de bf       	out	0x3e, r29	; 62
    237c:	0f be       	out	0x3f, r0	; 63
    237e:	cd bf       	out	0x3d, r28	; 61
    2380:	6b 01       	movw	r12, r22
    2382:	7c 01       	movw	r14, r24
    2384:	94 2e       	mov	r9, r20
    2386:	82 2e       	mov	r8, r18
    2388:	60 2e       	mov	r6, r16
    238a:	fe 01       	movw	r30, r28
    238c:	31 96       	adiw	r30, 0x01	; 1
}

static void Memset(uint8 *str,uint8 Len)
{
	uint8 Cnt=0;
	while(Cnt<Len)
    238e:	ce 01       	movw	r24, r28
    2390:	4f 96       	adiw	r24, 0x1f	; 31
	{
		*(str+Cnt)='\0';
    2392:	11 92       	st	Z+, r1
}

static void Memset(uint8 *str,uint8 Len)
{
	uint8 Cnt=0;
	while(Cnt<Len)
    2394:	e8 17       	cp	r30, r24
    2396:	f9 07       	cpc	r31, r25
    2398:	e1 f7       	brne	.-8      	; 0x2392 <OLED_display_Integer+0x3e>
	Bool Neg_flag=0;
	uint8 length=0;
	uint8 Str_Arr[30];
	uint8 Cnt=0;
	Memset(Str_Arr,30);
	if(Num<0)
    239a:	f7 fc       	sbrc	r15, 7
    239c:	02 c0       	rjmp	.+4      	; 0x23a2 <OLED_display_Integer+0x4e>
    239e:	aa 24       	eor	r10, r10
    23a0:	0a c0       	rjmp	.+20     	; 0x23b6 <OLED_display_Integer+0x62>
	{
		Num*=-1;
    23a2:	f0 94       	com	r15
    23a4:	e0 94       	com	r14
    23a6:	d0 94       	com	r13
    23a8:	c0 94       	com	r12
    23aa:	c1 1c       	adc	r12, r1
    23ac:	d1 1c       	adc	r13, r1
    23ae:	e1 1c       	adc	r14, r1
    23b0:	f1 1c       	adc	r15, r1
    23b2:	aa 24       	eor	r10, r10
    23b4:	a3 94       	inc	r10
		Neg_flag=1;
	}
	if(Row_C>OLED_PAGE_SIZE||Col_C>OLED_COL_SIZE-1)
    23b6:	87 e0       	ldi	r24, 0x07	; 7
    23b8:	88 15       	cp	r24, r8
    23ba:	08 f4       	brcc	.+2      	; 0x23be <OLED_display_Integer+0x6a>
    23bc:	48 c0       	rjmp	.+144    	; 0x244e <OLED_display_Integer+0xfa>
    23be:	97 fc       	sbrc	r9, 7
    23c0:	46 c0       	rjmp	.+140    	; 0x244e <OLED_display_Integer+0xfa>
		E_stat=E_NOK;
	else
	{
		OLED_SET_CURSOR(Col_C,Row_C);
    23c2:	89 2d       	mov	r24, r9
    23c4:	68 2d       	mov	r22, r8
    23c6:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <OLED_SET_CURSOR>
		length=Num_length(Num);
    23ca:	c7 01       	movw	r24, r14
    23cc:	b6 01       	movw	r22, r12
    23ce:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <Num_length>
    23d2:	78 2e       	mov	r7, r24
		if(Neg_flag==1)
    23d4:	e1 e0       	ldi	r30, 0x01	; 1
    23d6:	ae 16       	cp	r10, r30
    23d8:	11 f4       	brne	.+4      	; 0x23de <OLED_display_Integer+0x8a>
			Str_Arr[0]='-';
    23da:	8d e2       	ldi	r24, 0x2D	; 45
    23dc:	89 83       	std	Y+1, r24	; 0x01
    23de:	8e 01       	movw	r16, r28
    23e0:	07 0d       	add	r16, r7
    23e2:	11 1d       	adc	r17, r1
    23e4:	bb 24       	eor	r11, r11
    23e6:	28 c0       	rjmp	.+80     	; 0x2438 <OLED_display_Integer+0xe4>
		else{}
		for(Cnt=0;Cnt<length;Cnt++)
		{
			if(Neg_flag==0)
    23e8:	aa 20       	and	r10, r10
    23ea:	61 f4       	brne	.+24     	; 0x2404 <OLED_display_Integer+0xb0>
				Str_Arr[length-Cnt-1]=Num%10+zero;
    23ec:	c7 01       	movw	r24, r14
    23ee:	b6 01       	movw	r22, r12
    23f0:	2a e0       	ldi	r18, 0x0A	; 10
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	40 e0       	ldi	r20, 0x00	; 0
    23f6:	50 e0       	ldi	r21, 0x00	; 0
    23f8:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <__divmodsi4>
    23fc:	60 5d       	subi	r22, 0xD0	; 208
    23fe:	f8 01       	movw	r30, r16
    2400:	60 83       	st	Z, r22
    2402:	0b c0       	rjmp	.+22     	; 0x241a <OLED_display_Integer+0xc6>
			else
				Str_Arr[length-Cnt]=Num%10+zero;
    2404:	c7 01       	movw	r24, r14
    2406:	b6 01       	movw	r22, r12
    2408:	2a e0       	ldi	r18, 0x0A	; 10
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	40 e0       	ldi	r20, 0x00	; 0
    240e:	50 e0       	ldi	r21, 0x00	; 0
    2410:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <__divmodsi4>
    2414:	60 5d       	subi	r22, 0xD0	; 208
    2416:	f8 01       	movw	r30, r16
    2418:	61 83       	std	Z+1, r22	; 0x01
			Num/=10;
    241a:	c7 01       	movw	r24, r14
    241c:	b6 01       	movw	r22, r12
    241e:	2a e0       	ldi	r18, 0x0A	; 10
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	40 e0       	ldi	r20, 0x00	; 0
    2424:	50 e0       	ldi	r21, 0x00	; 0
    2426:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <__divmodsi4>
    242a:	c9 01       	movw	r24, r18
    242c:	da 01       	movw	r26, r20
    242e:	6c 01       	movw	r12, r24
    2430:	7d 01       	movw	r14, r26
		OLED_SET_CURSOR(Col_C,Row_C);
		length=Num_length(Num);
		if(Neg_flag==1)
			Str_Arr[0]='-';
		else{}
		for(Cnt=0;Cnt<length;Cnt++)
    2432:	b3 94       	inc	r11
    2434:	01 50       	subi	r16, 0x01	; 1
    2436:	10 40       	sbci	r17, 0x00	; 0
    2438:	b7 14       	cp	r11, r7
    243a:	b0 f2       	brcs	.-84     	; 0x23e8 <OLED_display_Integer+0x94>
				Str_Arr[length-Cnt-1]=Num%10+zero;
			else
				Str_Arr[length-Cnt]=Num%10+zero;
			Num/=10;
		}
		OLED_DISPLAY_String(Str_Arr,Col_C,Row_C,Font);
    243c:	ce 01       	movw	r24, r28
    243e:	01 96       	adiw	r24, 0x01	; 1
    2440:	69 2d       	mov	r22, r9
    2442:	48 2d       	mov	r20, r8
    2444:	26 2d       	mov	r18, r6
    2446:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <OLED_DISPLAY_String>
    244a:	81 e0       	ldi	r24, 0x01	; 1
    244c:	01 c0       	rjmp	.+2      	; 0x2450 <OLED_display_Integer+0xfc>
    244e:	80 e0       	ldi	r24, 0x00	; 0
	}
	return E_stat;
}
    2450:	6e 96       	adiw	r28, 0x1e	; 30
    2452:	0f b6       	in	r0, 0x3f	; 63
    2454:	f8 94       	cli
    2456:	de bf       	out	0x3e, r29	; 62
    2458:	0f be       	out	0x3f, r0	; 63
    245a:	cd bf       	out	0x3d, r28	; 61
    245c:	cf 91       	pop	r28
    245e:	df 91       	pop	r29
    2460:	1f 91       	pop	r17
    2462:	0f 91       	pop	r16
    2464:	ff 90       	pop	r15
    2466:	ef 90       	pop	r14
    2468:	df 90       	pop	r13
    246a:	cf 90       	pop	r12
    246c:	bf 90       	pop	r11
    246e:	af 90       	pop	r10
    2470:	9f 90       	pop	r9
    2472:	8f 90       	pop	r8
    2474:	7f 90       	pop	r7
    2476:	6f 90       	pop	r6
    2478:	08 95       	ret

0000247a <OLED_Init>:
}

static void oled_clear_Screen();

Bool OLED_Init()
{
    247a:	0f 93       	push	r16
    247c:	1f 93       	push	r17
    247e:	df 93       	push	r29
    2480:	cf 93       	push	r28
    2482:	00 d0       	rcall	.+0      	; 0x2484 <OLED_Init+0xa>
    2484:	00 d0       	rcall	.+0      	; 0x2486 <OLED_Init+0xc>
    2486:	0f 92       	push	r0
    2488:	cd b7       	in	r28, 0x3d	; 61
    248a:	de b7       	in	r29, 0x3e	; 62
	Bool E_Stat=E_OK;
	I2C_CONFIG_t I2C={
			.SCL_FREQ=I2C_FAST_MODE,
			.Prescaler_Freq=TWPS_PRESCALER_1,
	};
    248c:	fe 01       	movw	r30, r28
    248e:	31 96       	adiw	r30, 0x01	; 1
    2490:	85 e0       	ldi	r24, 0x05	; 5
    2492:	df 01       	movw	r26, r30
    2494:	1d 92       	st	X+, r1
    2496:	8a 95       	dec	r24
    2498:	e9 f7       	brne	.-6      	; 0x2494 <OLED_Init+0x1a>
    249a:	80 e8       	ldi	r24, 0x80	; 128
    249c:	9a e1       	ldi	r25, 0x1A	; 26
    249e:	a6 e0       	ldi	r26, 0x06	; 6
    24a0:	b0 e0       	ldi	r27, 0x00	; 0
    24a2:	89 83       	std	Y+1, r24	; 0x01
    24a4:	9a 83       	std	Y+2, r25	; 0x02
    24a6:	ab 83       	std	Y+3, r26	; 0x03
    24a8:	bc 83       	std	Y+4, r27	; 0x04
	E_Stat=I2C_INIT(&I2C);
    24aa:	cf 01       	movw	r24, r30
    24ac:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <I2C_INIT>
	DDRC |= (1 << PC2);
    24b0:	a2 9a       	sbi	0x14, 2	; 20
	PORTC &= ~(1 << PC2);
    24b2:	aa 98       	cbi	0x15, 2	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24b4:	80 e2       	ldi	r24, 0x20	; 32
    24b6:	9e e4       	ldi	r25, 0x4E	; 78
    24b8:	01 97       	sbiw	r24, 0x01	; 1
    24ba:	f1 f7       	brne	.-4      	; 0x24b8 <OLED_Init+0x3e>
	_delay_ms(10);
	PORTC |= (1 << PC2);
    24bc:	aa 9a       	sbi	0x15, 2	; 21
	E_Stat=OLED_send_cmd(OLED_DISPLAY_OFF_SLEEP);
    24be:	8e ea       	ldi	r24, 0xAE	; 174
    24c0:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
	E_Stat=OLED_send_cmd(OLED_SET_DISPLAY_CLK_DIVIDE);
    24c4:	85 ed       	ldi	r24, 0xD5	; 213
    24c6:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
	E_Stat=OLED_send_cmd(0x80);
    24ca:	80 e8       	ldi	r24, 0x80	; 128
    24cc:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
	E_Stat=OLED_send_cmd(OLED_SET_MULTIPLEX_RATIO);
    24d0:	88 ea       	ldi	r24, 0xA8	; 168
    24d2:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
	E_Stat=OLED_send_cmd(0x3F);
    24d6:	8f e3       	ldi	r24, 0x3F	; 63
    24d8:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
	E_Stat=OLED_send_cmd(OLED_SET_DISPLAY_OFFSET);
    24dc:	83 ed       	ldi	r24, 0xD3	; 211
    24de:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
	E_Stat=OLED_send_cmd(0x00);
    24e2:	80 e0       	ldi	r24, 0x00	; 0
    24e4:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
	E_Stat=OLED_send_cmd(OLED_SET_DIPLAY_START_LINE);
    24e8:	80 e4       	ldi	r24, 0x40	; 64
    24ea:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
	E_Stat=OLED_send_cmd(OLED_CHARGE_PUMP_SET);
    24ee:	8d e8       	ldi	r24, 0x8D	; 141
    24f0:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
	E_Stat=OLED_send_cmd(0x10);
    24f4:	80 e1       	ldi	r24, 0x10	; 16
    24f6:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
	E_Stat=OLED_send_cmd(OLED_SET_SEG_REMAP|0x01);
    24fa:	81 ea       	ldi	r24, 0xA1	; 161
    24fc:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
	E_Stat=OLED_send_cmd(OLED_SET_COM_OUTPUT_SCAN_DIRECTION|0x08);
    2500:	88 ec       	ldi	r24, 0xC8	; 200
    2502:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
	E_Stat=OLED_send_cmd(OLED_SET_COM_PIN);
    2506:	8a ed       	ldi	r24, 0xDA	; 218
    2508:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
	E_Stat=OLED_send_cmd(0x12);
    250c:	82 e1       	ldi	r24, 0x12	; 18
    250e:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
	E_Stat=OLED_send_cmd(OLED_SET_CONTRAST_CONTROL);
    2512:	81 e8       	ldi	r24, 0x81	; 129
    2514:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
	E_Stat=OLED_send_cmd(0x9F);
    2518:	8f e9       	ldi	r24, 0x9F	; 159
    251a:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
	E_Stat=OLED_send_cmd(OLED_SET_PRE_CHARGE_PER);
    251e:	89 ed       	ldi	r24, 0xD9	; 217
    2520:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
	E_Stat=OLED_send_cmd(0x22);
    2524:	82 e2       	ldi	r24, 0x22	; 34
    2526:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
	E_Stat=OLED_send_cmd(OLED_SET_VCOMH_DES_LEV);
    252a:	8b ed       	ldi	r24, 0xDB	; 219
    252c:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
	E_Stat=OLED_send_cmd(0x40);
    2530:	80 e4       	ldi	r24, 0x40	; 64
    2532:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
	E_Stat=OLED_send_cmd(OLED_DISPLAY_ON_RESUME);
    2536:	84 ea       	ldi	r24, 0xA4	; 164
    2538:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
	E_Stat=OLED_send_cmd(OLED_NORMAL_DISPLAY);
    253c:	86 ea       	ldi	r24, 0xA6	; 166
    253e:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
}

static void oled_clear_Screen()
{
	uint16 OLED_Cnt=0;
	OLED_send_cmd(OLED_SET_COLUMN_ADDR);
    2542:	81 e2       	ldi	r24, 0x21	; 33
    2544:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
	OLED_send_cmd(0);//reset
    2548:	80 e0       	ldi	r24, 0x00	; 0
    254a:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
	OLED_send_cmd(127);//reset
    254e:	8f e7       	ldi	r24, 0x7F	; 127
    2550:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
	OLED_send_cmd(OLED_SET_PAGE_ADDR);
    2554:	82 e2       	ldi	r24, 0x22	; 34
    2556:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
	OLED_send_cmd(0);
    255a:	80 e0       	ldi	r24, 0x00	; 0
    255c:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
	OLED_send_cmd(7);
    2560:	87 e0       	ldi	r24, 0x07	; 7
    2562:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>

	I2C_GEN_START_COND();
    2566:	84 ea       	ldi	r24, 0xA4	; 164
    2568:	86 bf       	out	0x36, r24	; 54
	I2C_WAIT();
    256a:	06 b6       	in	r0, 0x36	; 54
    256c:	07 fe       	sbrs	r0, 7
    256e:	fd cf       	rjmp	.-6      	; 0x256a <OLED_Init+0xf0>
	I2C_WRITE_BYTE(OLEDSSD_DISPLAY_ADD);
    2570:	8a e7       	ldi	r24, 0x7A	; 122
    2572:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <I2C_WRITE_BYTE>
	I2C_WRITE_BYTE(0x40);
    2576:	80 e4       	ldi	r24, 0x40	; 64
    2578:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <I2C_WRITE_BYTE>
    257c:	00 e0       	ldi	r16, 0x00	; 0
    257e:	10 e0       	ldi	r17, 0x00	; 0
	for (OLED_Cnt = 0; OLED_Cnt < 1024; OLED_Cnt++)      // Write Zeros to clear the display 128*8
	{
		I2C_WRITE_BYTE(0);
    2580:	80 e0       	ldi	r24, 0x00	; 0
    2582:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <I2C_WRITE_BYTE>

	I2C_GEN_START_COND();
	I2C_WAIT();
	I2C_WRITE_BYTE(OLEDSSD_DISPLAY_ADD);
	I2C_WRITE_BYTE(0x40);
	for (OLED_Cnt = 0; OLED_Cnt < 1024; OLED_Cnt++)      // Write Zeros to clear the display 128*8
    2586:	0f 5f       	subi	r16, 0xFF	; 255
    2588:	1f 4f       	sbci	r17, 0xFF	; 255
    258a:	b4 e0       	ldi	r27, 0x04	; 4
    258c:	00 30       	cpi	r16, 0x00	; 0
    258e:	1b 07       	cpc	r17, r27
    2590:	b9 f7       	brne	.-18     	; 0x2580 <OLED_Init+0x106>
	{
		I2C_WRITE_BYTE(0);
	}
	I2C_GEN_STOP_COND();
    2592:	84 e9       	ldi	r24, 0x94	; 148
    2594:	86 bf       	out	0x36, r24	; 54
	I2C_WAIT_STOP();
    2596:	06 b6       	in	r0, 0x36	; 54
    2598:	04 fc       	sbrc	r0, 4
    259a:	fd cf       	rjmp	.-6      	; 0x2596 <OLED_Init+0x11c>

	OLED_send_cmd(OLED_SET_COLUMN_ADDR);
    259c:	81 e2       	ldi	r24, 0x21	; 33
    259e:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
	OLED_send_cmd(0);
    25a2:	80 e0       	ldi	r24, 0x00	; 0
    25a4:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
	OLED_send_cmd(127);
    25a8:	8f e7       	ldi	r24, 0x7F	; 127
    25aa:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
	OLED_send_cmd(OLED_SET_PAGE_ADDR);
    25ae:	82 e2       	ldi	r24, 0x22	; 34
    25b0:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
	OLED_send_cmd(0);
    25b4:	80 e0       	ldi	r24, 0x00	; 0
    25b6:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
	OLED_send_cmd(7);
    25ba:	87 e0       	ldi	r24, 0x07	; 7
    25bc:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
	E_Stat=OLED_send_cmd(OLED_SET_VCOMH_DES_LEV);
	E_Stat=OLED_send_cmd(0x40);
	E_Stat=OLED_send_cmd(OLED_DISPLAY_ON_RESUME);
	E_Stat=OLED_send_cmd(OLED_NORMAL_DISPLAY);
	oled_clear_Screen();
	E_Stat=OLED_send_cmd(OLED_DISPLAY_ON);
    25c0:	8f ea       	ldi	r24, 0xAF	; 175
    25c2:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <OLED_send_cmd>
	return E_Stat;
}
    25c6:	0f 90       	pop	r0
    25c8:	0f 90       	pop	r0
    25ca:	0f 90       	pop	r0
    25cc:	0f 90       	pop	r0
    25ce:	0f 90       	pop	r0
    25d0:	cf 91       	pop	r28
    25d2:	df 91       	pop	r29
    25d4:	1f 91       	pop	r17
    25d6:	0f 91       	pop	r16
    25d8:	08 95       	ret

000025da <RTCDS1307_DATE_STR>:
		Cnt++;
	}
}

Bool RTCDS1307_DATE_STR(uint8 *Date_Buff)
{
    25da:	0f 93       	push	r16
    25dc:	1f 93       	push	r17
    25de:	df 93       	push	r29
    25e0:	cf 93       	push	r28
    25e2:	00 d0       	rcall	.+0      	; 0x25e4 <RTCDS1307_DATE_STR+0xa>
    25e4:	00 d0       	rcall	.+0      	; 0x25e6 <RTCDS1307_DATE_STR+0xc>
    25e6:	cd b7       	in	r28, 0x3d	; 61
    25e8:	de b7       	in	r29, 0x3e	; 62
    25ea:	8c 01       	movw	r16, r24
	Bool E_stat = E_OK;
	uint8 Temp_Date_Buff[4];
	E_stat = I2C_READ_NBYTES(RTCDS1307_ADD, RTCDS1307_DAY_REG, Temp_Date_Buff, 4);
    25ec:	80 ed       	ldi	r24, 0xD0	; 208
    25ee:	63 e0       	ldi	r22, 0x03	; 3
    25f0:	ae 01       	movw	r20, r28
    25f2:	4f 5f       	subi	r20, 0xFF	; 255
    25f4:	5f 4f       	sbci	r21, 0xFF	; 255
    25f6:	24 e0       	ldi	r18, 0x04	; 4
    25f8:	0e 94 2c 0c 	call	0x1858	; 0x1858 <I2C_READ_NBYTES>
    25fc:	38 2f       	mov	r19, r24
	Date_Buff[0]=ZERO+(Temp_Date_Buff[1]>>4);
    25fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2600:	89 2f       	mov	r24, r25
    2602:	82 95       	swap	r24
    2604:	8f 70       	andi	r24, 0x0F	; 15
    2606:	80 5d       	subi	r24, 0xD0	; 208
    2608:	f8 01       	movw	r30, r16
    260a:	80 83       	st	Z, r24
	Date_Buff[1]=ZERO+(Temp_Date_Buff[1]&0x0F);
    260c:	9f 70       	andi	r25, 0x0F	; 15
    260e:	90 5d       	subi	r25, 0xD0	; 208
    2610:	91 83       	std	Z+1, r25	; 0x01
	Date_Buff[2]='/';
    2612:	2f e2       	ldi	r18, 0x2F	; 47
    2614:	22 83       	std	Z+2, r18	; 0x02
	Date_Buff[3] = ZERO + (Temp_Date_Buff[2] >> 4);
    2616:	9b 81       	ldd	r25, Y+3	; 0x03
    2618:	89 2f       	mov	r24, r25
    261a:	82 95       	swap	r24
    261c:	8f 70       	andi	r24, 0x0F	; 15
    261e:	80 5d       	subi	r24, 0xD0	; 208
    2620:	83 83       	std	Z+3, r24	; 0x03
	Date_Buff[4] = ZERO + (Temp_Date_Buff[2] & 0x0F);
    2622:	9f 70       	andi	r25, 0x0F	; 15
    2624:	90 5d       	subi	r25, 0xD0	; 208
    2626:	94 83       	std	Z+4, r25	; 0x04
	Date_Buff[5] = '/';
    2628:	25 83       	std	Z+5, r18	; 0x05
	Date_Buff[6] = '2';
    262a:	82 e3       	ldi	r24, 0x32	; 50
    262c:	86 83       	std	Z+6, r24	; 0x06
	Date_Buff[7] = '0';
    262e:	80 e3       	ldi	r24, 0x30	; 48
    2630:	87 83       	std	Z+7, r24	; 0x07
	Date_Buff[8] = ZERO + (Temp_Date_Buff[3] >> 4);
    2632:	9c 81       	ldd	r25, Y+4	; 0x04
    2634:	89 2f       	mov	r24, r25
    2636:	82 95       	swap	r24
    2638:	8f 70       	andi	r24, 0x0F	; 15
    263a:	80 5d       	subi	r24, 0xD0	; 208
    263c:	80 87       	std	Z+8, r24	; 0x08
	Date_Buff[9] = ZERO + (Temp_Date_Buff[3] & 0x0F);
    263e:	9f 70       	andi	r25, 0x0F	; 15
    2640:	90 5d       	subi	r25, 0xD0	; 208
    2642:	91 87       	std	Z+9, r25	; 0x09
	switch(Temp_Date_Buff[0])
    2644:	89 81       	ldd	r24, Y+1	; 0x01
    2646:	84 30       	cpi	r24, 0x04	; 4
    2648:	09 f4       	brne	.+2      	; 0x264c <RTCDS1307_DATE_STR+0x72>
    264a:	47 c0       	rjmp	.+142    	; 0x26da <RTCDS1307_DATE_STR+0x100>
    264c:	85 30       	cpi	r24, 0x05	; 5
    264e:	40 f4       	brcc	.+16     	; 0x2660 <RTCDS1307_DATE_STR+0x86>
    2650:	82 30       	cpi	r24, 0x02	; 2
    2652:	09 f1       	breq	.+66     	; 0x2696 <RTCDS1307_DATE_STR+0xbc>
    2654:	83 30       	cpi	r24, 0x03	; 3
    2656:	80 f5       	brcc	.+96     	; 0x26b8 <RTCDS1307_DATE_STR+0xde>
    2658:	81 30       	cpi	r24, 0x01	; 1
    265a:	09 f0       	breq	.+2      	; 0x265e <RTCDS1307_DATE_STR+0x84>
    265c:	81 c0       	rjmp	.+258    	; 0x2760 <RTCDS1307_DATE_STR+0x186>
    265e:	0a c0       	rjmp	.+20     	; 0x2674 <RTCDS1307_DATE_STR+0x9a>
    2660:	86 30       	cpi	r24, 0x06	; 6
    2662:	09 f4       	brne	.+2      	; 0x2666 <RTCDS1307_DATE_STR+0x8c>
    2664:	5c c0       	rjmp	.+184    	; 0x271e <RTCDS1307_DATE_STR+0x144>
    2666:	86 30       	cpi	r24, 0x06	; 6
    2668:	08 f4       	brcc	.+2      	; 0x266c <RTCDS1307_DATE_STR+0x92>
    266a:	48 c0       	rjmp	.+144    	; 0x26fc <RTCDS1307_DATE_STR+0x122>
    266c:	87 30       	cpi	r24, 0x07	; 7
    266e:	09 f0       	breq	.+2      	; 0x2672 <RTCDS1307_DATE_STR+0x98>
    2670:	77 c0       	rjmp	.+238    	; 0x2760 <RTCDS1307_DATE_STR+0x186>
    2672:	66 c0       	rjmp	.+204    	; 0x2740 <RTCDS1307_DATE_STR+0x166>
	{
		case SUNDAY:
			Strcpy(Date_Buff+10," Sun");
    2674:	c8 01       	movw	r24, r16
    2676:	0a 96       	adiw	r24, 0x0a	; 10
    2678:	20 e0       	ldi	r18, 0x00	; 0
    267a:	04 c0       	rjmp	.+8      	; 0x2684 <RTCDS1307_DATE_STR+0xaa>
static void Strcpy(uint8 *Dest,int8 *Src)
{
	uint8 Cnt=0;
	while(*(Src+Cnt)!='\0')
	{
		*(Dest+Cnt)=*(Src+Cnt);
    267c:	a8 0f       	add	r26, r24
    267e:	b9 1f       	adc	r27, r25
    2680:	ec 93       	st	X, r30
		Cnt++;
    2682:	2f 5f       	subi	r18, 0xFF	; 255
}

static void Strcpy(uint8 *Dest,int8 *Src)
{
	uint8 Cnt=0;
	while(*(Src+Cnt)!='\0')
    2684:	a2 2f       	mov	r26, r18
    2686:	b0 e0       	ldi	r27, 0x00	; 0
    2688:	fd 01       	movw	r30, r26
    268a:	e0 5a       	subi	r30, 0xA0	; 160
    268c:	ff 4f       	sbci	r31, 0xFF	; 255
    268e:	e0 81       	ld	r30, Z
    2690:	ee 23       	and	r30, r30
    2692:	a1 f7       	brne	.-24     	; 0x267c <RTCDS1307_DATE_STR+0xa2>
    2694:	65 c0       	rjmp	.+202    	; 0x2760 <RTCDS1307_DATE_STR+0x186>
	{
		case SUNDAY:
			Strcpy(Date_Buff+10," Sun");
			break;
		case MONDAY:
			Strcpy(Date_Buff+10," Mon");
    2696:	c8 01       	movw	r24, r16
    2698:	0a 96       	adiw	r24, 0x0a	; 10
    269a:	20 e0       	ldi	r18, 0x00	; 0
    269c:	04 c0       	rjmp	.+8      	; 0x26a6 <RTCDS1307_DATE_STR+0xcc>
static void Strcpy(uint8 *Dest,int8 *Src)
{
	uint8 Cnt=0;
	while(*(Src+Cnt)!='\0')
	{
		*(Dest+Cnt)=*(Src+Cnt);
    269e:	a8 0f       	add	r26, r24
    26a0:	b9 1f       	adc	r27, r25
    26a2:	ec 93       	st	X, r30
		Cnt++;
    26a4:	2f 5f       	subi	r18, 0xFF	; 255
}

static void Strcpy(uint8 *Dest,int8 *Src)
{
	uint8 Cnt=0;
	while(*(Src+Cnt)!='\0')
    26a6:	a2 2f       	mov	r26, r18
    26a8:	b0 e0       	ldi	r27, 0x00	; 0
    26aa:	fd 01       	movw	r30, r26
    26ac:	eb 59       	subi	r30, 0x9B	; 155
    26ae:	ff 4f       	sbci	r31, 0xFF	; 255
    26b0:	e0 81       	ld	r30, Z
    26b2:	ee 23       	and	r30, r30
    26b4:	a1 f7       	brne	.-24     	; 0x269e <RTCDS1307_DATE_STR+0xc4>
    26b6:	54 c0       	rjmp	.+168    	; 0x2760 <RTCDS1307_DATE_STR+0x186>
			break;
		case MONDAY:
			Strcpy(Date_Buff+10," Mon");
			break;
		case TUESDAY:
			Strcpy(Date_Buff+10," Tue");
    26b8:	c8 01       	movw	r24, r16
    26ba:	0a 96       	adiw	r24, 0x0a	; 10
    26bc:	20 e0       	ldi	r18, 0x00	; 0
    26be:	04 c0       	rjmp	.+8      	; 0x26c8 <RTCDS1307_DATE_STR+0xee>
static void Strcpy(uint8 *Dest,int8 *Src)
{
	uint8 Cnt=0;
	while(*(Src+Cnt)!='\0')
	{
		*(Dest+Cnt)=*(Src+Cnt);
    26c0:	a8 0f       	add	r26, r24
    26c2:	b9 1f       	adc	r27, r25
    26c4:	ec 93       	st	X, r30
		Cnt++;
    26c6:	2f 5f       	subi	r18, 0xFF	; 255
}

static void Strcpy(uint8 *Dest,int8 *Src)
{
	uint8 Cnt=0;
	while(*(Src+Cnt)!='\0')
    26c8:	a2 2f       	mov	r26, r18
    26ca:	b0 e0       	ldi	r27, 0x00	; 0
    26cc:	fd 01       	movw	r30, r26
    26ce:	e6 59       	subi	r30, 0x96	; 150
    26d0:	ff 4f       	sbci	r31, 0xFF	; 255
    26d2:	e0 81       	ld	r30, Z
    26d4:	ee 23       	and	r30, r30
    26d6:	a1 f7       	brne	.-24     	; 0x26c0 <RTCDS1307_DATE_STR+0xe6>
    26d8:	43 c0       	rjmp	.+134    	; 0x2760 <RTCDS1307_DATE_STR+0x186>
			break;
		case TUESDAY:
			Strcpy(Date_Buff+10," Tue");
			break;
		case WEDNESDAY:
			Strcpy(Date_Buff+10," Wed");
    26da:	c8 01       	movw	r24, r16
    26dc:	0a 96       	adiw	r24, 0x0a	; 10
    26de:	20 e0       	ldi	r18, 0x00	; 0
    26e0:	04 c0       	rjmp	.+8      	; 0x26ea <RTCDS1307_DATE_STR+0x110>
static void Strcpy(uint8 *Dest,int8 *Src)
{
	uint8 Cnt=0;
	while(*(Src+Cnt)!='\0')
	{
		*(Dest+Cnt)=*(Src+Cnt);
    26e2:	a8 0f       	add	r26, r24
    26e4:	b9 1f       	adc	r27, r25
    26e6:	ec 93       	st	X, r30
		Cnt++;
    26e8:	2f 5f       	subi	r18, 0xFF	; 255
}

static void Strcpy(uint8 *Dest,int8 *Src)
{
	uint8 Cnt=0;
	while(*(Src+Cnt)!='\0')
    26ea:	a2 2f       	mov	r26, r18
    26ec:	b0 e0       	ldi	r27, 0x00	; 0
    26ee:	fd 01       	movw	r30, r26
    26f0:	e1 59       	subi	r30, 0x91	; 145
    26f2:	ff 4f       	sbci	r31, 0xFF	; 255
    26f4:	e0 81       	ld	r30, Z
    26f6:	ee 23       	and	r30, r30
    26f8:	a1 f7       	brne	.-24     	; 0x26e2 <RTCDS1307_DATE_STR+0x108>
    26fa:	32 c0       	rjmp	.+100    	; 0x2760 <RTCDS1307_DATE_STR+0x186>
			break;
		case WEDNESDAY:
			Strcpy(Date_Buff+10," Wed");
			break;
		case THURSDAY:
			Strcpy(Date_Buff+10," Thur");
    26fc:	c8 01       	movw	r24, r16
    26fe:	0a 96       	adiw	r24, 0x0a	; 10
    2700:	20 e0       	ldi	r18, 0x00	; 0
    2702:	04 c0       	rjmp	.+8      	; 0x270c <RTCDS1307_DATE_STR+0x132>
static void Strcpy(uint8 *Dest,int8 *Src)
{
	uint8 Cnt=0;
	while(*(Src+Cnt)!='\0')
	{
		*(Dest+Cnt)=*(Src+Cnt);
    2704:	a8 0f       	add	r26, r24
    2706:	b9 1f       	adc	r27, r25
    2708:	ec 93       	st	X, r30
		Cnt++;
    270a:	2f 5f       	subi	r18, 0xFF	; 255
}

static void Strcpy(uint8 *Dest,int8 *Src)
{
	uint8 Cnt=0;
	while(*(Src+Cnt)!='\0')
    270c:	a2 2f       	mov	r26, r18
    270e:	b0 e0       	ldi	r27, 0x00	; 0
    2710:	fd 01       	movw	r30, r26
    2712:	ec 58       	subi	r30, 0x8C	; 140
    2714:	ff 4f       	sbci	r31, 0xFF	; 255
    2716:	e0 81       	ld	r30, Z
    2718:	ee 23       	and	r30, r30
    271a:	a1 f7       	brne	.-24     	; 0x2704 <RTCDS1307_DATE_STR+0x12a>
    271c:	21 c0       	rjmp	.+66     	; 0x2760 <RTCDS1307_DATE_STR+0x186>
			break;
		case THURSDAY:
			Strcpy(Date_Buff+10," Thur");
			break;
		case FRIDAY:
			Strcpy(Date_Buff+10," Fri");
    271e:	c8 01       	movw	r24, r16
    2720:	0a 96       	adiw	r24, 0x0a	; 10
    2722:	20 e0       	ldi	r18, 0x00	; 0
    2724:	04 c0       	rjmp	.+8      	; 0x272e <RTCDS1307_DATE_STR+0x154>
static void Strcpy(uint8 *Dest,int8 *Src)
{
	uint8 Cnt=0;
	while(*(Src+Cnt)!='\0')
	{
		*(Dest+Cnt)=*(Src+Cnt);
    2726:	a8 0f       	add	r26, r24
    2728:	b9 1f       	adc	r27, r25
    272a:	ec 93       	st	X, r30
		Cnt++;
    272c:	2f 5f       	subi	r18, 0xFF	; 255
}

static void Strcpy(uint8 *Dest,int8 *Src)
{
	uint8 Cnt=0;
	while(*(Src+Cnt)!='\0')
    272e:	a2 2f       	mov	r26, r18
    2730:	b0 e0       	ldi	r27, 0x00	; 0
    2732:	fd 01       	movw	r30, r26
    2734:	e6 58       	subi	r30, 0x86	; 134
    2736:	ff 4f       	sbci	r31, 0xFF	; 255
    2738:	e0 81       	ld	r30, Z
    273a:	ee 23       	and	r30, r30
    273c:	a1 f7       	brne	.-24     	; 0x2726 <RTCDS1307_DATE_STR+0x14c>
    273e:	10 c0       	rjmp	.+32     	; 0x2760 <RTCDS1307_DATE_STR+0x186>
			break;
		case FRIDAY:
			Strcpy(Date_Buff+10," Fri");
			break;
		case SATURDAY:
			Strcpy(Date_Buff+10," Sat");
    2740:	c8 01       	movw	r24, r16
    2742:	0a 96       	adiw	r24, 0x0a	; 10
    2744:	20 e0       	ldi	r18, 0x00	; 0
    2746:	04 c0       	rjmp	.+8      	; 0x2750 <RTCDS1307_DATE_STR+0x176>
static void Strcpy(uint8 *Dest,int8 *Src)
{
	uint8 Cnt=0;
	while(*(Src+Cnt)!='\0')
	{
		*(Dest+Cnt)=*(Src+Cnt);
    2748:	a8 0f       	add	r26, r24
    274a:	b9 1f       	adc	r27, r25
    274c:	ec 93       	st	X, r30
		Cnt++;
    274e:	2f 5f       	subi	r18, 0xFF	; 255
}

static void Strcpy(uint8 *Dest,int8 *Src)
{
	uint8 Cnt=0;
	while(*(Src+Cnt)!='\0')
    2750:	a2 2f       	mov	r26, r18
    2752:	b0 e0       	ldi	r27, 0x00	; 0
    2754:	fd 01       	movw	r30, r26
    2756:	e1 58       	subi	r30, 0x81	; 129
    2758:	ff 4f       	sbci	r31, 0xFF	; 255
    275a:	e0 81       	ld	r30, Z
    275c:	ee 23       	and	r30, r30
    275e:	a1 f7       	brne	.-24     	; 0x2748 <RTCDS1307_DATE_STR+0x16e>
		case SATURDAY:
			Strcpy(Date_Buff+10," Sat");
			break;
	}
	return E_stat;
}
    2760:	83 2f       	mov	r24, r19
    2762:	0f 90       	pop	r0
    2764:	0f 90       	pop	r0
    2766:	0f 90       	pop	r0
    2768:	0f 90       	pop	r0
    276a:	cf 91       	pop	r28
    276c:	df 91       	pop	r29
    276e:	1f 91       	pop	r17
    2770:	0f 91       	pop	r16
    2772:	08 95       	ret

00002774 <RTCDS1307_TIME_STR>:
	*(Date_Buff+3)=(*(Date_Buff+3)>>4)*10+*(Date_Buff+3);
	return E_stat;
}

Bool RTCDS1307_TIME_STR(uint8 *Time_Buff)
{
    2774:	0f 93       	push	r16
    2776:	1f 93       	push	r17
    2778:	df 93       	push	r29
    277a:	cf 93       	push	r28
    277c:	00 d0       	rcall	.+0      	; 0x277e <RTCDS1307_TIME_STR+0xa>
    277e:	0f 92       	push	r0
    2780:	cd b7       	in	r28, 0x3d	; 61
    2782:	de b7       	in	r29, 0x3e	; 62
    2784:	8c 01       	movw	r16, r24
	Bool E_stat = E_OK;
	Bool Hrs_flag=0;
	uint8 Temp_Time_Buff[3];
	E_stat = I2C_READ_NBYTES(RTCDS1307_ADD, RTCDS1307_SEC_REG,Temp_Time_Buff, 3);
    2786:	80 ed       	ldi	r24, 0xD0	; 208
    2788:	60 e0       	ldi	r22, 0x00	; 0
    278a:	ae 01       	movw	r20, r28
    278c:	4f 5f       	subi	r20, 0xFF	; 255
    278e:	5f 4f       	sbci	r21, 0xFF	; 255
    2790:	23 e0       	ldi	r18, 0x03	; 3
    2792:	0e 94 2c 0c 	call	0x1858	; 0x1858 <I2C_READ_NBYTES>
    2796:	58 2f       	mov	r21, r24
	if(BIT_IS_SET(Temp_Time_Buff[2],TW_TFR_MODE_POS))
    2798:	4b 81       	ldd	r20, Y+3	; 0x03
    279a:	84 2f       	mov	r24, r20
    279c:	82 95       	swap	r24
    279e:	86 95       	lsr	r24
    27a0:	86 95       	lsr	r24
    27a2:	83 70       	andi	r24, 0x03	; 3
    27a4:	24 2f       	mov	r18, r20
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	94 2f       	mov	r25, r20
    27aa:	9f 70       	andi	r25, 0x0F	; 15
    27ac:	80 ff       	sbrs	r24, 0
    27ae:	17 c0       	rjmp	.+46     	; 0x27de <RTCDS1307_TIME_STR+0x6a>
	{
		Time_Buff[0]=ZERO+((Temp_Time_Buff[2]&0x10)>>4);
    27b0:	20 71       	andi	r18, 0x10	; 16
    27b2:	30 70       	andi	r19, 0x00	; 0
    27b4:	64 e0       	ldi	r22, 0x04	; 4
    27b6:	35 95       	asr	r19
    27b8:	27 95       	ror	r18
    27ba:	6a 95       	dec	r22
    27bc:	e1 f7       	brne	.-8      	; 0x27b6 <RTCDS1307_TIME_STR+0x42>
    27be:	82 2f       	mov	r24, r18
    27c0:	80 5d       	subi	r24, 0xD0	; 208
    27c2:	f8 01       	movw	r30, r16
    27c4:	80 83       	st	Z, r24
		Time_Buff[1]=ZERO+(Temp_Time_Buff[2]&0x0F);
    27c6:	90 5d       	subi	r25, 0xD0	; 208
    27c8:	91 83       	std	Z+1, r25	; 0x01
		if(BIT_IS_SET(Temp_Time_Buff[2],AM_PM_MODE_POS))
    27ca:	84 2f       	mov	r24, r20
    27cc:	82 95       	swap	r24
    27ce:	86 95       	lsr	r24
    27d0:	87 70       	andi	r24, 0x07	; 7
    27d2:	80 fd       	sbrc	r24, 0
    27d4:	02 c0       	rjmp	.+4      	; 0x27da <RTCDS1307_TIME_STR+0x66>
    27d6:	32 e0       	ldi	r19, 0x02	; 2
    27d8:	10 c0       	rjmp	.+32     	; 0x27fa <RTCDS1307_TIME_STR+0x86>
    27da:	31 e0       	ldi	r19, 0x01	; 1
    27dc:	0e c0       	rjmp	.+28     	; 0x27fa <RTCDS1307_TIME_STR+0x86>
		else
			Hrs_flag=2;//AM
	}
	else
	{
		Time_Buff[0]=ZERO+((Temp_Time_Buff[2]&0x30)>>4);
    27de:	20 73       	andi	r18, 0x30	; 48
    27e0:	30 70       	andi	r19, 0x00	; 0
    27e2:	84 e0       	ldi	r24, 0x04	; 4
    27e4:	35 95       	asr	r19
    27e6:	27 95       	ror	r18
    27e8:	8a 95       	dec	r24
    27ea:	e1 f7       	brne	.-8      	; 0x27e4 <RTCDS1307_TIME_STR+0x70>
    27ec:	82 2f       	mov	r24, r18
    27ee:	80 5d       	subi	r24, 0xD0	; 208
    27f0:	f8 01       	movw	r30, r16
    27f2:	80 83       	st	Z, r24
		Time_Buff[1]=ZERO+(Temp_Time_Buff[2]&0x0F);
    27f4:	90 5d       	subi	r25, 0xD0	; 208
    27f6:	91 83       	std	Z+1, r25	; 0x01
    27f8:	30 e0       	ldi	r19, 0x00	; 0
	}
	Time_Buff[2] = ':';
    27fa:	2a e3       	ldi	r18, 0x3A	; 58
    27fc:	f8 01       	movw	r30, r16
    27fe:	22 83       	std	Z+2, r18	; 0x02
	Time_Buff[3] = ZERO + (Temp_Time_Buff[1] >> 4);
    2800:	9a 81       	ldd	r25, Y+2	; 0x02
    2802:	89 2f       	mov	r24, r25
    2804:	82 95       	swap	r24
    2806:	8f 70       	andi	r24, 0x0F	; 15
    2808:	80 5d       	subi	r24, 0xD0	; 208
    280a:	83 83       	std	Z+3, r24	; 0x03
	Time_Buff[4] = ZERO + (Temp_Time_Buff[1] & 0x0F);
    280c:	9f 70       	andi	r25, 0x0F	; 15
    280e:	90 5d       	subi	r25, 0xD0	; 208
    2810:	94 83       	std	Z+4, r25	; 0x04
	Time_Buff[5] = ':';
    2812:	25 83       	std	Z+5, r18	; 0x05
	Time_Buff[6] = ZERO + (Temp_Time_Buff[0] >> 4);
    2814:	99 81       	ldd	r25, Y+1	; 0x01
    2816:	89 2f       	mov	r24, r25
    2818:	82 95       	swap	r24
    281a:	8f 70       	andi	r24, 0x0F	; 15
    281c:	80 5d       	subi	r24, 0xD0	; 208
    281e:	86 83       	std	Z+6, r24	; 0x06
	Time_Buff[7] = ZERO + (Temp_Time_Buff[0] & 0x0F);
    2820:	9f 70       	andi	r25, 0x0F	; 15
    2822:	90 5d       	subi	r25, 0xD0	; 208
    2824:	97 83       	std	Z+7, r25	; 0x07
	if(Hrs_flag==1)
    2826:	31 30       	cpi	r19, 0x01	; 1
    2828:	21 f4       	brne	.+8      	; 0x2832 <RTCDS1307_TIME_STR+0xbe>
	{
		Time_Buff[8] = ' ';
    282a:	80 e2       	ldi	r24, 0x20	; 32
    282c:	80 87       	std	Z+8, r24	; 0x08
		Time_Buff[9] = 'P';
    282e:	80 e5       	ldi	r24, 0x50	; 80
    2830:	06 c0       	rjmp	.+12     	; 0x283e <RTCDS1307_TIME_STR+0xca>
		Time_Buff[10] = 'M';
		Time_Buff[11] = NULLChar;
	}
	else if(Hrs_flag==2)
    2832:	32 30       	cpi	r19, 0x02	; 2
    2834:	49 f4       	brne	.+18     	; 0x2848 <RTCDS1307_TIME_STR+0xd4>
	{
		Time_Buff[8] = ' ';
    2836:	80 e2       	ldi	r24, 0x20	; 32
    2838:	f8 01       	movw	r30, r16
    283a:	80 87       	std	Z+8, r24	; 0x08
		Time_Buff[9] = 'A';
    283c:	81 e4       	ldi	r24, 0x41	; 65
    283e:	81 87       	std	Z+9, r24	; 0x09
		Time_Buff[10] = 'M';
    2840:	8d e4       	ldi	r24, 0x4D	; 77
    2842:	82 87       	std	Z+10, r24	; 0x0a
		Time_Buff[11] = NULLChar;
    2844:	13 86       	std	Z+11, r1	; 0x0b
    2846:	02 c0       	rjmp	.+4      	; 0x284c <RTCDS1307_TIME_STR+0xd8>
	}
	else{
		Time_Buff[8] = NULLChar;
    2848:	f8 01       	movw	r30, r16
    284a:	10 86       	std	Z+8, r1	; 0x08
	}
	return E_stat;
}
    284c:	85 2f       	mov	r24, r21
    284e:	0f 90       	pop	r0
    2850:	0f 90       	pop	r0
    2852:	0f 90       	pop	r0
    2854:	cf 91       	pop	r28
    2856:	df 91       	pop	r29
    2858:	1f 91       	pop	r17
    285a:	0f 91       	pop	r16
    285c:	08 95       	ret

0000285e <RTCDS1307_GET_DATE>:
	Time_Buff[2]=((Time_Buff[2])>>4)*10+(Time_Buff[2]&0x0F);
	return E_stat;
}

Bool RTCDS1307_GET_DATE(uint8 *Date_Buff)
{
    285e:	0f 93       	push	r16
    2860:	1f 93       	push	r17
    2862:	8c 01       	movw	r16, r24
	Bool E_stat=E_OK;
	E_stat=I2C_READ_NBYTES(RTCDS1307_ADD,RTCDS1307_DAY_REG,Date_Buff,4);
    2864:	80 ed       	ldi	r24, 0xD0	; 208
    2866:	63 e0       	ldi	r22, 0x03	; 3
    2868:	a8 01       	movw	r20, r16
    286a:	24 e0       	ldi	r18, 0x04	; 4
    286c:	0e 94 2c 0c 	call	0x1858	; 0x1858 <I2C_READ_NBYTES>
	*Date_Buff=*Date_Buff&0x07;
    2870:	f8 01       	movw	r30, r16
    2872:	90 81       	ld	r25, Z
    2874:	97 70       	andi	r25, 0x07	; 7
    2876:	90 83       	st	Z, r25
	*(Date_Buff+1)=(*(Date_Buff+1)>>4)*10+*(Date_Buff+1);
    2878:	91 81       	ldd	r25, Z+1	; 0x01
    287a:	29 2f       	mov	r18, r25
    287c:	22 95       	swap	r18
    287e:	2f 70       	andi	r18, 0x0F	; 15
    2880:	4a e0       	ldi	r20, 0x0A	; 10
    2882:	24 9f       	mul	r18, r20
    2884:	90 01       	movw	r18, r0
    2886:	11 24       	eor	r1, r1
    2888:	92 0f       	add	r25, r18
    288a:	91 83       	std	Z+1, r25	; 0x01
	*(Date_Buff+2)=(*(Date_Buff+2)>>4)*10+*(Date_Buff+2);
    288c:	92 81       	ldd	r25, Z+2	; 0x02
    288e:	29 2f       	mov	r18, r25
    2890:	22 95       	swap	r18
    2892:	2f 70       	andi	r18, 0x0F	; 15
    2894:	24 9f       	mul	r18, r20
    2896:	90 01       	movw	r18, r0
    2898:	11 24       	eor	r1, r1
    289a:	92 0f       	add	r25, r18
    289c:	92 83       	std	Z+2, r25	; 0x02
	*(Date_Buff+3)=(*(Date_Buff+3)>>4)*10+*(Date_Buff+3);
    289e:	93 81       	ldd	r25, Z+3	; 0x03
    28a0:	29 2f       	mov	r18, r25
    28a2:	22 95       	swap	r18
    28a4:	2f 70       	andi	r18, 0x0F	; 15
    28a6:	24 9f       	mul	r18, r20
    28a8:	90 01       	movw	r18, r0
    28aa:	11 24       	eor	r1, r1
    28ac:	92 0f       	add	r25, r18
    28ae:	93 83       	std	Z+3, r25	; 0x03
	return E_stat;
}
    28b0:	1f 91       	pop	r17
    28b2:	0f 91       	pop	r16
    28b4:	08 95       	ret

000028b6 <RTCDS1307_GET_TIME>:
	}
	return E_stat;
}

Bool RTCDS1307_GET_TIME(uint8 *Time_Buff)
{
    28b6:	0f 93       	push	r16
    28b8:	1f 93       	push	r17
    28ba:	8c 01       	movw	r16, r24
	Bool E_stat=E_OK;
	uint8 Temp;
	E_stat=I2C_READ_NBYTES(RTCDS1307_ADD,RTCDS1307_SEC_REG,Time_Buff,3);
    28bc:	80 ed       	ldi	r24, 0xD0	; 208
    28be:	60 e0       	ldi	r22, 0x00	; 0
    28c0:	a8 01       	movw	r20, r16
    28c2:	23 e0       	ldi	r18, 0x03	; 3
    28c4:	0e 94 2c 0c 	call	0x1858	; 0x1858 <I2C_READ_NBYTES>
	Time_Buff[0]=(Temp>>4)*10+(Time_Buff[0]&0x0F);
    28c8:	f8 01       	movw	r30, r16
    28ca:	90 81       	ld	r25, Z
    28cc:	4a e0       	ldi	r20, 0x0A	; 10
    28ce:	9f 70       	andi	r25, 0x0F	; 15
    28d0:	90 83       	st	Z, r25
	Time_Buff[1]=((Time_Buff[1])>>4)*10+(Time_Buff[1]&0xF);
    28d2:	91 81       	ldd	r25, Z+1	; 0x01
    28d4:	29 2f       	mov	r18, r25
    28d6:	22 95       	swap	r18
    28d8:	2f 70       	andi	r18, 0x0F	; 15
    28da:	24 9f       	mul	r18, r20
    28dc:	90 01       	movw	r18, r0
    28de:	11 24       	eor	r1, r1
    28e0:	9f 70       	andi	r25, 0x0F	; 15
    28e2:	92 0f       	add	r25, r18
    28e4:	91 83       	std	Z+1, r25	; 0x01
	Temp=Time_Buff[2]&0xE0;
	Time_Buff[2]&=0x1F;
    28e6:	92 81       	ldd	r25, Z+2	; 0x02
    28e8:	29 2f       	mov	r18, r25
    28ea:	2f 71       	andi	r18, 0x1F	; 31
	Time_Buff[2]=((Time_Buff[2])>>4)*10+(Time_Buff[2]&0x0F);
    28ec:	22 95       	swap	r18
    28ee:	2f 70       	andi	r18, 0x0F	; 15
    28f0:	24 9f       	mul	r18, r20
    28f2:	90 01       	movw	r18, r0
    28f4:	11 24       	eor	r1, r1
    28f6:	9f 70       	andi	r25, 0x0F	; 15
    28f8:	92 0f       	add	r25, r18
    28fa:	92 83       	std	Z+2, r25	; 0x02
	return E_stat;
}
    28fc:	1f 91       	pop	r17
    28fe:	0f 91       	pop	r16
    2900:	08 95       	ret

00002902 <RTCDS1307_SET_DATE>:
	}
	return E_stat;
}

Bool RTCDS1307_SET_DATE(uint8 Day,uint8 Date,uint8 Month,uint8 Year)
{
    2902:	df 93       	push	r29
    2904:	cf 93       	push	r28
    2906:	00 d0       	rcall	.+0      	; 0x2908 <RTCDS1307_SET_DATE+0x6>
    2908:	00 d0       	rcall	.+0      	; 0x290a <RTCDS1307_SET_DATE+0x8>
    290a:	cd b7       	in	r28, 0x3d	; 61
    290c:	de b7       	in	r29, 0x3e	; 62
    290e:	98 2f       	mov	r25, r24
    2910:	36 2f       	mov	r19, r22
    2912:	52 2f       	mov	r21, r18
	Bool E_stat=E_OK;
	uint8 Date_Arr[4]={0};
	if((Date>31||Date<1)||(Month>12||Month<1)||(Year>99))
    2914:	86 2f       	mov	r24, r22
    2916:	81 50       	subi	r24, 0x01	; 1
    2918:	8f 31       	cpi	r24, 0x1F	; 31
    291a:	90 f5       	brcc	.+100    	; 0x2980 <RTCDS1307_SET_DATE+0x7e>
    291c:	84 2f       	mov	r24, r20
    291e:	81 50       	subi	r24, 0x01	; 1
    2920:	8c 30       	cpi	r24, 0x0C	; 12
    2922:	70 f5       	brcc	.+92     	; 0x2980 <RTCDS1307_SET_DATE+0x7e>
    2924:	24 36       	cpi	r18, 0x64	; 100
    2926:	60 f5       	brcc	.+88     	; 0x2980 <RTCDS1307_SET_DATE+0x7e>
		E_stat=E_NOK;
	if(E_stat==E_OK)
	{
		Date_Arr[0]=Day;
    2928:	99 83       	std	Y+1, r25	; 0x01
		Date_Arr[1]=((Date/10)<<4)+Date%10;
    292a:	86 2f       	mov	r24, r22
    292c:	6a e0       	ldi	r22, 0x0A	; 10
    292e:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <__udivmodqi4>
    2932:	28 2f       	mov	r18, r24
    2934:	22 95       	swap	r18
    2936:	20 7f       	andi	r18, 0xF0	; 240
    2938:	83 2f       	mov	r24, r19
    293a:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <__udivmodqi4>
    293e:	29 0f       	add	r18, r25
    2940:	2a 83       	std	Y+2, r18	; 0x02
		Date_Arr[2]=((Month/10)<<4)+Month%10;
    2942:	84 2f       	mov	r24, r20
    2944:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <__udivmodqi4>
    2948:	28 2f       	mov	r18, r24
    294a:	22 95       	swap	r18
    294c:	20 7f       	andi	r18, 0xF0	; 240
    294e:	84 2f       	mov	r24, r20
    2950:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <__udivmodqi4>
    2954:	29 0f       	add	r18, r25
    2956:	2b 83       	std	Y+3, r18	; 0x03
		Date_Arr[3]=((Year/10)<<4)+Year%10;
    2958:	85 2f       	mov	r24, r21
    295a:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <__udivmodqi4>
    295e:	28 2f       	mov	r18, r24
    2960:	22 95       	swap	r18
    2962:	20 7f       	andi	r18, 0xF0	; 240
    2964:	85 2f       	mov	r24, r21
    2966:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <__udivmodqi4>
    296a:	29 0f       	add	r18, r25
    296c:	2c 83       	std	Y+4, r18	; 0x04
		E_stat=I2C_WRITE_NBYTES(RTCDS1307_ADD, RTCDS1307_DAY_REG, Date_Arr, 4);
    296e:	80 ed       	ldi	r24, 0xD0	; 208
    2970:	63 e0       	ldi	r22, 0x03	; 3
    2972:	ae 01       	movw	r20, r28
    2974:	4f 5f       	subi	r20, 0xFF	; 255
    2976:	5f 4f       	sbci	r21, 0xFF	; 255
    2978:	24 e0       	ldi	r18, 0x04	; 4
    297a:	0e 94 af 0b 	call	0x175e	; 0x175e <I2C_WRITE_NBYTES>
    297e:	01 c0       	rjmp	.+2      	; 0x2982 <RTCDS1307_SET_DATE+0x80>
    2980:	80 e0       	ldi	r24, 0x00	; 0
	}
	return E_stat;
}
    2982:	0f 90       	pop	r0
    2984:	0f 90       	pop	r0
    2986:	0f 90       	pop	r0
    2988:	0f 90       	pop	r0
    298a:	cf 91       	pop	r28
    298c:	df 91       	pop	r29
    298e:	08 95       	ret

00002990 <RTCDS1307_SET_TIME>:
 */
#include "RTCDS1307.h"


Bool RTCDS1307_SET_TIME(uint8 Mode,uint8 Sec,uint8 Mins,uint8 Hrs)
{
    2990:	df 93       	push	r29
    2992:	cf 93       	push	r28
    2994:	00 d0       	rcall	.+0      	; 0x2996 <RTCDS1307_SET_TIME+0x6>
    2996:	0f 92       	push	r0
    2998:	cd b7       	in	r28, 0x3d	; 61
    299a:	de b7       	in	r29, 0x3e	; 62
    299c:	58 2f       	mov	r21, r24
    299e:	e6 2f       	mov	r30, r22
	Bool E_stat=E_OK;
	uint8 Time_Arr[3];
	if((Sec>59)||(Mins>59))
    29a0:	6c 33       	cpi	r22, 0x3C	; 60
    29a2:	10 f0       	brcs	.+4      	; 0x29a8 <RTCDS1307_SET_TIME+0x18>
    29a4:	80 e0       	ldi	r24, 0x00	; 0
    29a6:	04 c0       	rjmp	.+8      	; 0x29b0 <RTCDS1307_SET_TIME+0x20>
    29a8:	80 e0       	ldi	r24, 0x00	; 0
    29aa:	4c 33       	cpi	r20, 0x3C	; 60
    29ac:	08 f4       	brcc	.+2      	; 0x29b0 <RTCDS1307_SET_TIME+0x20>
    29ae:	81 e0       	ldi	r24, 0x01	; 1
		E_stat=E_NOK;
	if((Mode==MODE_24H&&Hrs>23)||(Mode!=MODE_24H&&Hrs>12))
    29b0:	55 23       	and	r21, r21
    29b2:	21 f4       	brne	.+8      	; 0x29bc <RTCDS1307_SET_TIME+0x2c>
    29b4:	28 31       	cpi	r18, 0x18	; 24
    29b6:	08 f0       	brcs	.+2      	; 0x29ba <RTCDS1307_SET_TIME+0x2a>
    29b8:	3f c0       	rjmp	.+126    	; 0x2a38 <RTCDS1307_SET_TIME+0xa8>
    29ba:	02 c0       	rjmp	.+4      	; 0x29c0 <RTCDS1307_SET_TIME+0x30>
    29bc:	2d 30       	cpi	r18, 0x0D	; 13
    29be:	e0 f5       	brcc	.+120    	; 0x2a38 <RTCDS1307_SET_TIME+0xa8>
		E_stat=E_NOK;
	if(E_stat==E_OK)
    29c0:	81 30       	cpi	r24, 0x01	; 1
    29c2:	d1 f5       	brne	.+116    	; 0x2a38 <RTCDS1307_SET_TIME+0xa8>
	{
		Time_Arr[0]=((Sec/10)<<4)+Sec%10;
		Time_Arr[1]=((Mins/10)<<4)+Mins%10;
		Time_Arr[2]=((Hrs/10)<<4)+Hrs%10;
    29c4:	82 2f       	mov	r24, r18
    29c6:	6a e0       	ldi	r22, 0x0A	; 10
    29c8:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <__udivmodqi4>
    29cc:	38 2f       	mov	r19, r24
    29ce:	32 95       	swap	r19
    29d0:	30 7f       	andi	r19, 0xF0	; 240
    29d2:	82 2f       	mov	r24, r18
    29d4:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <__udivmodqi4>
    29d8:	39 0f       	add	r19, r25
    29da:	3b 83       	std	Y+3, r19	; 0x03
		switch(Mode)
    29dc:	51 30       	cpi	r21, 0x01	; 1
    29de:	29 f0       	breq	.+10     	; 0x29ea <RTCDS1307_SET_TIME+0x5a>
    29e0:	51 30       	cpi	r21, 0x01	; 1
    29e2:	40 f0       	brcs	.+16     	; 0x29f4 <RTCDS1307_SET_TIME+0x64>
    29e4:	52 30       	cpi	r21, 0x02	; 2
    29e6:	41 f4       	brne	.+16     	; 0x29f8 <RTCDS1307_SET_TIME+0x68>
    29e8:	03 c0       	rjmp	.+6      	; 0x29f0 <RTCDS1307_SET_TIME+0x60>
		{
			case MODE_AM:
				CLEAR_BIT(Time_Arr[2],AM_PM_MODE_POS);
    29ea:	3f 7d       	andi	r19, 0xDF	; 223
				SET_BIT(Time_Arr[2],TW_TFR_MODE_POS);
    29ec:	30 64       	ori	r19, 0x40	; 64
    29ee:	03 c0       	rjmp	.+6      	; 0x29f6 <RTCDS1307_SET_TIME+0x66>
				break;
			case MODE_PM:
				SET_BIT(Time_Arr[2], AM_PM_MODE_POS);
				SET_BIT(Time_Arr[2], TW_TFR_MODE_POS);
    29f0:	30 66       	ori	r19, 0x60	; 96
    29f2:	01 c0       	rjmp	.+2      	; 0x29f6 <RTCDS1307_SET_TIME+0x66>
				break;
			case MODE_24H:
				CLEAR_BIT(Time_Arr[2],TW_TFR_MODE_POS);
    29f4:	3f 7b       	andi	r19, 0xBF	; 191
    29f6:	3b 83       	std	Y+3, r19	; 0x03
	if((Mode==MODE_24H&&Hrs>23)||(Mode!=MODE_24H&&Hrs>12))
		E_stat=E_NOK;
	if(E_stat==E_OK)
	{
		Time_Arr[0]=((Sec/10)<<4)+Sec%10;
		Time_Arr[1]=((Mins/10)<<4)+Mins%10;
    29f8:	84 2f       	mov	r24, r20
    29fa:	6a e0       	ldi	r22, 0x0A	; 10
    29fc:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <__udivmodqi4>
    2a00:	28 2f       	mov	r18, r24
    2a02:	22 95       	swap	r18
    2a04:	20 7f       	andi	r18, 0xF0	; 240
    2a06:	84 2f       	mov	r24, r20
    2a08:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <__udivmodqi4>
    2a0c:	29 0f       	add	r18, r25
    2a0e:	2a 83       	std	Y+2, r18	; 0x02
		E_stat=E_NOK;
	if((Mode==MODE_24H&&Hrs>23)||(Mode!=MODE_24H&&Hrs>12))
		E_stat=E_NOK;
	if(E_stat==E_OK)
	{
		Time_Arr[0]=((Sec/10)<<4)+Sec%10;
    2a10:	8e 2f       	mov	r24, r30
    2a12:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <__udivmodqi4>
    2a16:	28 2f       	mov	r18, r24
    2a18:	22 95       	swap	r18
    2a1a:	20 7f       	andi	r18, 0xF0	; 240
    2a1c:	8e 2f       	mov	r24, r30
    2a1e:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <__udivmodqi4>
    2a22:	29 0f       	add	r18, r25
    2a24:	29 83       	std	Y+1, r18	; 0x01
				SET_BIT(Time_Arr[2], TW_TFR_MODE_POS);
				break;
			case MODE_24H:
				CLEAR_BIT(Time_Arr[2],TW_TFR_MODE_POS);
		}
		E_stat=I2C_WRITE_NBYTES(RTCDS1307_ADD,RTCDS1307_SEC_REG,Time_Arr,3);
    2a26:	80 ed       	ldi	r24, 0xD0	; 208
    2a28:	60 e0       	ldi	r22, 0x00	; 0
    2a2a:	ae 01       	movw	r20, r28
    2a2c:	4f 5f       	subi	r20, 0xFF	; 255
    2a2e:	5f 4f       	sbci	r21, 0xFF	; 255
    2a30:	23 e0       	ldi	r18, 0x03	; 3
    2a32:	0e 94 af 0b 	call	0x175e	; 0x175e <I2C_WRITE_NBYTES>
    2a36:	01 c0       	rjmp	.+2      	; 0x2a3a <RTCDS1307_SET_TIME+0xaa>
    2a38:	80 e0       	ldi	r24, 0x00	; 0
	}
	return E_stat;
}
    2a3a:	0f 90       	pop	r0
    2a3c:	0f 90       	pop	r0
    2a3e:	0f 90       	pop	r0
    2a40:	cf 91       	pop	r28
    2a42:	df 91       	pop	r29
    2a44:	08 95       	ret

00002a46 <main>:
{
	uint8 i=0;
	uint8 Time_Buff[15];
	uint8 Date_Buff[15];
	Bool E_stat=E_OK;
	E_stat=OLED_Init();
    2a46:	0e 94 3d 12 	call	0x247a	; 0x247a <OLED_Init>
	E_stat=RTCDS1307_SET_TIME(MODE_PM,25,45,9);
    2a4a:	82 e0       	ldi	r24, 0x02	; 2
    2a4c:	69 e1       	ldi	r22, 0x19	; 25
    2a4e:	4d e2       	ldi	r20, 0x2D	; 45
    2a50:	29 e0       	ldi	r18, 0x09	; 9
    2a52:	0e 94 c8 14 	call	0x2990	; 0x2990 <RTCDS1307_SET_TIME>
	E_stat=RTCDS1307_SET_DATE(TUESDAY,2,5,23);
    2a56:	83 e0       	ldi	r24, 0x03	; 3
    2a58:	62 e0       	ldi	r22, 0x02	; 2
    2a5a:	45 e0       	ldi	r20, 0x05	; 5
    2a5c:	27 e1       	ldi	r18, 0x17	; 23
    2a5e:	0e 94 81 14 	call	0x2902	; 0x2902 <RTCDS1307_SET_DATE>
	OLED_DRAW_RECTANGLE(1,0,50,50);
    2a62:	81 e0       	ldi	r24, 0x01	; 1
    2a64:	60 e0       	ldi	r22, 0x00	; 0
    2a66:	42 e3       	ldi	r20, 0x32	; 50
    2a68:	22 e3       	ldi	r18, 0x32	; 50
    2a6a:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <OLED_DRAW_RECTANGLE>
	OLED_DRAW_RECTANGLE(3,2,46,46);
    2a6e:	83 e0       	ldi	r24, 0x03	; 3
    2a70:	62 e0       	ldi	r22, 0x02	; 2
    2a72:	4e e2       	ldi	r20, 0x2E	; 46
    2a74:	2e e2       	ldi	r18, 0x2E	; 46
    2a76:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <OLED_DRAW_RECTANGLE>
	OLED_DRAW_RECTANGLE(5,4,42,42);
    2a7a:	85 e0       	ldi	r24, 0x05	; 5
    2a7c:	64 e0       	ldi	r22, 0x04	; 4
    2a7e:	4a e2       	ldi	r20, 0x2A	; 42
    2a80:	2a e2       	ldi	r18, 0x2A	; 42
    2a82:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <OLED_DRAW_RECTANGLE>
	OLED_DRAW_RECTANGLE(7,6,37,37);
    2a86:	87 e0       	ldi	r24, 0x07	; 7
    2a88:	66 e0       	ldi	r22, 0x06	; 6
    2a8a:	45 e2       	ldi	r20, 0x25	; 37
    2a8c:	25 e2       	ldi	r18, 0x25	; 37
    2a8e:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <OLED_DRAW_RECTANGLE>
	OLED_DISPLAY();
    2a92:	0e 94 65 0f 	call	0x1eca	; 0x1eca <OLED_DISPLAY>
    2a96:	ff cf       	rjmp	.-2      	; 0x2a96 <main+0x50>

00002a98 <__udivmodqi4>:
    2a98:	99 1b       	sub	r25, r25
    2a9a:	79 e0       	ldi	r23, 0x09	; 9
    2a9c:	04 c0       	rjmp	.+8      	; 0x2aa6 <__udivmodqi4_ep>

00002a9e <__udivmodqi4_loop>:
    2a9e:	99 1f       	adc	r25, r25
    2aa0:	96 17       	cp	r25, r22
    2aa2:	08 f0       	brcs	.+2      	; 0x2aa6 <__udivmodqi4_ep>
    2aa4:	96 1b       	sub	r25, r22

00002aa6 <__udivmodqi4_ep>:
    2aa6:	88 1f       	adc	r24, r24
    2aa8:	7a 95       	dec	r23
    2aaa:	c9 f7       	brne	.-14     	; 0x2a9e <__udivmodqi4_loop>
    2aac:	80 95       	com	r24
    2aae:	08 95       	ret

00002ab0 <__udivmodsi4>:
    2ab0:	a1 e2       	ldi	r26, 0x21	; 33
    2ab2:	1a 2e       	mov	r1, r26
    2ab4:	aa 1b       	sub	r26, r26
    2ab6:	bb 1b       	sub	r27, r27
    2ab8:	fd 01       	movw	r30, r26
    2aba:	0d c0       	rjmp	.+26     	; 0x2ad6 <__udivmodsi4_ep>

00002abc <__udivmodsi4_loop>:
    2abc:	aa 1f       	adc	r26, r26
    2abe:	bb 1f       	adc	r27, r27
    2ac0:	ee 1f       	adc	r30, r30
    2ac2:	ff 1f       	adc	r31, r31
    2ac4:	a2 17       	cp	r26, r18
    2ac6:	b3 07       	cpc	r27, r19
    2ac8:	e4 07       	cpc	r30, r20
    2aca:	f5 07       	cpc	r31, r21
    2acc:	20 f0       	brcs	.+8      	; 0x2ad6 <__udivmodsi4_ep>
    2ace:	a2 1b       	sub	r26, r18
    2ad0:	b3 0b       	sbc	r27, r19
    2ad2:	e4 0b       	sbc	r30, r20
    2ad4:	f5 0b       	sbc	r31, r21

00002ad6 <__udivmodsi4_ep>:
    2ad6:	66 1f       	adc	r22, r22
    2ad8:	77 1f       	adc	r23, r23
    2ada:	88 1f       	adc	r24, r24
    2adc:	99 1f       	adc	r25, r25
    2ade:	1a 94       	dec	r1
    2ae0:	69 f7       	brne	.-38     	; 0x2abc <__udivmodsi4_loop>
    2ae2:	60 95       	com	r22
    2ae4:	70 95       	com	r23
    2ae6:	80 95       	com	r24
    2ae8:	90 95       	com	r25
    2aea:	9b 01       	movw	r18, r22
    2aec:	ac 01       	movw	r20, r24
    2aee:	bd 01       	movw	r22, r26
    2af0:	cf 01       	movw	r24, r30
    2af2:	08 95       	ret

00002af4 <__divmodsi4>:
    2af4:	97 fb       	bst	r25, 7
    2af6:	09 2e       	mov	r0, r25
    2af8:	05 26       	eor	r0, r21
    2afa:	0e d0       	rcall	.+28     	; 0x2b18 <__divmodsi4_neg1>
    2afc:	57 fd       	sbrc	r21, 7
    2afe:	04 d0       	rcall	.+8      	; 0x2b08 <__divmodsi4_neg2>
    2b00:	d7 df       	rcall	.-82     	; 0x2ab0 <__udivmodsi4>
    2b02:	0a d0       	rcall	.+20     	; 0x2b18 <__divmodsi4_neg1>
    2b04:	00 1c       	adc	r0, r0
    2b06:	38 f4       	brcc	.+14     	; 0x2b16 <__divmodsi4_exit>

00002b08 <__divmodsi4_neg2>:
    2b08:	50 95       	com	r21
    2b0a:	40 95       	com	r20
    2b0c:	30 95       	com	r19
    2b0e:	21 95       	neg	r18
    2b10:	3f 4f       	sbci	r19, 0xFF	; 255
    2b12:	4f 4f       	sbci	r20, 0xFF	; 255
    2b14:	5f 4f       	sbci	r21, 0xFF	; 255

00002b16 <__divmodsi4_exit>:
    2b16:	08 95       	ret

00002b18 <__divmodsi4_neg1>:
    2b18:	f6 f7       	brtc	.-4      	; 0x2b16 <__divmodsi4_exit>
    2b1a:	90 95       	com	r25
    2b1c:	80 95       	com	r24
    2b1e:	70 95       	com	r23
    2b20:	61 95       	neg	r22
    2b22:	7f 4f       	sbci	r23, 0xFF	; 255
    2b24:	8f 4f       	sbci	r24, 0xFF	; 255
    2b26:	9f 4f       	sbci	r25, 0xFF	; 255
    2b28:	08 95       	ret

00002b2a <__prologue_saves__>:
    2b2a:	2f 92       	push	r2
    2b2c:	3f 92       	push	r3
    2b2e:	4f 92       	push	r4
    2b30:	5f 92       	push	r5
    2b32:	6f 92       	push	r6
    2b34:	7f 92       	push	r7
    2b36:	8f 92       	push	r8
    2b38:	9f 92       	push	r9
    2b3a:	af 92       	push	r10
    2b3c:	bf 92       	push	r11
    2b3e:	cf 92       	push	r12
    2b40:	df 92       	push	r13
    2b42:	ef 92       	push	r14
    2b44:	ff 92       	push	r15
    2b46:	0f 93       	push	r16
    2b48:	1f 93       	push	r17
    2b4a:	cf 93       	push	r28
    2b4c:	df 93       	push	r29
    2b4e:	cd b7       	in	r28, 0x3d	; 61
    2b50:	de b7       	in	r29, 0x3e	; 62
    2b52:	ca 1b       	sub	r28, r26
    2b54:	db 0b       	sbc	r29, r27
    2b56:	0f b6       	in	r0, 0x3f	; 63
    2b58:	f8 94       	cli
    2b5a:	de bf       	out	0x3e, r29	; 62
    2b5c:	0f be       	out	0x3f, r0	; 63
    2b5e:	cd bf       	out	0x3d, r28	; 61
    2b60:	09 94       	ijmp

00002b62 <__epilogue_restores__>:
    2b62:	2a 88       	ldd	r2, Y+18	; 0x12
    2b64:	39 88       	ldd	r3, Y+17	; 0x11
    2b66:	48 88       	ldd	r4, Y+16	; 0x10
    2b68:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b6a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b6c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b6e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b70:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b72:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b74:	b9 84       	ldd	r11, Y+9	; 0x09
    2b76:	c8 84       	ldd	r12, Y+8	; 0x08
    2b78:	df 80       	ldd	r13, Y+7	; 0x07
    2b7a:	ee 80       	ldd	r14, Y+6	; 0x06
    2b7c:	fd 80       	ldd	r15, Y+5	; 0x05
    2b7e:	0c 81       	ldd	r16, Y+4	; 0x04
    2b80:	1b 81       	ldd	r17, Y+3	; 0x03
    2b82:	aa 81       	ldd	r26, Y+2	; 0x02
    2b84:	b9 81       	ldd	r27, Y+1	; 0x01
    2b86:	ce 0f       	add	r28, r30
    2b88:	d1 1d       	adc	r29, r1
    2b8a:	0f b6       	in	r0, 0x3f	; 63
    2b8c:	f8 94       	cli
    2b8e:	de bf       	out	0x3e, r29	; 62
    2b90:	0f be       	out	0x3f, r0	; 63
    2b92:	cd bf       	out	0x3d, r28	; 61
    2b94:	ed 01       	movw	r28, r26
    2b96:	08 95       	ret

00002b98 <_exit>:
    2b98:	f8 94       	cli

00002b9a <__stop_program>:
    2b9a:	ff cf       	rjmp	.-2      	; 0x2b9a <__stop_program>
