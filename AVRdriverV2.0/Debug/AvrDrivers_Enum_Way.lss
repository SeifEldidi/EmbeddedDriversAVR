
AvrDrivers_Enum_Way.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000388c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000144  00800060  0000388c  00003920  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003c  008001a4  008001a4  00003a64  2**0
                  ALLOC
  3 .debug_aranges 000004d8  00000000  00000000  00003a64  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000009d6  00000000  00000000  00003f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00005114  00000000  00000000  00004912  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002028  00000000  00000000  00009a26  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000512b  00000000  00000000  0000ba4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000730  00000000  00000000  00010b7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001485  00000000  00000000  000112ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000031a4  00000000  00000000  00012731  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 0004434b  00000000  00000000  000158d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000450  00000000  00000000  00059c20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 fc 06 	jmp	0xdf8	; 0xdf8 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 20 07 	jmp	0xe40	; 0xe40 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e8       	ldi	r30, 0x8C	; 140
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3a       	cpi	r26, 0xA4	; 164
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 ea       	ldi	r26, 0xA4	; 164
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3e       	cpi	r26, 0xE0	; 224
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ac 18 	call	0x3158	; 0x3158 <main>
      8a:	0c 94 44 1c 	jmp	0x3888	; 0x3888 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_fpadd_parts>:
      92:	a0 e0       	ldi	r26, 0x00	; 0
      94:	b0 e0       	ldi	r27, 0x00	; 0
      96:	ef e4       	ldi	r30, 0x4F	; 79
      98:	f0 e0       	ldi	r31, 0x00	; 0
      9a:	0c 94 51 19 	jmp	0x32a2	; 0x32a2 <__prologue_saves__>
      9e:	dc 01       	movw	r26, r24
      a0:	2b 01       	movw	r4, r22
      a2:	fa 01       	movw	r30, r20
      a4:	9c 91       	ld	r25, X
      a6:	92 30       	cpi	r25, 0x02	; 2
      a8:	08 f4       	brcc	.+2      	; 0xac <_fpadd_parts+0x1a>
      aa:	39 c1       	rjmp	.+626    	; 0x31e <_fpadd_parts+0x28c>
      ac:	eb 01       	movw	r28, r22
      ae:	88 81       	ld	r24, Y
      b0:	82 30       	cpi	r24, 0x02	; 2
      b2:	08 f4       	brcc	.+2      	; 0xb6 <_fpadd_parts+0x24>
      b4:	33 c1       	rjmp	.+614    	; 0x31c <_fpadd_parts+0x28a>
      b6:	94 30       	cpi	r25, 0x04	; 4
      b8:	69 f4       	brne	.+26     	; 0xd4 <_fpadd_parts+0x42>
      ba:	84 30       	cpi	r24, 0x04	; 4
      bc:	09 f0       	breq	.+2      	; 0xc0 <_fpadd_parts+0x2e>
      be:	2f c1       	rjmp	.+606    	; 0x31e <_fpadd_parts+0x28c>
      c0:	11 96       	adiw	r26, 0x01	; 1
      c2:	9c 91       	ld	r25, X
      c4:	11 97       	sbiw	r26, 0x01	; 1
      c6:	89 81       	ldd	r24, Y+1	; 0x01
      c8:	98 17       	cp	r25, r24
      ca:	09 f4       	brne	.+2      	; 0xce <_fpadd_parts+0x3c>
      cc:	28 c1       	rjmp	.+592    	; 0x31e <_fpadd_parts+0x28c>
      ce:	af e6       	ldi	r26, 0x6F	; 111
      d0:	b0 e0       	ldi	r27, 0x00	; 0
      d2:	25 c1       	rjmp	.+586    	; 0x31e <_fpadd_parts+0x28c>
      d4:	84 30       	cpi	r24, 0x04	; 4
      d6:	09 f4       	brne	.+2      	; 0xda <_fpadd_parts+0x48>
      d8:	21 c1       	rjmp	.+578    	; 0x31c <_fpadd_parts+0x28a>
      da:	82 30       	cpi	r24, 0x02	; 2
      dc:	a9 f4       	brne	.+42     	; 0x108 <_fpadd_parts+0x76>
      de:	92 30       	cpi	r25, 0x02	; 2
      e0:	09 f0       	breq	.+2      	; 0xe4 <_fpadd_parts+0x52>
      e2:	1d c1       	rjmp	.+570    	; 0x31e <_fpadd_parts+0x28c>
      e4:	9a 01       	movw	r18, r20
      e6:	ad 01       	movw	r20, r26
      e8:	88 e0       	ldi	r24, 0x08	; 8
      ea:	ea 01       	movw	r28, r20
      ec:	09 90       	ld	r0, Y+
      ee:	ae 01       	movw	r20, r28
      f0:	e9 01       	movw	r28, r18
      f2:	09 92       	st	Y+, r0
      f4:	9e 01       	movw	r18, r28
      f6:	81 50       	subi	r24, 0x01	; 1
      f8:	c1 f7       	brne	.-16     	; 0xea <_fpadd_parts+0x58>
      fa:	e2 01       	movw	r28, r4
      fc:	89 81       	ldd	r24, Y+1	; 0x01
      fe:	11 96       	adiw	r26, 0x01	; 1
     100:	9c 91       	ld	r25, X
     102:	89 23       	and	r24, r25
     104:	81 83       	std	Z+1, r24	; 0x01
     106:	08 c1       	rjmp	.+528    	; 0x318 <_fpadd_parts+0x286>
     108:	92 30       	cpi	r25, 0x02	; 2
     10a:	09 f4       	brne	.+2      	; 0x10e <_fpadd_parts+0x7c>
     10c:	07 c1       	rjmp	.+526    	; 0x31c <_fpadd_parts+0x28a>
     10e:	12 96       	adiw	r26, 0x02	; 2
     110:	2d 90       	ld	r2, X+
     112:	3c 90       	ld	r3, X
     114:	13 97       	sbiw	r26, 0x03	; 3
     116:	eb 01       	movw	r28, r22
     118:	8a 81       	ldd	r24, Y+2	; 0x02
     11a:	9b 81       	ldd	r25, Y+3	; 0x03
     11c:	14 96       	adiw	r26, 0x04	; 4
     11e:	ad 90       	ld	r10, X+
     120:	bd 90       	ld	r11, X+
     122:	cd 90       	ld	r12, X+
     124:	dc 90       	ld	r13, X
     126:	17 97       	sbiw	r26, 0x07	; 7
     128:	ec 80       	ldd	r14, Y+4	; 0x04
     12a:	fd 80       	ldd	r15, Y+5	; 0x05
     12c:	0e 81       	ldd	r16, Y+6	; 0x06
     12e:	1f 81       	ldd	r17, Y+7	; 0x07
     130:	91 01       	movw	r18, r2
     132:	28 1b       	sub	r18, r24
     134:	39 0b       	sbc	r19, r25
     136:	b9 01       	movw	r22, r18
     138:	37 ff       	sbrs	r19, 7
     13a:	04 c0       	rjmp	.+8      	; 0x144 <_fpadd_parts+0xb2>
     13c:	66 27       	eor	r22, r22
     13e:	77 27       	eor	r23, r23
     140:	62 1b       	sub	r22, r18
     142:	73 0b       	sbc	r23, r19
     144:	60 32       	cpi	r22, 0x20	; 32
     146:	71 05       	cpc	r23, r1
     148:	0c f0       	brlt	.+2      	; 0x14c <_fpadd_parts+0xba>
     14a:	61 c0       	rjmp	.+194    	; 0x20e <_fpadd_parts+0x17c>
     14c:	12 16       	cp	r1, r18
     14e:	13 06       	cpc	r1, r19
     150:	6c f5       	brge	.+90     	; 0x1ac <_fpadd_parts+0x11a>
     152:	37 01       	movw	r6, r14
     154:	48 01       	movw	r8, r16
     156:	06 2e       	mov	r0, r22
     158:	04 c0       	rjmp	.+8      	; 0x162 <_fpadd_parts+0xd0>
     15a:	96 94       	lsr	r9
     15c:	87 94       	ror	r8
     15e:	77 94       	ror	r7
     160:	67 94       	ror	r6
     162:	0a 94       	dec	r0
     164:	d2 f7       	brpl	.-12     	; 0x15a <_fpadd_parts+0xc8>
     166:	21 e0       	ldi	r18, 0x01	; 1
     168:	30 e0       	ldi	r19, 0x00	; 0
     16a:	40 e0       	ldi	r20, 0x00	; 0
     16c:	50 e0       	ldi	r21, 0x00	; 0
     16e:	04 c0       	rjmp	.+8      	; 0x178 <_fpadd_parts+0xe6>
     170:	22 0f       	add	r18, r18
     172:	33 1f       	adc	r19, r19
     174:	44 1f       	adc	r20, r20
     176:	55 1f       	adc	r21, r21
     178:	6a 95       	dec	r22
     17a:	d2 f7       	brpl	.-12     	; 0x170 <_fpadd_parts+0xde>
     17c:	21 50       	subi	r18, 0x01	; 1
     17e:	30 40       	sbci	r19, 0x00	; 0
     180:	40 40       	sbci	r20, 0x00	; 0
     182:	50 40       	sbci	r21, 0x00	; 0
     184:	2e 21       	and	r18, r14
     186:	3f 21       	and	r19, r15
     188:	40 23       	and	r20, r16
     18a:	51 23       	and	r21, r17
     18c:	21 15       	cp	r18, r1
     18e:	31 05       	cpc	r19, r1
     190:	41 05       	cpc	r20, r1
     192:	51 05       	cpc	r21, r1
     194:	21 f0       	breq	.+8      	; 0x19e <_fpadd_parts+0x10c>
     196:	21 e0       	ldi	r18, 0x01	; 1
     198:	30 e0       	ldi	r19, 0x00	; 0
     19a:	40 e0       	ldi	r20, 0x00	; 0
     19c:	50 e0       	ldi	r21, 0x00	; 0
     19e:	79 01       	movw	r14, r18
     1a0:	8a 01       	movw	r16, r20
     1a2:	e6 28       	or	r14, r6
     1a4:	f7 28       	or	r15, r7
     1a6:	08 29       	or	r16, r8
     1a8:	19 29       	or	r17, r9
     1aa:	3c c0       	rjmp	.+120    	; 0x224 <_fpadd_parts+0x192>
     1ac:	23 2b       	or	r18, r19
     1ae:	d1 f1       	breq	.+116    	; 0x224 <_fpadd_parts+0x192>
     1b0:	26 0e       	add	r2, r22
     1b2:	37 1e       	adc	r3, r23
     1b4:	35 01       	movw	r6, r10
     1b6:	46 01       	movw	r8, r12
     1b8:	06 2e       	mov	r0, r22
     1ba:	04 c0       	rjmp	.+8      	; 0x1c4 <_fpadd_parts+0x132>
     1bc:	96 94       	lsr	r9
     1be:	87 94       	ror	r8
     1c0:	77 94       	ror	r7
     1c2:	67 94       	ror	r6
     1c4:	0a 94       	dec	r0
     1c6:	d2 f7       	brpl	.-12     	; 0x1bc <_fpadd_parts+0x12a>
     1c8:	21 e0       	ldi	r18, 0x01	; 1
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	40 e0       	ldi	r20, 0x00	; 0
     1ce:	50 e0       	ldi	r21, 0x00	; 0
     1d0:	04 c0       	rjmp	.+8      	; 0x1da <_fpadd_parts+0x148>
     1d2:	22 0f       	add	r18, r18
     1d4:	33 1f       	adc	r19, r19
     1d6:	44 1f       	adc	r20, r20
     1d8:	55 1f       	adc	r21, r21
     1da:	6a 95       	dec	r22
     1dc:	d2 f7       	brpl	.-12     	; 0x1d2 <_fpadd_parts+0x140>
     1de:	21 50       	subi	r18, 0x01	; 1
     1e0:	30 40       	sbci	r19, 0x00	; 0
     1e2:	40 40       	sbci	r20, 0x00	; 0
     1e4:	50 40       	sbci	r21, 0x00	; 0
     1e6:	2a 21       	and	r18, r10
     1e8:	3b 21       	and	r19, r11
     1ea:	4c 21       	and	r20, r12
     1ec:	5d 21       	and	r21, r13
     1ee:	21 15       	cp	r18, r1
     1f0:	31 05       	cpc	r19, r1
     1f2:	41 05       	cpc	r20, r1
     1f4:	51 05       	cpc	r21, r1
     1f6:	21 f0       	breq	.+8      	; 0x200 <_fpadd_parts+0x16e>
     1f8:	21 e0       	ldi	r18, 0x01	; 1
     1fa:	30 e0       	ldi	r19, 0x00	; 0
     1fc:	40 e0       	ldi	r20, 0x00	; 0
     1fe:	50 e0       	ldi	r21, 0x00	; 0
     200:	59 01       	movw	r10, r18
     202:	6a 01       	movw	r12, r20
     204:	a6 28       	or	r10, r6
     206:	b7 28       	or	r11, r7
     208:	c8 28       	or	r12, r8
     20a:	d9 28       	or	r13, r9
     20c:	0b c0       	rjmp	.+22     	; 0x224 <_fpadd_parts+0x192>
     20e:	82 15       	cp	r24, r2
     210:	93 05       	cpc	r25, r3
     212:	2c f0       	brlt	.+10     	; 0x21e <_fpadd_parts+0x18c>
     214:	1c 01       	movw	r2, r24
     216:	aa 24       	eor	r10, r10
     218:	bb 24       	eor	r11, r11
     21a:	65 01       	movw	r12, r10
     21c:	03 c0       	rjmp	.+6      	; 0x224 <_fpadd_parts+0x192>
     21e:	ee 24       	eor	r14, r14
     220:	ff 24       	eor	r15, r15
     222:	87 01       	movw	r16, r14
     224:	11 96       	adiw	r26, 0x01	; 1
     226:	9c 91       	ld	r25, X
     228:	d2 01       	movw	r26, r4
     22a:	11 96       	adiw	r26, 0x01	; 1
     22c:	8c 91       	ld	r24, X
     22e:	98 17       	cp	r25, r24
     230:	09 f4       	brne	.+2      	; 0x234 <_fpadd_parts+0x1a2>
     232:	45 c0       	rjmp	.+138    	; 0x2be <_fpadd_parts+0x22c>
     234:	99 23       	and	r25, r25
     236:	39 f0       	breq	.+14     	; 0x246 <_fpadd_parts+0x1b4>
     238:	a8 01       	movw	r20, r16
     23a:	97 01       	movw	r18, r14
     23c:	2a 19       	sub	r18, r10
     23e:	3b 09       	sbc	r19, r11
     240:	4c 09       	sbc	r20, r12
     242:	5d 09       	sbc	r21, r13
     244:	06 c0       	rjmp	.+12     	; 0x252 <_fpadd_parts+0x1c0>
     246:	a6 01       	movw	r20, r12
     248:	95 01       	movw	r18, r10
     24a:	2e 19       	sub	r18, r14
     24c:	3f 09       	sbc	r19, r15
     24e:	40 0b       	sbc	r20, r16
     250:	51 0b       	sbc	r21, r17
     252:	57 fd       	sbrc	r21, 7
     254:	08 c0       	rjmp	.+16     	; 0x266 <_fpadd_parts+0x1d4>
     256:	11 82       	std	Z+1, r1	; 0x01
     258:	33 82       	std	Z+3, r3	; 0x03
     25a:	22 82       	std	Z+2, r2	; 0x02
     25c:	24 83       	std	Z+4, r18	; 0x04
     25e:	35 83       	std	Z+5, r19	; 0x05
     260:	46 83       	std	Z+6, r20	; 0x06
     262:	57 83       	std	Z+7, r21	; 0x07
     264:	1d c0       	rjmp	.+58     	; 0x2a0 <_fpadd_parts+0x20e>
     266:	81 e0       	ldi	r24, 0x01	; 1
     268:	81 83       	std	Z+1, r24	; 0x01
     26a:	33 82       	std	Z+3, r3	; 0x03
     26c:	22 82       	std	Z+2, r2	; 0x02
     26e:	88 27       	eor	r24, r24
     270:	99 27       	eor	r25, r25
     272:	dc 01       	movw	r26, r24
     274:	82 1b       	sub	r24, r18
     276:	93 0b       	sbc	r25, r19
     278:	a4 0b       	sbc	r26, r20
     27a:	b5 0b       	sbc	r27, r21
     27c:	84 83       	std	Z+4, r24	; 0x04
     27e:	95 83       	std	Z+5, r25	; 0x05
     280:	a6 83       	std	Z+6, r26	; 0x06
     282:	b7 83       	std	Z+7, r27	; 0x07
     284:	0d c0       	rjmp	.+26     	; 0x2a0 <_fpadd_parts+0x20e>
     286:	22 0f       	add	r18, r18
     288:	33 1f       	adc	r19, r19
     28a:	44 1f       	adc	r20, r20
     28c:	55 1f       	adc	r21, r21
     28e:	24 83       	std	Z+4, r18	; 0x04
     290:	35 83       	std	Z+5, r19	; 0x05
     292:	46 83       	std	Z+6, r20	; 0x06
     294:	57 83       	std	Z+7, r21	; 0x07
     296:	82 81       	ldd	r24, Z+2	; 0x02
     298:	93 81       	ldd	r25, Z+3	; 0x03
     29a:	01 97       	sbiw	r24, 0x01	; 1
     29c:	93 83       	std	Z+3, r25	; 0x03
     29e:	82 83       	std	Z+2, r24	; 0x02
     2a0:	24 81       	ldd	r18, Z+4	; 0x04
     2a2:	35 81       	ldd	r19, Z+5	; 0x05
     2a4:	46 81       	ldd	r20, Z+6	; 0x06
     2a6:	57 81       	ldd	r21, Z+7	; 0x07
     2a8:	da 01       	movw	r26, r20
     2aa:	c9 01       	movw	r24, r18
     2ac:	01 97       	sbiw	r24, 0x01	; 1
     2ae:	a1 09       	sbc	r26, r1
     2b0:	b1 09       	sbc	r27, r1
     2b2:	8f 5f       	subi	r24, 0xFF	; 255
     2b4:	9f 4f       	sbci	r25, 0xFF	; 255
     2b6:	af 4f       	sbci	r26, 0xFF	; 255
     2b8:	bf 43       	sbci	r27, 0x3F	; 63
     2ba:	28 f3       	brcs	.-54     	; 0x286 <_fpadd_parts+0x1f4>
     2bc:	0b c0       	rjmp	.+22     	; 0x2d4 <_fpadd_parts+0x242>
     2be:	91 83       	std	Z+1, r25	; 0x01
     2c0:	33 82       	std	Z+3, r3	; 0x03
     2c2:	22 82       	std	Z+2, r2	; 0x02
     2c4:	ea 0c       	add	r14, r10
     2c6:	fb 1c       	adc	r15, r11
     2c8:	0c 1d       	adc	r16, r12
     2ca:	1d 1d       	adc	r17, r13
     2cc:	e4 82       	std	Z+4, r14	; 0x04
     2ce:	f5 82       	std	Z+5, r15	; 0x05
     2d0:	06 83       	std	Z+6, r16	; 0x06
     2d2:	17 83       	std	Z+7, r17	; 0x07
     2d4:	83 e0       	ldi	r24, 0x03	; 3
     2d6:	80 83       	st	Z, r24
     2d8:	24 81       	ldd	r18, Z+4	; 0x04
     2da:	35 81       	ldd	r19, Z+5	; 0x05
     2dc:	46 81       	ldd	r20, Z+6	; 0x06
     2de:	57 81       	ldd	r21, Z+7	; 0x07
     2e0:	57 ff       	sbrs	r21, 7
     2e2:	1a c0       	rjmp	.+52     	; 0x318 <_fpadd_parts+0x286>
     2e4:	c9 01       	movw	r24, r18
     2e6:	aa 27       	eor	r26, r26
     2e8:	97 fd       	sbrc	r25, 7
     2ea:	a0 95       	com	r26
     2ec:	ba 2f       	mov	r27, r26
     2ee:	81 70       	andi	r24, 0x01	; 1
     2f0:	90 70       	andi	r25, 0x00	; 0
     2f2:	a0 70       	andi	r26, 0x00	; 0
     2f4:	b0 70       	andi	r27, 0x00	; 0
     2f6:	56 95       	lsr	r21
     2f8:	47 95       	ror	r20
     2fa:	37 95       	ror	r19
     2fc:	27 95       	ror	r18
     2fe:	82 2b       	or	r24, r18
     300:	93 2b       	or	r25, r19
     302:	a4 2b       	or	r26, r20
     304:	b5 2b       	or	r27, r21
     306:	84 83       	std	Z+4, r24	; 0x04
     308:	95 83       	std	Z+5, r25	; 0x05
     30a:	a6 83       	std	Z+6, r26	; 0x06
     30c:	b7 83       	std	Z+7, r27	; 0x07
     30e:	82 81       	ldd	r24, Z+2	; 0x02
     310:	93 81       	ldd	r25, Z+3	; 0x03
     312:	01 96       	adiw	r24, 0x01	; 1
     314:	93 83       	std	Z+3, r25	; 0x03
     316:	82 83       	std	Z+2, r24	; 0x02
     318:	df 01       	movw	r26, r30
     31a:	01 c0       	rjmp	.+2      	; 0x31e <_fpadd_parts+0x28c>
     31c:	d2 01       	movw	r26, r4
     31e:	cd 01       	movw	r24, r26
     320:	cd b7       	in	r28, 0x3d	; 61
     322:	de b7       	in	r29, 0x3e	; 62
     324:	e2 e1       	ldi	r30, 0x12	; 18
     326:	0c 94 6d 19 	jmp	0x32da	; 0x32da <__epilogue_restores__>

0000032a <__subsf3>:
     32a:	a0 e2       	ldi	r26, 0x20	; 32
     32c:	b0 e0       	ldi	r27, 0x00	; 0
     32e:	eb e9       	ldi	r30, 0x9B	; 155
     330:	f1 e0       	ldi	r31, 0x01	; 1
     332:	0c 94 5d 19 	jmp	0x32ba	; 0x32ba <__prologue_saves__+0x18>
     336:	69 83       	std	Y+1, r22	; 0x01
     338:	7a 83       	std	Y+2, r23	; 0x02
     33a:	8b 83       	std	Y+3, r24	; 0x03
     33c:	9c 83       	std	Y+4, r25	; 0x04
     33e:	2d 83       	std	Y+5, r18	; 0x05
     340:	3e 83       	std	Y+6, r19	; 0x06
     342:	4f 83       	std	Y+7, r20	; 0x07
     344:	58 87       	std	Y+8, r21	; 0x08
     346:	e9 e0       	ldi	r30, 0x09	; 9
     348:	ee 2e       	mov	r14, r30
     34a:	f1 2c       	mov	r15, r1
     34c:	ec 0e       	add	r14, r28
     34e:	fd 1e       	adc	r15, r29
     350:	ce 01       	movw	r24, r28
     352:	01 96       	adiw	r24, 0x01	; 1
     354:	b7 01       	movw	r22, r14
     356:	0e 94 c3 04 	call	0x986	; 0x986 <__unpack_f>
     35a:	8e 01       	movw	r16, r28
     35c:	0f 5e       	subi	r16, 0xEF	; 239
     35e:	1f 4f       	sbci	r17, 0xFF	; 255
     360:	ce 01       	movw	r24, r28
     362:	05 96       	adiw	r24, 0x05	; 5
     364:	b8 01       	movw	r22, r16
     366:	0e 94 c3 04 	call	0x986	; 0x986 <__unpack_f>
     36a:	8a 89       	ldd	r24, Y+18	; 0x12
     36c:	91 e0       	ldi	r25, 0x01	; 1
     36e:	89 27       	eor	r24, r25
     370:	8a 8b       	std	Y+18, r24	; 0x12
     372:	c7 01       	movw	r24, r14
     374:	b8 01       	movw	r22, r16
     376:	ae 01       	movw	r20, r28
     378:	47 5e       	subi	r20, 0xE7	; 231
     37a:	5f 4f       	sbci	r21, 0xFF	; 255
     37c:	0e 94 49 00 	call	0x92	; 0x92 <_fpadd_parts>
     380:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__pack_f>
     384:	a0 96       	adiw	r28, 0x20	; 32
     386:	e6 e0       	ldi	r30, 0x06	; 6
     388:	0c 94 79 19 	jmp	0x32f2	; 0x32f2 <__epilogue_restores__+0x18>

0000038c <__addsf3>:
     38c:	a0 e2       	ldi	r26, 0x20	; 32
     38e:	b0 e0       	ldi	r27, 0x00	; 0
     390:	ec ec       	ldi	r30, 0xCC	; 204
     392:	f1 e0       	ldi	r31, 0x01	; 1
     394:	0c 94 5d 19 	jmp	0x32ba	; 0x32ba <__prologue_saves__+0x18>
     398:	69 83       	std	Y+1, r22	; 0x01
     39a:	7a 83       	std	Y+2, r23	; 0x02
     39c:	8b 83       	std	Y+3, r24	; 0x03
     39e:	9c 83       	std	Y+4, r25	; 0x04
     3a0:	2d 83       	std	Y+5, r18	; 0x05
     3a2:	3e 83       	std	Y+6, r19	; 0x06
     3a4:	4f 83       	std	Y+7, r20	; 0x07
     3a6:	58 87       	std	Y+8, r21	; 0x08
     3a8:	f9 e0       	ldi	r31, 0x09	; 9
     3aa:	ef 2e       	mov	r14, r31
     3ac:	f1 2c       	mov	r15, r1
     3ae:	ec 0e       	add	r14, r28
     3b0:	fd 1e       	adc	r15, r29
     3b2:	ce 01       	movw	r24, r28
     3b4:	01 96       	adiw	r24, 0x01	; 1
     3b6:	b7 01       	movw	r22, r14
     3b8:	0e 94 c3 04 	call	0x986	; 0x986 <__unpack_f>
     3bc:	8e 01       	movw	r16, r28
     3be:	0f 5e       	subi	r16, 0xEF	; 239
     3c0:	1f 4f       	sbci	r17, 0xFF	; 255
     3c2:	ce 01       	movw	r24, r28
     3c4:	05 96       	adiw	r24, 0x05	; 5
     3c6:	b8 01       	movw	r22, r16
     3c8:	0e 94 c3 04 	call	0x986	; 0x986 <__unpack_f>
     3cc:	c7 01       	movw	r24, r14
     3ce:	b8 01       	movw	r22, r16
     3d0:	ae 01       	movw	r20, r28
     3d2:	47 5e       	subi	r20, 0xE7	; 231
     3d4:	5f 4f       	sbci	r21, 0xFF	; 255
     3d6:	0e 94 49 00 	call	0x92	; 0x92 <_fpadd_parts>
     3da:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__pack_f>
     3de:	a0 96       	adiw	r28, 0x20	; 32
     3e0:	e6 e0       	ldi	r30, 0x06	; 6
     3e2:	0c 94 79 19 	jmp	0x32f2	; 0x32f2 <__epilogue_restores__+0x18>

000003e6 <__mulsf3>:
     3e6:	a0 e2       	ldi	r26, 0x20	; 32
     3e8:	b0 e0       	ldi	r27, 0x00	; 0
     3ea:	e9 ef       	ldi	r30, 0xF9	; 249
     3ec:	f1 e0       	ldi	r31, 0x01	; 1
     3ee:	0c 94 51 19 	jmp	0x32a2	; 0x32a2 <__prologue_saves__>
     3f2:	69 83       	std	Y+1, r22	; 0x01
     3f4:	7a 83       	std	Y+2, r23	; 0x02
     3f6:	8b 83       	std	Y+3, r24	; 0x03
     3f8:	9c 83       	std	Y+4, r25	; 0x04
     3fa:	2d 83       	std	Y+5, r18	; 0x05
     3fc:	3e 83       	std	Y+6, r19	; 0x06
     3fe:	4f 83       	std	Y+7, r20	; 0x07
     400:	58 87       	std	Y+8, r21	; 0x08
     402:	ce 01       	movw	r24, r28
     404:	01 96       	adiw	r24, 0x01	; 1
     406:	be 01       	movw	r22, r28
     408:	67 5f       	subi	r22, 0xF7	; 247
     40a:	7f 4f       	sbci	r23, 0xFF	; 255
     40c:	0e 94 c3 04 	call	0x986	; 0x986 <__unpack_f>
     410:	ce 01       	movw	r24, r28
     412:	05 96       	adiw	r24, 0x05	; 5
     414:	be 01       	movw	r22, r28
     416:	6f 5e       	subi	r22, 0xEF	; 239
     418:	7f 4f       	sbci	r23, 0xFF	; 255
     41a:	0e 94 c3 04 	call	0x986	; 0x986 <__unpack_f>
     41e:	99 85       	ldd	r25, Y+9	; 0x09
     420:	92 30       	cpi	r25, 0x02	; 2
     422:	88 f0       	brcs	.+34     	; 0x446 <__mulsf3+0x60>
     424:	89 89       	ldd	r24, Y+17	; 0x11
     426:	82 30       	cpi	r24, 0x02	; 2
     428:	c8 f0       	brcs	.+50     	; 0x45c <__mulsf3+0x76>
     42a:	94 30       	cpi	r25, 0x04	; 4
     42c:	19 f4       	brne	.+6      	; 0x434 <__mulsf3+0x4e>
     42e:	82 30       	cpi	r24, 0x02	; 2
     430:	51 f4       	brne	.+20     	; 0x446 <__mulsf3+0x60>
     432:	04 c0       	rjmp	.+8      	; 0x43c <__mulsf3+0x56>
     434:	84 30       	cpi	r24, 0x04	; 4
     436:	29 f4       	brne	.+10     	; 0x442 <__mulsf3+0x5c>
     438:	92 30       	cpi	r25, 0x02	; 2
     43a:	81 f4       	brne	.+32     	; 0x45c <__mulsf3+0x76>
     43c:	8f e6       	ldi	r24, 0x6F	; 111
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	c6 c0       	rjmp	.+396    	; 0x5ce <__mulsf3+0x1e8>
     442:	92 30       	cpi	r25, 0x02	; 2
     444:	49 f4       	brne	.+18     	; 0x458 <__mulsf3+0x72>
     446:	20 e0       	ldi	r18, 0x00	; 0
     448:	9a 85       	ldd	r25, Y+10	; 0x0a
     44a:	8a 89       	ldd	r24, Y+18	; 0x12
     44c:	98 13       	cpse	r25, r24
     44e:	21 e0       	ldi	r18, 0x01	; 1
     450:	2a 87       	std	Y+10, r18	; 0x0a
     452:	ce 01       	movw	r24, r28
     454:	09 96       	adiw	r24, 0x09	; 9
     456:	bb c0       	rjmp	.+374    	; 0x5ce <__mulsf3+0x1e8>
     458:	82 30       	cpi	r24, 0x02	; 2
     45a:	49 f4       	brne	.+18     	; 0x46e <__mulsf3+0x88>
     45c:	20 e0       	ldi	r18, 0x00	; 0
     45e:	9a 85       	ldd	r25, Y+10	; 0x0a
     460:	8a 89       	ldd	r24, Y+18	; 0x12
     462:	98 13       	cpse	r25, r24
     464:	21 e0       	ldi	r18, 0x01	; 1
     466:	2a 8b       	std	Y+18, r18	; 0x12
     468:	ce 01       	movw	r24, r28
     46a:	41 96       	adiw	r24, 0x11	; 17
     46c:	b0 c0       	rjmp	.+352    	; 0x5ce <__mulsf3+0x1e8>
     46e:	2d 84       	ldd	r2, Y+13	; 0x0d
     470:	3e 84       	ldd	r3, Y+14	; 0x0e
     472:	4f 84       	ldd	r4, Y+15	; 0x0f
     474:	58 88       	ldd	r5, Y+16	; 0x10
     476:	6d 88       	ldd	r6, Y+21	; 0x15
     478:	7e 88       	ldd	r7, Y+22	; 0x16
     47a:	8f 88       	ldd	r8, Y+23	; 0x17
     47c:	98 8c       	ldd	r9, Y+24	; 0x18
     47e:	ee 24       	eor	r14, r14
     480:	ff 24       	eor	r15, r15
     482:	87 01       	movw	r16, r14
     484:	aa 24       	eor	r10, r10
     486:	bb 24       	eor	r11, r11
     488:	65 01       	movw	r12, r10
     48a:	40 e0       	ldi	r20, 0x00	; 0
     48c:	50 e0       	ldi	r21, 0x00	; 0
     48e:	60 e0       	ldi	r22, 0x00	; 0
     490:	70 e0       	ldi	r23, 0x00	; 0
     492:	e0 e0       	ldi	r30, 0x00	; 0
     494:	f0 e0       	ldi	r31, 0x00	; 0
     496:	c1 01       	movw	r24, r2
     498:	81 70       	andi	r24, 0x01	; 1
     49a:	90 70       	andi	r25, 0x00	; 0
     49c:	89 2b       	or	r24, r25
     49e:	e9 f0       	breq	.+58     	; 0x4da <__mulsf3+0xf4>
     4a0:	e6 0c       	add	r14, r6
     4a2:	f7 1c       	adc	r15, r7
     4a4:	08 1d       	adc	r16, r8
     4a6:	19 1d       	adc	r17, r9
     4a8:	9a 01       	movw	r18, r20
     4aa:	ab 01       	movw	r20, r22
     4ac:	2a 0d       	add	r18, r10
     4ae:	3b 1d       	adc	r19, r11
     4b0:	4c 1d       	adc	r20, r12
     4b2:	5d 1d       	adc	r21, r13
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	a0 e0       	ldi	r26, 0x00	; 0
     4ba:	b0 e0       	ldi	r27, 0x00	; 0
     4bc:	e6 14       	cp	r14, r6
     4be:	f7 04       	cpc	r15, r7
     4c0:	08 05       	cpc	r16, r8
     4c2:	19 05       	cpc	r17, r9
     4c4:	20 f4       	brcc	.+8      	; 0x4ce <__mulsf3+0xe8>
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	a0 e0       	ldi	r26, 0x00	; 0
     4cc:	b0 e0       	ldi	r27, 0x00	; 0
     4ce:	ba 01       	movw	r22, r20
     4d0:	a9 01       	movw	r20, r18
     4d2:	48 0f       	add	r20, r24
     4d4:	59 1f       	adc	r21, r25
     4d6:	6a 1f       	adc	r22, r26
     4d8:	7b 1f       	adc	r23, r27
     4da:	aa 0c       	add	r10, r10
     4dc:	bb 1c       	adc	r11, r11
     4de:	cc 1c       	adc	r12, r12
     4e0:	dd 1c       	adc	r13, r13
     4e2:	97 fe       	sbrs	r9, 7
     4e4:	08 c0       	rjmp	.+16     	; 0x4f6 <__mulsf3+0x110>
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	a0 e0       	ldi	r26, 0x00	; 0
     4ec:	b0 e0       	ldi	r27, 0x00	; 0
     4ee:	a8 2a       	or	r10, r24
     4f0:	b9 2a       	or	r11, r25
     4f2:	ca 2a       	or	r12, r26
     4f4:	db 2a       	or	r13, r27
     4f6:	31 96       	adiw	r30, 0x01	; 1
     4f8:	e0 32       	cpi	r30, 0x20	; 32
     4fa:	f1 05       	cpc	r31, r1
     4fc:	49 f0       	breq	.+18     	; 0x510 <__mulsf3+0x12a>
     4fe:	66 0c       	add	r6, r6
     500:	77 1c       	adc	r7, r7
     502:	88 1c       	adc	r8, r8
     504:	99 1c       	adc	r9, r9
     506:	56 94       	lsr	r5
     508:	47 94       	ror	r4
     50a:	37 94       	ror	r3
     50c:	27 94       	ror	r2
     50e:	c3 cf       	rjmp	.-122    	; 0x496 <__mulsf3+0xb0>
     510:	fa 85       	ldd	r31, Y+10	; 0x0a
     512:	ea 89       	ldd	r30, Y+18	; 0x12
     514:	2b 89       	ldd	r18, Y+19	; 0x13
     516:	3c 89       	ldd	r19, Y+20	; 0x14
     518:	8b 85       	ldd	r24, Y+11	; 0x0b
     51a:	9c 85       	ldd	r25, Y+12	; 0x0c
     51c:	28 0f       	add	r18, r24
     51e:	39 1f       	adc	r19, r25
     520:	2e 5f       	subi	r18, 0xFE	; 254
     522:	3f 4f       	sbci	r19, 0xFF	; 255
     524:	17 c0       	rjmp	.+46     	; 0x554 <__mulsf3+0x16e>
     526:	ca 01       	movw	r24, r20
     528:	81 70       	andi	r24, 0x01	; 1
     52a:	90 70       	andi	r25, 0x00	; 0
     52c:	89 2b       	or	r24, r25
     52e:	61 f0       	breq	.+24     	; 0x548 <__mulsf3+0x162>
     530:	16 95       	lsr	r17
     532:	07 95       	ror	r16
     534:	f7 94       	ror	r15
     536:	e7 94       	ror	r14
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	a0 e0       	ldi	r26, 0x00	; 0
     53e:	b0 e8       	ldi	r27, 0x80	; 128
     540:	e8 2a       	or	r14, r24
     542:	f9 2a       	or	r15, r25
     544:	0a 2b       	or	r16, r26
     546:	1b 2b       	or	r17, r27
     548:	76 95       	lsr	r23
     54a:	67 95       	ror	r22
     54c:	57 95       	ror	r21
     54e:	47 95       	ror	r20
     550:	2f 5f       	subi	r18, 0xFF	; 255
     552:	3f 4f       	sbci	r19, 0xFF	; 255
     554:	77 fd       	sbrc	r23, 7
     556:	e7 cf       	rjmp	.-50     	; 0x526 <__mulsf3+0x140>
     558:	0c c0       	rjmp	.+24     	; 0x572 <__mulsf3+0x18c>
     55a:	44 0f       	add	r20, r20
     55c:	55 1f       	adc	r21, r21
     55e:	66 1f       	adc	r22, r22
     560:	77 1f       	adc	r23, r23
     562:	17 fd       	sbrc	r17, 7
     564:	41 60       	ori	r20, 0x01	; 1
     566:	ee 0c       	add	r14, r14
     568:	ff 1c       	adc	r15, r15
     56a:	00 1f       	adc	r16, r16
     56c:	11 1f       	adc	r17, r17
     56e:	21 50       	subi	r18, 0x01	; 1
     570:	30 40       	sbci	r19, 0x00	; 0
     572:	40 30       	cpi	r20, 0x00	; 0
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	59 07       	cpc	r21, r25
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	69 07       	cpc	r22, r25
     57c:	90 e4       	ldi	r25, 0x40	; 64
     57e:	79 07       	cpc	r23, r25
     580:	60 f3       	brcs	.-40     	; 0x55a <__mulsf3+0x174>
     582:	2b 8f       	std	Y+27, r18	; 0x1b
     584:	3c 8f       	std	Y+28, r19	; 0x1c
     586:	db 01       	movw	r26, r22
     588:	ca 01       	movw	r24, r20
     58a:	8f 77       	andi	r24, 0x7F	; 127
     58c:	90 70       	andi	r25, 0x00	; 0
     58e:	a0 70       	andi	r26, 0x00	; 0
     590:	b0 70       	andi	r27, 0x00	; 0
     592:	80 34       	cpi	r24, 0x40	; 64
     594:	91 05       	cpc	r25, r1
     596:	a1 05       	cpc	r26, r1
     598:	b1 05       	cpc	r27, r1
     59a:	61 f4       	brne	.+24     	; 0x5b4 <__mulsf3+0x1ce>
     59c:	47 fd       	sbrc	r20, 7
     59e:	0a c0       	rjmp	.+20     	; 0x5b4 <__mulsf3+0x1ce>
     5a0:	e1 14       	cp	r14, r1
     5a2:	f1 04       	cpc	r15, r1
     5a4:	01 05       	cpc	r16, r1
     5a6:	11 05       	cpc	r17, r1
     5a8:	29 f0       	breq	.+10     	; 0x5b4 <__mulsf3+0x1ce>
     5aa:	40 5c       	subi	r20, 0xC0	; 192
     5ac:	5f 4f       	sbci	r21, 0xFF	; 255
     5ae:	6f 4f       	sbci	r22, 0xFF	; 255
     5b0:	7f 4f       	sbci	r23, 0xFF	; 255
     5b2:	40 78       	andi	r20, 0x80	; 128
     5b4:	1a 8e       	std	Y+26, r1	; 0x1a
     5b6:	fe 17       	cp	r31, r30
     5b8:	11 f0       	breq	.+4      	; 0x5be <__mulsf3+0x1d8>
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	8a 8f       	std	Y+26, r24	; 0x1a
     5be:	4d 8f       	std	Y+29, r20	; 0x1d
     5c0:	5e 8f       	std	Y+30, r21	; 0x1e
     5c2:	6f 8f       	std	Y+31, r22	; 0x1f
     5c4:	78 a3       	std	Y+32, r23	; 0x20
     5c6:	83 e0       	ldi	r24, 0x03	; 3
     5c8:	89 8f       	std	Y+25, r24	; 0x19
     5ca:	ce 01       	movw	r24, r28
     5cc:	49 96       	adiw	r24, 0x19	; 25
     5ce:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__pack_f>
     5d2:	a0 96       	adiw	r28, 0x20	; 32
     5d4:	e2 e1       	ldi	r30, 0x12	; 18
     5d6:	0c 94 6d 19 	jmp	0x32da	; 0x32da <__epilogue_restores__>

000005da <__floatsisf>:
     5da:	a8 e0       	ldi	r26, 0x08	; 8
     5dc:	b0 e0       	ldi	r27, 0x00	; 0
     5de:	e3 ef       	ldi	r30, 0xF3	; 243
     5e0:	f2 e0       	ldi	r31, 0x02	; 2
     5e2:	0c 94 5a 19 	jmp	0x32b4	; 0x32b4 <__prologue_saves__+0x12>
     5e6:	9b 01       	movw	r18, r22
     5e8:	ac 01       	movw	r20, r24
     5ea:	83 e0       	ldi	r24, 0x03	; 3
     5ec:	89 83       	std	Y+1, r24	; 0x01
     5ee:	da 01       	movw	r26, r20
     5f0:	c9 01       	movw	r24, r18
     5f2:	88 27       	eor	r24, r24
     5f4:	b7 fd       	sbrc	r27, 7
     5f6:	83 95       	inc	r24
     5f8:	99 27       	eor	r25, r25
     5fa:	aa 27       	eor	r26, r26
     5fc:	bb 27       	eor	r27, r27
     5fe:	b8 2e       	mov	r11, r24
     600:	21 15       	cp	r18, r1
     602:	31 05       	cpc	r19, r1
     604:	41 05       	cpc	r20, r1
     606:	51 05       	cpc	r21, r1
     608:	19 f4       	brne	.+6      	; 0x610 <__floatsisf+0x36>
     60a:	82 e0       	ldi	r24, 0x02	; 2
     60c:	89 83       	std	Y+1, r24	; 0x01
     60e:	3a c0       	rjmp	.+116    	; 0x684 <__floatsisf+0xaa>
     610:	88 23       	and	r24, r24
     612:	a9 f0       	breq	.+42     	; 0x63e <__floatsisf+0x64>
     614:	20 30       	cpi	r18, 0x00	; 0
     616:	80 e0       	ldi	r24, 0x00	; 0
     618:	38 07       	cpc	r19, r24
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	48 07       	cpc	r20, r24
     61e:	80 e8       	ldi	r24, 0x80	; 128
     620:	58 07       	cpc	r21, r24
     622:	29 f4       	brne	.+10     	; 0x62e <__floatsisf+0x54>
     624:	60 e0       	ldi	r22, 0x00	; 0
     626:	70 e0       	ldi	r23, 0x00	; 0
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	9f ec       	ldi	r25, 0xCF	; 207
     62c:	30 c0       	rjmp	.+96     	; 0x68e <__floatsisf+0xb4>
     62e:	ee 24       	eor	r14, r14
     630:	ff 24       	eor	r15, r15
     632:	87 01       	movw	r16, r14
     634:	e2 1a       	sub	r14, r18
     636:	f3 0a       	sbc	r15, r19
     638:	04 0b       	sbc	r16, r20
     63a:	15 0b       	sbc	r17, r21
     63c:	02 c0       	rjmp	.+4      	; 0x642 <__floatsisf+0x68>
     63e:	79 01       	movw	r14, r18
     640:	8a 01       	movw	r16, r20
     642:	8e e1       	ldi	r24, 0x1E	; 30
     644:	c8 2e       	mov	r12, r24
     646:	d1 2c       	mov	r13, r1
     648:	dc 82       	std	Y+4, r13	; 0x04
     64a:	cb 82       	std	Y+3, r12	; 0x03
     64c:	ed 82       	std	Y+5, r14	; 0x05
     64e:	fe 82       	std	Y+6, r15	; 0x06
     650:	0f 83       	std	Y+7, r16	; 0x07
     652:	18 87       	std	Y+8, r17	; 0x08
     654:	c8 01       	movw	r24, r16
     656:	b7 01       	movw	r22, r14
     658:	0e 94 9f 03 	call	0x73e	; 0x73e <__clzsi2>
     65c:	01 97       	sbiw	r24, 0x01	; 1
     65e:	18 16       	cp	r1, r24
     660:	19 06       	cpc	r1, r25
     662:	84 f4       	brge	.+32     	; 0x684 <__floatsisf+0xaa>
     664:	08 2e       	mov	r0, r24
     666:	04 c0       	rjmp	.+8      	; 0x670 <__floatsisf+0x96>
     668:	ee 0c       	add	r14, r14
     66a:	ff 1c       	adc	r15, r15
     66c:	00 1f       	adc	r16, r16
     66e:	11 1f       	adc	r17, r17
     670:	0a 94       	dec	r0
     672:	d2 f7       	brpl	.-12     	; 0x668 <__floatsisf+0x8e>
     674:	ed 82       	std	Y+5, r14	; 0x05
     676:	fe 82       	std	Y+6, r15	; 0x06
     678:	0f 83       	std	Y+7, r16	; 0x07
     67a:	18 87       	std	Y+8, r17	; 0x08
     67c:	c8 1a       	sub	r12, r24
     67e:	d9 0a       	sbc	r13, r25
     680:	dc 82       	std	Y+4, r13	; 0x04
     682:	cb 82       	std	Y+3, r12	; 0x03
     684:	ba 82       	std	Y+2, r11	; 0x02
     686:	ce 01       	movw	r24, r28
     688:	01 96       	adiw	r24, 0x01	; 1
     68a:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__pack_f>
     68e:	28 96       	adiw	r28, 0x08	; 8
     690:	e9 e0       	ldi	r30, 0x09	; 9
     692:	0c 94 76 19 	jmp	0x32ec	; 0x32ec <__epilogue_restores__+0x12>

00000696 <__fixsfsi>:
     696:	ac e0       	ldi	r26, 0x0C	; 12
     698:	b0 e0       	ldi	r27, 0x00	; 0
     69a:	e1 e5       	ldi	r30, 0x51	; 81
     69c:	f3 e0       	ldi	r31, 0x03	; 3
     69e:	0c 94 61 19 	jmp	0x32c2	; 0x32c2 <__prologue_saves__+0x20>
     6a2:	69 83       	std	Y+1, r22	; 0x01
     6a4:	7a 83       	std	Y+2, r23	; 0x02
     6a6:	8b 83       	std	Y+3, r24	; 0x03
     6a8:	9c 83       	std	Y+4, r25	; 0x04
     6aa:	ce 01       	movw	r24, r28
     6ac:	01 96       	adiw	r24, 0x01	; 1
     6ae:	be 01       	movw	r22, r28
     6b0:	6b 5f       	subi	r22, 0xFB	; 251
     6b2:	7f 4f       	sbci	r23, 0xFF	; 255
     6b4:	0e 94 c3 04 	call	0x986	; 0x986 <__unpack_f>
     6b8:	8d 81       	ldd	r24, Y+5	; 0x05
     6ba:	82 30       	cpi	r24, 0x02	; 2
     6bc:	61 f1       	breq	.+88     	; 0x716 <__fixsfsi+0x80>
     6be:	82 30       	cpi	r24, 0x02	; 2
     6c0:	50 f1       	brcs	.+84     	; 0x716 <__fixsfsi+0x80>
     6c2:	84 30       	cpi	r24, 0x04	; 4
     6c4:	21 f4       	brne	.+8      	; 0x6ce <__fixsfsi+0x38>
     6c6:	8e 81       	ldd	r24, Y+6	; 0x06
     6c8:	88 23       	and	r24, r24
     6ca:	51 f1       	breq	.+84     	; 0x720 <__fixsfsi+0x8a>
     6cc:	2e c0       	rjmp	.+92     	; 0x72a <__fixsfsi+0x94>
     6ce:	2f 81       	ldd	r18, Y+7	; 0x07
     6d0:	38 85       	ldd	r19, Y+8	; 0x08
     6d2:	37 fd       	sbrc	r19, 7
     6d4:	20 c0       	rjmp	.+64     	; 0x716 <__fixsfsi+0x80>
     6d6:	6e 81       	ldd	r22, Y+6	; 0x06
     6d8:	2f 31       	cpi	r18, 0x1F	; 31
     6da:	31 05       	cpc	r19, r1
     6dc:	1c f0       	brlt	.+6      	; 0x6e4 <__fixsfsi+0x4e>
     6de:	66 23       	and	r22, r22
     6e0:	f9 f0       	breq	.+62     	; 0x720 <__fixsfsi+0x8a>
     6e2:	23 c0       	rjmp	.+70     	; 0x72a <__fixsfsi+0x94>
     6e4:	8e e1       	ldi	r24, 0x1E	; 30
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	82 1b       	sub	r24, r18
     6ea:	93 0b       	sbc	r25, r19
     6ec:	29 85       	ldd	r18, Y+9	; 0x09
     6ee:	3a 85       	ldd	r19, Y+10	; 0x0a
     6f0:	4b 85       	ldd	r20, Y+11	; 0x0b
     6f2:	5c 85       	ldd	r21, Y+12	; 0x0c
     6f4:	04 c0       	rjmp	.+8      	; 0x6fe <__fixsfsi+0x68>
     6f6:	56 95       	lsr	r21
     6f8:	47 95       	ror	r20
     6fa:	37 95       	ror	r19
     6fc:	27 95       	ror	r18
     6fe:	8a 95       	dec	r24
     700:	d2 f7       	brpl	.-12     	; 0x6f6 <__fixsfsi+0x60>
     702:	66 23       	and	r22, r22
     704:	b1 f0       	breq	.+44     	; 0x732 <__fixsfsi+0x9c>
     706:	50 95       	com	r21
     708:	40 95       	com	r20
     70a:	30 95       	com	r19
     70c:	21 95       	neg	r18
     70e:	3f 4f       	sbci	r19, 0xFF	; 255
     710:	4f 4f       	sbci	r20, 0xFF	; 255
     712:	5f 4f       	sbci	r21, 0xFF	; 255
     714:	0e c0       	rjmp	.+28     	; 0x732 <__fixsfsi+0x9c>
     716:	20 e0       	ldi	r18, 0x00	; 0
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	40 e0       	ldi	r20, 0x00	; 0
     71c:	50 e0       	ldi	r21, 0x00	; 0
     71e:	09 c0       	rjmp	.+18     	; 0x732 <__fixsfsi+0x9c>
     720:	2f ef       	ldi	r18, 0xFF	; 255
     722:	3f ef       	ldi	r19, 0xFF	; 255
     724:	4f ef       	ldi	r20, 0xFF	; 255
     726:	5f e7       	ldi	r21, 0x7F	; 127
     728:	04 c0       	rjmp	.+8      	; 0x732 <__fixsfsi+0x9c>
     72a:	20 e0       	ldi	r18, 0x00	; 0
     72c:	30 e0       	ldi	r19, 0x00	; 0
     72e:	40 e0       	ldi	r20, 0x00	; 0
     730:	50 e8       	ldi	r21, 0x80	; 128
     732:	b9 01       	movw	r22, r18
     734:	ca 01       	movw	r24, r20
     736:	2c 96       	adiw	r28, 0x0c	; 12
     738:	e2 e0       	ldi	r30, 0x02	; 2
     73a:	0c 94 7d 19 	jmp	0x32fa	; 0x32fa <__epilogue_restores__+0x20>

0000073e <__clzsi2>:
     73e:	ef 92       	push	r14
     740:	ff 92       	push	r15
     742:	0f 93       	push	r16
     744:	1f 93       	push	r17
     746:	7b 01       	movw	r14, r22
     748:	8c 01       	movw	r16, r24
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	e8 16       	cp	r14, r24
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	f8 06       	cpc	r15, r24
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	08 07       	cpc	r16, r24
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	18 07       	cpc	r17, r24
     75a:	88 f4       	brcc	.+34     	; 0x77e <__clzsi2+0x40>
     75c:	8f ef       	ldi	r24, 0xFF	; 255
     75e:	e8 16       	cp	r14, r24
     760:	f1 04       	cpc	r15, r1
     762:	01 05       	cpc	r16, r1
     764:	11 05       	cpc	r17, r1
     766:	31 f0       	breq	.+12     	; 0x774 <__clzsi2+0x36>
     768:	28 f0       	brcs	.+10     	; 0x774 <__clzsi2+0x36>
     76a:	88 e0       	ldi	r24, 0x08	; 8
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	a0 e0       	ldi	r26, 0x00	; 0
     770:	b0 e0       	ldi	r27, 0x00	; 0
     772:	17 c0       	rjmp	.+46     	; 0x7a2 <__clzsi2+0x64>
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	a0 e0       	ldi	r26, 0x00	; 0
     77a:	b0 e0       	ldi	r27, 0x00	; 0
     77c:	12 c0       	rjmp	.+36     	; 0x7a2 <__clzsi2+0x64>
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	e8 16       	cp	r14, r24
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	f8 06       	cpc	r15, r24
     786:	80 e0       	ldi	r24, 0x00	; 0
     788:	08 07       	cpc	r16, r24
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	18 07       	cpc	r17, r24
     78e:	28 f0       	brcs	.+10     	; 0x79a <__clzsi2+0x5c>
     790:	88 e1       	ldi	r24, 0x18	; 24
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	a0 e0       	ldi	r26, 0x00	; 0
     796:	b0 e0       	ldi	r27, 0x00	; 0
     798:	04 c0       	rjmp	.+8      	; 0x7a2 <__clzsi2+0x64>
     79a:	80 e1       	ldi	r24, 0x10	; 16
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	a0 e0       	ldi	r26, 0x00	; 0
     7a0:	b0 e0       	ldi	r27, 0x00	; 0
     7a2:	20 e2       	ldi	r18, 0x20	; 32
     7a4:	30 e0       	ldi	r19, 0x00	; 0
     7a6:	40 e0       	ldi	r20, 0x00	; 0
     7a8:	50 e0       	ldi	r21, 0x00	; 0
     7aa:	28 1b       	sub	r18, r24
     7ac:	39 0b       	sbc	r19, r25
     7ae:	4a 0b       	sbc	r20, r26
     7b0:	5b 0b       	sbc	r21, r27
     7b2:	04 c0       	rjmp	.+8      	; 0x7bc <__clzsi2+0x7e>
     7b4:	16 95       	lsr	r17
     7b6:	07 95       	ror	r16
     7b8:	f7 94       	ror	r15
     7ba:	e7 94       	ror	r14
     7bc:	8a 95       	dec	r24
     7be:	d2 f7       	brpl	.-12     	; 0x7b4 <__clzsi2+0x76>
     7c0:	f7 01       	movw	r30, r14
     7c2:	e9 58       	subi	r30, 0x89	; 137
     7c4:	ff 4f       	sbci	r31, 0xFF	; 255
     7c6:	80 81       	ld	r24, Z
     7c8:	28 1b       	sub	r18, r24
     7ca:	31 09       	sbc	r19, r1
     7cc:	41 09       	sbc	r20, r1
     7ce:	51 09       	sbc	r21, r1
     7d0:	c9 01       	movw	r24, r18
     7d2:	1f 91       	pop	r17
     7d4:	0f 91       	pop	r16
     7d6:	ff 90       	pop	r15
     7d8:	ef 90       	pop	r14
     7da:	08 95       	ret

000007dc <__pack_f>:
     7dc:	df 92       	push	r13
     7de:	ef 92       	push	r14
     7e0:	ff 92       	push	r15
     7e2:	0f 93       	push	r16
     7e4:	1f 93       	push	r17
     7e6:	fc 01       	movw	r30, r24
     7e8:	e4 80       	ldd	r14, Z+4	; 0x04
     7ea:	f5 80       	ldd	r15, Z+5	; 0x05
     7ec:	06 81       	ldd	r16, Z+6	; 0x06
     7ee:	17 81       	ldd	r17, Z+7	; 0x07
     7f0:	d1 80       	ldd	r13, Z+1	; 0x01
     7f2:	80 81       	ld	r24, Z
     7f4:	82 30       	cpi	r24, 0x02	; 2
     7f6:	48 f4       	brcc	.+18     	; 0x80a <__pack_f+0x2e>
     7f8:	80 e0       	ldi	r24, 0x00	; 0
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	a0 e1       	ldi	r26, 0x10	; 16
     7fe:	b0 e0       	ldi	r27, 0x00	; 0
     800:	e8 2a       	or	r14, r24
     802:	f9 2a       	or	r15, r25
     804:	0a 2b       	or	r16, r26
     806:	1b 2b       	or	r17, r27
     808:	a5 c0       	rjmp	.+330    	; 0x954 <__stack+0xf5>
     80a:	84 30       	cpi	r24, 0x04	; 4
     80c:	09 f4       	brne	.+2      	; 0x810 <__pack_f+0x34>
     80e:	9f c0       	rjmp	.+318    	; 0x94e <__stack+0xef>
     810:	82 30       	cpi	r24, 0x02	; 2
     812:	21 f4       	brne	.+8      	; 0x81c <__pack_f+0x40>
     814:	ee 24       	eor	r14, r14
     816:	ff 24       	eor	r15, r15
     818:	87 01       	movw	r16, r14
     81a:	05 c0       	rjmp	.+10     	; 0x826 <__pack_f+0x4a>
     81c:	e1 14       	cp	r14, r1
     81e:	f1 04       	cpc	r15, r1
     820:	01 05       	cpc	r16, r1
     822:	11 05       	cpc	r17, r1
     824:	19 f4       	brne	.+6      	; 0x82c <__pack_f+0x50>
     826:	e0 e0       	ldi	r30, 0x00	; 0
     828:	f0 e0       	ldi	r31, 0x00	; 0
     82a:	96 c0       	rjmp	.+300    	; 0x958 <__stack+0xf9>
     82c:	62 81       	ldd	r22, Z+2	; 0x02
     82e:	73 81       	ldd	r23, Z+3	; 0x03
     830:	9f ef       	ldi	r25, 0xFF	; 255
     832:	62 38       	cpi	r22, 0x82	; 130
     834:	79 07       	cpc	r23, r25
     836:	0c f0       	brlt	.+2      	; 0x83a <__pack_f+0x5e>
     838:	5b c0       	rjmp	.+182    	; 0x8f0 <__stack+0x91>
     83a:	22 e8       	ldi	r18, 0x82	; 130
     83c:	3f ef       	ldi	r19, 0xFF	; 255
     83e:	26 1b       	sub	r18, r22
     840:	37 0b       	sbc	r19, r23
     842:	2a 31       	cpi	r18, 0x1A	; 26
     844:	31 05       	cpc	r19, r1
     846:	2c f0       	brlt	.+10     	; 0x852 <__pack_f+0x76>
     848:	20 e0       	ldi	r18, 0x00	; 0
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	40 e0       	ldi	r20, 0x00	; 0
     84e:	50 e0       	ldi	r21, 0x00	; 0
     850:	2a c0       	rjmp	.+84     	; 0x8a6 <__stack+0x47>
     852:	b8 01       	movw	r22, r16
     854:	a7 01       	movw	r20, r14
     856:	02 2e       	mov	r0, r18
     858:	04 c0       	rjmp	.+8      	; 0x862 <__stack+0x3>
     85a:	76 95       	lsr	r23
     85c:	67 95       	ror	r22
     85e:	57 95       	ror	r21
     860:	47 95       	ror	r20
     862:	0a 94       	dec	r0
     864:	d2 f7       	brpl	.-12     	; 0x85a <__pack_f+0x7e>
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	a0 e0       	ldi	r26, 0x00	; 0
     86c:	b0 e0       	ldi	r27, 0x00	; 0
     86e:	04 c0       	rjmp	.+8      	; 0x878 <__stack+0x19>
     870:	88 0f       	add	r24, r24
     872:	99 1f       	adc	r25, r25
     874:	aa 1f       	adc	r26, r26
     876:	bb 1f       	adc	r27, r27
     878:	2a 95       	dec	r18
     87a:	d2 f7       	brpl	.-12     	; 0x870 <__stack+0x11>
     87c:	01 97       	sbiw	r24, 0x01	; 1
     87e:	a1 09       	sbc	r26, r1
     880:	b1 09       	sbc	r27, r1
     882:	8e 21       	and	r24, r14
     884:	9f 21       	and	r25, r15
     886:	a0 23       	and	r26, r16
     888:	b1 23       	and	r27, r17
     88a:	00 97       	sbiw	r24, 0x00	; 0
     88c:	a1 05       	cpc	r26, r1
     88e:	b1 05       	cpc	r27, r1
     890:	21 f0       	breq	.+8      	; 0x89a <__stack+0x3b>
     892:	81 e0       	ldi	r24, 0x01	; 1
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	a0 e0       	ldi	r26, 0x00	; 0
     898:	b0 e0       	ldi	r27, 0x00	; 0
     89a:	9a 01       	movw	r18, r20
     89c:	ab 01       	movw	r20, r22
     89e:	28 2b       	or	r18, r24
     8a0:	39 2b       	or	r19, r25
     8a2:	4a 2b       	or	r20, r26
     8a4:	5b 2b       	or	r21, r27
     8a6:	da 01       	movw	r26, r20
     8a8:	c9 01       	movw	r24, r18
     8aa:	8f 77       	andi	r24, 0x7F	; 127
     8ac:	90 70       	andi	r25, 0x00	; 0
     8ae:	a0 70       	andi	r26, 0x00	; 0
     8b0:	b0 70       	andi	r27, 0x00	; 0
     8b2:	80 34       	cpi	r24, 0x40	; 64
     8b4:	91 05       	cpc	r25, r1
     8b6:	a1 05       	cpc	r26, r1
     8b8:	b1 05       	cpc	r27, r1
     8ba:	39 f4       	brne	.+14     	; 0x8ca <__stack+0x6b>
     8bc:	27 ff       	sbrs	r18, 7
     8be:	09 c0       	rjmp	.+18     	; 0x8d2 <__stack+0x73>
     8c0:	20 5c       	subi	r18, 0xC0	; 192
     8c2:	3f 4f       	sbci	r19, 0xFF	; 255
     8c4:	4f 4f       	sbci	r20, 0xFF	; 255
     8c6:	5f 4f       	sbci	r21, 0xFF	; 255
     8c8:	04 c0       	rjmp	.+8      	; 0x8d2 <__stack+0x73>
     8ca:	21 5c       	subi	r18, 0xC1	; 193
     8cc:	3f 4f       	sbci	r19, 0xFF	; 255
     8ce:	4f 4f       	sbci	r20, 0xFF	; 255
     8d0:	5f 4f       	sbci	r21, 0xFF	; 255
     8d2:	e0 e0       	ldi	r30, 0x00	; 0
     8d4:	f0 e0       	ldi	r31, 0x00	; 0
     8d6:	20 30       	cpi	r18, 0x00	; 0
     8d8:	a0 e0       	ldi	r26, 0x00	; 0
     8da:	3a 07       	cpc	r19, r26
     8dc:	a0 e0       	ldi	r26, 0x00	; 0
     8de:	4a 07       	cpc	r20, r26
     8e0:	a0 e4       	ldi	r26, 0x40	; 64
     8e2:	5a 07       	cpc	r21, r26
     8e4:	10 f0       	brcs	.+4      	; 0x8ea <__stack+0x8b>
     8e6:	e1 e0       	ldi	r30, 0x01	; 1
     8e8:	f0 e0       	ldi	r31, 0x00	; 0
     8ea:	79 01       	movw	r14, r18
     8ec:	8a 01       	movw	r16, r20
     8ee:	27 c0       	rjmp	.+78     	; 0x93e <__stack+0xdf>
     8f0:	60 38       	cpi	r22, 0x80	; 128
     8f2:	71 05       	cpc	r23, r1
     8f4:	64 f5       	brge	.+88     	; 0x94e <__stack+0xef>
     8f6:	fb 01       	movw	r30, r22
     8f8:	e1 58       	subi	r30, 0x81	; 129
     8fa:	ff 4f       	sbci	r31, 0xFF	; 255
     8fc:	d8 01       	movw	r26, r16
     8fe:	c7 01       	movw	r24, r14
     900:	8f 77       	andi	r24, 0x7F	; 127
     902:	90 70       	andi	r25, 0x00	; 0
     904:	a0 70       	andi	r26, 0x00	; 0
     906:	b0 70       	andi	r27, 0x00	; 0
     908:	80 34       	cpi	r24, 0x40	; 64
     90a:	91 05       	cpc	r25, r1
     90c:	a1 05       	cpc	r26, r1
     90e:	b1 05       	cpc	r27, r1
     910:	39 f4       	brne	.+14     	; 0x920 <__stack+0xc1>
     912:	e7 fe       	sbrs	r14, 7
     914:	0d c0       	rjmp	.+26     	; 0x930 <__stack+0xd1>
     916:	80 e4       	ldi	r24, 0x40	; 64
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	a0 e0       	ldi	r26, 0x00	; 0
     91c:	b0 e0       	ldi	r27, 0x00	; 0
     91e:	04 c0       	rjmp	.+8      	; 0x928 <__stack+0xc9>
     920:	8f e3       	ldi	r24, 0x3F	; 63
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	a0 e0       	ldi	r26, 0x00	; 0
     926:	b0 e0       	ldi	r27, 0x00	; 0
     928:	e8 0e       	add	r14, r24
     92a:	f9 1e       	adc	r15, r25
     92c:	0a 1f       	adc	r16, r26
     92e:	1b 1f       	adc	r17, r27
     930:	17 ff       	sbrs	r17, 7
     932:	05 c0       	rjmp	.+10     	; 0x93e <__stack+0xdf>
     934:	16 95       	lsr	r17
     936:	07 95       	ror	r16
     938:	f7 94       	ror	r15
     93a:	e7 94       	ror	r14
     93c:	31 96       	adiw	r30, 0x01	; 1
     93e:	87 e0       	ldi	r24, 0x07	; 7
     940:	16 95       	lsr	r17
     942:	07 95       	ror	r16
     944:	f7 94       	ror	r15
     946:	e7 94       	ror	r14
     948:	8a 95       	dec	r24
     94a:	d1 f7       	brne	.-12     	; 0x940 <__stack+0xe1>
     94c:	05 c0       	rjmp	.+10     	; 0x958 <__stack+0xf9>
     94e:	ee 24       	eor	r14, r14
     950:	ff 24       	eor	r15, r15
     952:	87 01       	movw	r16, r14
     954:	ef ef       	ldi	r30, 0xFF	; 255
     956:	f0 e0       	ldi	r31, 0x00	; 0
     958:	6e 2f       	mov	r22, r30
     95a:	67 95       	ror	r22
     95c:	66 27       	eor	r22, r22
     95e:	67 95       	ror	r22
     960:	90 2f       	mov	r25, r16
     962:	9f 77       	andi	r25, 0x7F	; 127
     964:	d7 94       	ror	r13
     966:	dd 24       	eor	r13, r13
     968:	d7 94       	ror	r13
     96a:	8e 2f       	mov	r24, r30
     96c:	86 95       	lsr	r24
     96e:	49 2f       	mov	r20, r25
     970:	46 2b       	or	r20, r22
     972:	58 2f       	mov	r21, r24
     974:	5d 29       	or	r21, r13
     976:	b7 01       	movw	r22, r14
     978:	ca 01       	movw	r24, r20
     97a:	1f 91       	pop	r17
     97c:	0f 91       	pop	r16
     97e:	ff 90       	pop	r15
     980:	ef 90       	pop	r14
     982:	df 90       	pop	r13
     984:	08 95       	ret

00000986 <__unpack_f>:
     986:	fc 01       	movw	r30, r24
     988:	db 01       	movw	r26, r22
     98a:	40 81       	ld	r20, Z
     98c:	51 81       	ldd	r21, Z+1	; 0x01
     98e:	22 81       	ldd	r18, Z+2	; 0x02
     990:	62 2f       	mov	r22, r18
     992:	6f 77       	andi	r22, 0x7F	; 127
     994:	70 e0       	ldi	r23, 0x00	; 0
     996:	22 1f       	adc	r18, r18
     998:	22 27       	eor	r18, r18
     99a:	22 1f       	adc	r18, r18
     99c:	93 81       	ldd	r25, Z+3	; 0x03
     99e:	89 2f       	mov	r24, r25
     9a0:	88 0f       	add	r24, r24
     9a2:	82 2b       	or	r24, r18
     9a4:	28 2f       	mov	r18, r24
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	99 1f       	adc	r25, r25
     9aa:	99 27       	eor	r25, r25
     9ac:	99 1f       	adc	r25, r25
     9ae:	11 96       	adiw	r26, 0x01	; 1
     9b0:	9c 93       	st	X, r25
     9b2:	11 97       	sbiw	r26, 0x01	; 1
     9b4:	21 15       	cp	r18, r1
     9b6:	31 05       	cpc	r19, r1
     9b8:	a9 f5       	brne	.+106    	; 0xa24 <__unpack_f+0x9e>
     9ba:	41 15       	cp	r20, r1
     9bc:	51 05       	cpc	r21, r1
     9be:	61 05       	cpc	r22, r1
     9c0:	71 05       	cpc	r23, r1
     9c2:	11 f4       	brne	.+4      	; 0x9c8 <__unpack_f+0x42>
     9c4:	82 e0       	ldi	r24, 0x02	; 2
     9c6:	37 c0       	rjmp	.+110    	; 0xa36 <__unpack_f+0xb0>
     9c8:	82 e8       	ldi	r24, 0x82	; 130
     9ca:	9f ef       	ldi	r25, 0xFF	; 255
     9cc:	13 96       	adiw	r26, 0x03	; 3
     9ce:	9c 93       	st	X, r25
     9d0:	8e 93       	st	-X, r24
     9d2:	12 97       	sbiw	r26, 0x02	; 2
     9d4:	9a 01       	movw	r18, r20
     9d6:	ab 01       	movw	r20, r22
     9d8:	67 e0       	ldi	r22, 0x07	; 7
     9da:	22 0f       	add	r18, r18
     9dc:	33 1f       	adc	r19, r19
     9de:	44 1f       	adc	r20, r20
     9e0:	55 1f       	adc	r21, r21
     9e2:	6a 95       	dec	r22
     9e4:	d1 f7       	brne	.-12     	; 0x9da <__unpack_f+0x54>
     9e6:	83 e0       	ldi	r24, 0x03	; 3
     9e8:	8c 93       	st	X, r24
     9ea:	0d c0       	rjmp	.+26     	; 0xa06 <__unpack_f+0x80>
     9ec:	22 0f       	add	r18, r18
     9ee:	33 1f       	adc	r19, r19
     9f0:	44 1f       	adc	r20, r20
     9f2:	55 1f       	adc	r21, r21
     9f4:	12 96       	adiw	r26, 0x02	; 2
     9f6:	8d 91       	ld	r24, X+
     9f8:	9c 91       	ld	r25, X
     9fa:	13 97       	sbiw	r26, 0x03	; 3
     9fc:	01 97       	sbiw	r24, 0x01	; 1
     9fe:	13 96       	adiw	r26, 0x03	; 3
     a00:	9c 93       	st	X, r25
     a02:	8e 93       	st	-X, r24
     a04:	12 97       	sbiw	r26, 0x02	; 2
     a06:	20 30       	cpi	r18, 0x00	; 0
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	38 07       	cpc	r19, r24
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	48 07       	cpc	r20, r24
     a10:	80 e4       	ldi	r24, 0x40	; 64
     a12:	58 07       	cpc	r21, r24
     a14:	58 f3       	brcs	.-42     	; 0x9ec <__unpack_f+0x66>
     a16:	14 96       	adiw	r26, 0x04	; 4
     a18:	2d 93       	st	X+, r18
     a1a:	3d 93       	st	X+, r19
     a1c:	4d 93       	st	X+, r20
     a1e:	5c 93       	st	X, r21
     a20:	17 97       	sbiw	r26, 0x07	; 7
     a22:	08 95       	ret
     a24:	2f 3f       	cpi	r18, 0xFF	; 255
     a26:	31 05       	cpc	r19, r1
     a28:	79 f4       	brne	.+30     	; 0xa48 <__unpack_f+0xc2>
     a2a:	41 15       	cp	r20, r1
     a2c:	51 05       	cpc	r21, r1
     a2e:	61 05       	cpc	r22, r1
     a30:	71 05       	cpc	r23, r1
     a32:	19 f4       	brne	.+6      	; 0xa3a <__unpack_f+0xb4>
     a34:	84 e0       	ldi	r24, 0x04	; 4
     a36:	8c 93       	st	X, r24
     a38:	08 95       	ret
     a3a:	64 ff       	sbrs	r22, 4
     a3c:	03 c0       	rjmp	.+6      	; 0xa44 <__unpack_f+0xbe>
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	8c 93       	st	X, r24
     a42:	12 c0       	rjmp	.+36     	; 0xa68 <__unpack_f+0xe2>
     a44:	1c 92       	st	X, r1
     a46:	10 c0       	rjmp	.+32     	; 0xa68 <__unpack_f+0xe2>
     a48:	2f 57       	subi	r18, 0x7F	; 127
     a4a:	30 40       	sbci	r19, 0x00	; 0
     a4c:	13 96       	adiw	r26, 0x03	; 3
     a4e:	3c 93       	st	X, r19
     a50:	2e 93       	st	-X, r18
     a52:	12 97       	sbiw	r26, 0x02	; 2
     a54:	83 e0       	ldi	r24, 0x03	; 3
     a56:	8c 93       	st	X, r24
     a58:	87 e0       	ldi	r24, 0x07	; 7
     a5a:	44 0f       	add	r20, r20
     a5c:	55 1f       	adc	r21, r21
     a5e:	66 1f       	adc	r22, r22
     a60:	77 1f       	adc	r23, r23
     a62:	8a 95       	dec	r24
     a64:	d1 f7       	brne	.-12     	; 0xa5a <__unpack_f+0xd4>
     a66:	70 64       	ori	r23, 0x40	; 64
     a68:	14 96       	adiw	r26, 0x04	; 4
     a6a:	4d 93       	st	X+, r20
     a6c:	5d 93       	st	X+, r21
     a6e:	6d 93       	st	X+, r22
     a70:	7c 93       	st	X, r23
     a72:	17 97       	sbiw	r26, 0x07	; 7
     a74:	08 95       	ret

00000a76 <Usart_Delay>:

uint16 TCNT1_Val;

static inline void Usart_Delay(uint16 Val)
{
	TIFR |= (1 << TOV1);// Clear Flag
     a76:	28 b7       	in	r18, 0x38	; 56
     a78:	24 60       	ori	r18, 0x04	; 4
     a7a:	28 bf       	out	0x38, r18	; 56
	TCNT1 = Val;
     a7c:	9d bd       	out	0x2d, r25	; 45
     a7e:	8c bd       	out	0x2c, r24	; 44
	while (!READ_BIT(TIFR, TOV1));
     a80:	08 b6       	in	r0, 0x38	; 56
     a82:	02 fe       	sbrs	r0, 2
     a84:	fd cf       	rjmp	.-6      	; 0xa80 <Usart_Delay+0xa>
	TIFR |= (1 << TOV1);
     a86:	88 b7       	in	r24, 0x38	; 56
     a88:	84 60       	ori	r24, 0x04	; 4
     a8a:	88 bf       	out	0x38, r24	; 56
}
     a8c:	08 95       	ret

00000a8e <BitBanged_Usart_RX>:
	}
	return Err_Status;
}

uint8 BitBanged_Usart_RX(BitBanged_USART *Usart,uint8 *Data)
{
     a8e:	4f 92       	push	r4
     a90:	5f 92       	push	r5
     a92:	6f 92       	push	r6
     a94:	7f 92       	push	r7
     a96:	8f 92       	push	r8
     a98:	9f 92       	push	r9
     a9a:	af 92       	push	r10
     a9c:	bf 92       	push	r11
     a9e:	cf 92       	push	r12
     aa0:	df 92       	push	r13
     aa2:	ef 92       	push	r14
     aa4:	ff 92       	push	r15
     aa6:	0f 93       	push	r16
     aa8:	1f 93       	push	r17
     aaa:	df 93       	push	r29
     aac:	cf 93       	push	r28
     aae:	00 d0       	rcall	.+0      	; 0xab0 <BitBanged_Usart_RX+0x22>
     ab0:	cd b7       	in	r28, 0x3d	; 61
     ab2:	de b7       	in	r29, 0x3e	; 62
     ab4:	4c 01       	movw	r8, r24
     ab6:	6b 01       	movw	r12, r22
	uint8 Err_Status=E_OK;
	uint16 L_TCNT_1Val;
	if(Usart!=NULL&&Data!=NULL)
     ab8:	00 97       	sbiw	r24, 0x00	; 0
     aba:	09 f4       	brne	.+2      	; 0xabe <BitBanged_Usart_RX+0x30>
     abc:	6f c0       	rjmp	.+222    	; 0xb9c <BitBanged_Usart_RX+0x10e>
     abe:	61 15       	cp	r22, r1
     ac0:	71 05       	cpc	r23, r1
     ac2:	09 f4       	brne	.+2      	; 0xac6 <BitBanged_Usart_RX+0x38>
     ac4:	6b c0       	rjmp	.+214    	; 0xb9c <BitBanged_Usart_RX+0x10e>
	{
		uint8 flag=0;
		/*Check A transition from High to Low on RX pin which is the start Bit*/
		if(flag==0){
			L_TCNT_1Val=TCNT1_Val-16;
     ac6:	00 91 b4 01 	lds	r16, 0x01B4
     aca:	10 91 b5 01 	lds	r17, 0x01B5
			flag=TRUE;
		}
		*Data=0;
     ace:	fb 01       	movw	r30, r22
     ad0:	10 82       	st	Z, r1
		uint8 Bits_Tx=0;
		GPIO_state State_RX_PIN=GPIO_HIGH;
     ad2:	81 e0       	ldi	r24, 0x01	; 1
     ad4:	89 83       	std	Y+1, r24	; 0x01
		GPIO_state State_RX_NEW_PIN;
		Mcal_GPIO_READ(&Usart->RX,&State_RX_PIN);
     ad6:	54 01       	movw	r10, r8
     ad8:	08 94       	sec
     ada:	a1 1c       	adc	r10, r1
     adc:	b1 1c       	adc	r11, r1
     ade:	c5 01       	movw	r24, r10
     ae0:	3e 01       	movw	r6, r28
     ae2:	08 94       	sec
     ae4:	61 1c       	adc	r6, r1
     ae6:	71 1c       	adc	r7, r1
     ae8:	b3 01       	movw	r22, r6
     aea:	0e 94 b2 09 	call	0x1364	; 0x1364 <Mcal_GPIO_READ>
		Mcal_GPIO_READ(&Usart->RX,&State_RX_NEW_PIN);
     aee:	c5 01       	movw	r24, r10
     af0:	be 01       	movw	r22, r28
     af2:	6e 5f       	subi	r22, 0xFE	; 254
     af4:	7f 4f       	sbci	r23, 0xFF	; 255
     af6:	0e 94 b2 09 	call	0x1364	; 0x1364 <Mcal_GPIO_READ>
		if((State_RX_PIN==GPIO_HIGH&&State_RX_NEW_PIN==GPIO_LOW)||(State_RX_PIN==GPIO_LOW&&State_RX_NEW_PIN==GPIO_LOW))
     afa:	89 81       	ldd	r24, Y+1	; 0x01
     afc:	82 30       	cpi	r24, 0x02	; 2
     afe:	08 f0       	brcs	.+2      	; 0xb02 <BitBanged_Usart_RX+0x74>
     b00:	4b c0       	rjmp	.+150    	; 0xb98 <BitBanged_Usart_RX+0x10a>
     b02:	8a 81       	ldd	r24, Y+2	; 0x02
     b04:	88 23       	and	r24, r24
     b06:	09 f0       	breq	.+2      	; 0xb0a <BitBanged_Usart_RX+0x7c>
     b08:	47 c0       	rjmp	.+142    	; 0xb98 <BitBanged_Usart_RX+0x10a>
	if(Usart!=NULL&&Data!=NULL)
	{
		uint8 flag=0;
		/*Check A transition from High to Low on RX pin which is the start Bit*/
		if(flag==0){
			L_TCNT_1Val=TCNT1_Val-16;
     b0a:	90 ef       	ldi	r25, 0xF0	; 240
     b0c:	e9 2e       	mov	r14, r25
     b0e:	9f ef       	ldi	r25, 0xFF	; 255
     b10:	f9 2e       	mov	r15, r25
     b12:	e0 0e       	add	r14, r16
     b14:	f1 1e       	adc	r15, r17
		GPIO_state State_RX_NEW_PIN;
		Mcal_GPIO_READ(&Usart->RX,&State_RX_PIN);
		Mcal_GPIO_READ(&Usart->RX,&State_RX_NEW_PIN);
		if((State_RX_PIN==GPIO_HIGH&&State_RX_NEW_PIN==GPIO_LOW)||(State_RX_PIN==GPIO_LOW&&State_RX_NEW_PIN==GPIO_LOW))
		{
			Usart_Delay(L_TCNT_1Val);
     b16:	c7 01       	movw	r24, r14
     b18:	0e 94 3b 05 	call	0xa76	; 0xa76 <Usart_Delay>
     b1c:	00 e0       	ldi	r16, 0x00	; 0
     b1e:	10 e0       	ldi	r17, 0x00	; 0
			for (Bits_Tx = 0; Bits_Tx <= 7; Bits_Tx++) {
				Mcal_GPIO_READ(&Usart->RX,&State_RX_PIN);
     b20:	23 01       	movw	r4, r6
				WRITE_BIT(*Data, Bits_Tx,State_RX_PIN);
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	68 2e       	mov	r6, r24
     b26:	71 2c       	mov	r7, r1
		Mcal_GPIO_READ(&Usart->RX,&State_RX_NEW_PIN);
		if((State_RX_PIN==GPIO_HIGH&&State_RX_NEW_PIN==GPIO_LOW)||(State_RX_PIN==GPIO_LOW&&State_RX_NEW_PIN==GPIO_LOW))
		{
			Usart_Delay(L_TCNT_1Val);
			for (Bits_Tx = 0; Bits_Tx <= 7; Bits_Tx++) {
				Mcal_GPIO_READ(&Usart->RX,&State_RX_PIN);
     b28:	c5 01       	movw	r24, r10
     b2a:	b2 01       	movw	r22, r4
     b2c:	0e 94 b2 09 	call	0x1364	; 0x1364 <Mcal_GPIO_READ>
				WRITE_BIT(*Data, Bits_Tx,State_RX_PIN);
     b30:	89 81       	ldd	r24, Y+1	; 0x01
     b32:	81 30       	cpi	r24, 0x01	; 1
     b34:	61 f4       	brne	.+24     	; 0xb4e <BitBanged_Usart_RX+0xc0>
     b36:	93 01       	movw	r18, r6
     b38:	00 2e       	mov	r0, r16
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <BitBanged_Usart_RX+0xb2>
     b3c:	22 0f       	add	r18, r18
     b3e:	33 1f       	adc	r19, r19
     b40:	0a 94       	dec	r0
     b42:	e2 f7       	brpl	.-8      	; 0xb3c <BitBanged_Usart_RX+0xae>
     b44:	f6 01       	movw	r30, r12
     b46:	80 81       	ld	r24, Z
     b48:	82 2b       	or	r24, r18
     b4a:	80 83       	st	Z, r24
     b4c:	0e c0       	rjmp	.+28     	; 0xb6a <BitBanged_Usart_RX+0xdc>
     b4e:	88 23       	and	r24, r24
     b50:	61 f4       	brne	.+24     	; 0xb6a <BitBanged_Usart_RX+0xdc>
     b52:	c3 01       	movw	r24, r6
     b54:	00 2e       	mov	r0, r16
     b56:	02 c0       	rjmp	.+4      	; 0xb5c <BitBanged_Usart_RX+0xce>
     b58:	88 0f       	add	r24, r24
     b5a:	99 1f       	adc	r25, r25
     b5c:	0a 94       	dec	r0
     b5e:	e2 f7       	brpl	.-8      	; 0xb58 <BitBanged_Usart_RX+0xca>
     b60:	80 95       	com	r24
     b62:	f6 01       	movw	r30, r12
     b64:	20 81       	ld	r18, Z
     b66:	28 23       	and	r18, r24
     b68:	20 83       	st	Z, r18
				Usart_Delay(L_TCNT_1Val);
     b6a:	c7 01       	movw	r24, r14
     b6c:	0e 94 3b 05 	call	0xa76	; 0xa76 <Usart_Delay>
     b70:	0f 5f       	subi	r16, 0xFF	; 255
     b72:	1f 4f       	sbci	r17, 0xFF	; 255
		Mcal_GPIO_READ(&Usart->RX,&State_RX_PIN);
		Mcal_GPIO_READ(&Usart->RX,&State_RX_NEW_PIN);
		if((State_RX_PIN==GPIO_HIGH&&State_RX_NEW_PIN==GPIO_LOW)||(State_RX_PIN==GPIO_LOW&&State_RX_NEW_PIN==GPIO_LOW))
		{
			Usart_Delay(L_TCNT_1Val);
			for (Bits_Tx = 0; Bits_Tx <= 7; Bits_Tx++) {
     b74:	08 30       	cpi	r16, 0x08	; 8
     b76:	11 05       	cpc	r17, r1
     b78:	b9 f6       	brne	.-82     	; 0xb28 <BitBanged_Usart_RX+0x9a>
				Mcal_GPIO_READ(&Usart->RX,&State_RX_PIN);
				WRITE_BIT(*Data, Bits_Tx,State_RX_PIN);
				Usart_Delay(L_TCNT_1Val);
			}
		switch (Usart->No_STOP_Bits) {
     b7a:	f4 01       	movw	r30, r8
     b7c:	82 81       	ldd	r24, Z+2	; 0x02
     b7e:	81 70       	andi	r24, 0x01	; 1
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	00 97       	sbiw	r24, 0x00	; 0
     b84:	19 f0       	breq	.+6      	; 0xb8c <BitBanged_Usart_RX+0xfe>
     b86:	01 97       	sbiw	r24, 0x01	; 1
     b88:	39 f4       	brne	.+14     	; 0xb98 <BitBanged_Usart_RX+0x10a>
     b8a:	03 c0       	rjmp	.+6      	; 0xb92 <BitBanged_Usart_RX+0x104>
			case NUM_STOP_BITS_1:
				Usart_Delay(L_TCNT_1Val);
				break;
			case NUM_STOP_BITS_2: //reduced complexity
				Usart_Delay(L_TCNT_1Val);
     b8c:	c7 01       	movw	r24, r14
     b8e:	0e 94 3b 05 	call	0xa76	; 0xa76 <Usart_Delay>
				Usart_Delay(L_TCNT_1Val);
     b92:	c7 01       	movw	r24, r14
     b94:	0e 94 3b 05 	call	0xa76	; 0xa76 <Usart_Delay>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	01 c0       	rjmp	.+2      	; 0xb9e <BitBanged_Usart_RX+0x110>
     b9c:	80 e0       	ldi	r24, 0x00	; 0
	}
	}else{
		Err_Status=E_NOK;
	}
	return Err_Status;
}
     b9e:	0f 90       	pop	r0
     ba0:	0f 90       	pop	r0
     ba2:	cf 91       	pop	r28
     ba4:	df 91       	pop	r29
     ba6:	1f 91       	pop	r17
     ba8:	0f 91       	pop	r16
     baa:	ff 90       	pop	r15
     bac:	ef 90       	pop	r14
     bae:	df 90       	pop	r13
     bb0:	cf 90       	pop	r12
     bb2:	bf 90       	pop	r11
     bb4:	af 90       	pop	r10
     bb6:	9f 90       	pop	r9
     bb8:	8f 90       	pop	r8
     bba:	7f 90       	pop	r7
     bbc:	6f 90       	pop	r6
     bbe:	5f 90       	pop	r5
     bc0:	4f 90       	pop	r4
     bc2:	08 95       	ret

00000bc4 <BitBanged_Usart_RXStr>:

uint8 BitBanged_Usart_RXStr(BitBanged_USART *Usart,uint8 *Data)
{
     bc4:	0f 93       	push	r16
     bc6:	1f 93       	push	r17
     bc8:	cf 93       	push	r28
     bca:	df 93       	push	r29
     bcc:	8c 01       	movw	r16, r24
     bce:	eb 01       	movw	r28, r22
	uint8 Err_Status=E_OK;
	if(Usart!=NULL&&Data!=NULL)
     bd0:	00 97       	sbiw	r24, 0x00	; 0
     bd2:	71 f0       	breq	.+28     	; 0xbf0 <BitBanged_Usart_RXStr+0x2c>
     bd4:	61 15       	cp	r22, r1
     bd6:	71 05       	cpc	r23, r1
     bd8:	59 f0       	breq	.+22     	; 0xbf0 <BitBanged_Usart_RXStr+0x2c>
	{
		uint8 i=0;
		do{
			BitBanged_Usart_RX(Usart,Data+i);
     bda:	c8 01       	movw	r24, r16
     bdc:	be 01       	movw	r22, r28
     bde:	0e 94 47 05 	call	0xa8e	; 0xa8e <BitBanged_Usart_RX>
		}while(*(Data+i)!='\0'&&*(Data+i)!='#');
     be2:	88 81       	ld	r24, Y
     be4:	88 23       	and	r24, r24
     be6:	11 f0       	breq	.+4      	; 0xbec <BitBanged_Usart_RXStr+0x28>
     be8:	83 32       	cpi	r24, 0x23	; 35
     bea:	b9 f7       	brne	.-18     	; 0xbda <BitBanged_Usart_RXStr+0x16>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	01 c0       	rjmp	.+2      	; 0xbf2 <BitBanged_Usart_RXStr+0x2e>
     bf0:	80 e0       	ldi	r24, 0x00	; 0
	}else{
		Err_Status=E_NOK;
	}
	return Err_Status;
}
     bf2:	df 91       	pop	r29
     bf4:	cf 91       	pop	r28
     bf6:	1f 91       	pop	r17
     bf8:	0f 91       	pop	r16
     bfa:	08 95       	ret

00000bfc <BITBanged_Usart_Send>:
}

GPIO_state sTATE;

uint8 BITBanged_Usart_Send(BitBanged_USART *Usart,uint8 Data)
{
     bfc:	af 92       	push	r10
     bfe:	bf 92       	push	r11
     c00:	cf 92       	push	r12
     c02:	df 92       	push	r13
     c04:	ef 92       	push	r14
     c06:	ff 92       	push	r15
     c08:	0f 93       	push	r16
     c0a:	1f 93       	push	r17
     c0c:	cf 93       	push	r28
     c0e:	df 93       	push	r29
     c10:	7c 01       	movw	r14, r24
     c12:	06 2f       	mov	r16, r22
	uint8 Err_Status=E_OK;
	if(Usart!=NULL){
     c14:	00 97       	sbiw	r24, 0x00	; 0
     c16:	11 f4       	brne	.+4      	; 0xc1c <BITBanged_Usart_Send+0x20>
     c18:	80 e0       	ldi	r24, 0x00	; 0
     c1a:	81 c0       	rjmp	.+258    	; 0xd1e <BITBanged_Usart_Send+0x122>
			uint8 Bits_Tx=0;
			uint8 XOR_val=((Data>>7)&0x01)^((Data>>6)&0x01)^((Data>>5)&0x01)^((Data>>4)&0x01)^((Data>>3)&0x01)^((Data>>2)&0x01)^((Data>>1)&0x01)^((Data>>0)&0x01);
     c1c:	16 2f       	mov	r17, r22
     c1e:	11 70       	andi	r17, 0x01	; 1
     c20:	86 2f       	mov	r24, r22
     c22:	88 1f       	adc	r24, r24
     c24:	88 27       	eor	r24, r24
     c26:	88 1f       	adc	r24, r24
     c28:	18 27       	eor	r17, r24
     c2a:	86 2f       	mov	r24, r22
     c2c:	82 95       	swap	r24
     c2e:	86 95       	lsr	r24
     c30:	86 95       	lsr	r24
     c32:	81 70       	andi	r24, 0x01	; 1
     c34:	18 27       	eor	r17, r24
     c36:	86 2f       	mov	r24, r22
     c38:	82 95       	swap	r24
     c3a:	86 95       	lsr	r24
     c3c:	81 70       	andi	r24, 0x01	; 1
     c3e:	18 27       	eor	r17, r24
     c40:	86 2f       	mov	r24, r22
     c42:	82 95       	swap	r24
     c44:	81 70       	andi	r24, 0x01	; 1
     c46:	18 27       	eor	r17, r24
     c48:	86 2f       	mov	r24, r22
     c4a:	86 95       	lsr	r24
     c4c:	86 95       	lsr	r24
     c4e:	86 95       	lsr	r24
     c50:	81 70       	andi	r24, 0x01	; 1
     c52:	18 27       	eor	r17, r24
     c54:	86 2f       	mov	r24, r22
     c56:	86 95       	lsr	r24
     c58:	86 95       	lsr	r24
     c5a:	81 70       	andi	r24, 0x01	; 1
     c5c:	18 27       	eor	r17, r24
     c5e:	86 2f       	mov	r24, r22
     c60:	86 95       	lsr	r24
     c62:	81 70       	andi	r24, 0x01	; 1
     c64:	18 27       	eor	r17, r24
			/*****Send Start Bit********/
			Mcal_GPIO_WRITE(&Usart->TX,GPIO_LOW);
     c66:	be 2c       	mov	r11, r14
     c68:	af 2c       	mov	r10, r15
     c6a:	c7 01       	movw	r24, r14
     c6c:	60 e0       	ldi	r22, 0x00	; 0
     c6e:	0e 94 7f 09 	call	0x12fe	; 0x12fe <Mcal_GPIO_WRITE>
			Usart_Delay(TCNT1_Val);
     c72:	80 91 b4 01 	lds	r24, 0x01B4
     c76:	90 91 b5 01 	lds	r25, 0x01B5
     c7a:	0e 94 3b 05 	call	0xa76	; 0xa76 <Usart_Delay>
     c7e:	c0 e0       	ldi	r28, 0x00	; 0
     c80:	d0 e0       	ldi	r29, 0x00	; 0
			/****Send 8 Bits**********/
			for(Bits_Tx=0;Bits_Tx<=7;Bits_Tx++)
			{
				Mcal_GPIO_WRITE(&Usart->TX,(Data>>Bits_Tx)&0x01);
     c82:	c0 2e       	mov	r12, r16
     c84:	dd 24       	eor	r13, r13
     c86:	b6 01       	movw	r22, r12
     c88:	0c 2e       	mov	r0, r28
     c8a:	02 c0       	rjmp	.+4      	; 0xc90 <BITBanged_Usart_Send+0x94>
     c8c:	75 95       	asr	r23
     c8e:	67 95       	ror	r22
     c90:	0a 94       	dec	r0
     c92:	e2 f7       	brpl	.-8      	; 0xc8c <BITBanged_Usart_Send+0x90>
     c94:	61 70       	andi	r22, 0x01	; 1
     c96:	8b 2d       	mov	r24, r11
     c98:	9a 2d       	mov	r25, r10
     c9a:	0e 94 7f 09 	call	0x12fe	; 0x12fe <Mcal_GPIO_WRITE>
				Usart_Delay(TCNT1_Val);
     c9e:	80 91 b4 01 	lds	r24, 0x01B4
     ca2:	90 91 b5 01 	lds	r25, 0x01B5
     ca6:	0e 94 3b 05 	call	0xa76	; 0xa76 <Usart_Delay>
     caa:	21 96       	adiw	r28, 0x01	; 1
			uint8 XOR_val=((Data>>7)&0x01)^((Data>>6)&0x01)^((Data>>5)&0x01)^((Data>>4)&0x01)^((Data>>3)&0x01)^((Data>>2)&0x01)^((Data>>1)&0x01)^((Data>>0)&0x01);
			/*****Send Start Bit********/
			Mcal_GPIO_WRITE(&Usart->TX,GPIO_LOW);
			Usart_Delay(TCNT1_Val);
			/****Send 8 Bits**********/
			for(Bits_Tx=0;Bits_Tx<=7;Bits_Tx++)
     cac:	c8 30       	cpi	r28, 0x08	; 8
     cae:	d1 05       	cpc	r29, r1
     cb0:	51 f7       	brne	.-44     	; 0xc86 <BITBanged_Usart_Send+0x8a>
			{
				Mcal_GPIO_WRITE(&Usart->TX,(Data>>Bits_Tx)&0x01);
				Usart_Delay(TCNT1_Val);
			}
			/***Send Parity Bits******/
			switch(Usart->Parity_bits)
     cb2:	f7 01       	movw	r30, r14
     cb4:	82 81       	ldd	r24, Z+2	; 0x02
     cb6:	86 95       	lsr	r24
     cb8:	83 70       	andi	r24, 0x03	; 3
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	00 97       	sbiw	r24, 0x00	; 0
     cbe:	21 f0       	breq	.+8      	; 0xcc8 <BITBanged_Usart_Send+0xcc>
     cc0:	01 97       	sbiw	r24, 0x01	; 1
     cc2:	69 f4       	brne	.+26     	; 0xcde <BITBanged_Usart_Send+0xe2>
				case Parity_EVEN:
					Mcal_GPIO_WRITE(&Usart->TX,XOR_val);
					Usart_Delay(TCNT1_Val);
					break;
				case Parity_ODD:
					Mcal_GPIO_WRITE(&Usart->TX,XOR_val^(1));
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	18 27       	eor	r17, r24
     cc8:	8b 2d       	mov	r24, r11
     cca:	9a 2d       	mov	r25, r10
     ccc:	61 2f       	mov	r22, r17
     cce:	0e 94 7f 09 	call	0x12fe	; 0x12fe <Mcal_GPIO_WRITE>
					Usart_Delay(TCNT1_Val);
     cd2:	80 91 b4 01 	lds	r24, 0x01B4
     cd6:	90 91 b5 01 	lds	r25, 0x01B5
     cda:	0e 94 3b 05 	call	0xa76	; 0xa76 <Usart_Delay>
					break;
				default:
					break;
			}
			/***Send Stop Bits**/
			switch (Usart->No_STOP_Bits) {
     cde:	f7 01       	movw	r30, r14
     ce0:	82 81       	ldd	r24, Z+2	; 0x02
     ce2:	81 70       	andi	r24, 0x01	; 1
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	00 97       	sbiw	r24, 0x00	; 0
     ce8:	19 f0       	breq	.+6      	; 0xcf0 <BITBanged_Usart_Send+0xf4>
     cea:	01 97       	sbiw	r24, 0x01	; 1
     cec:	b9 f4       	brne	.+46     	; 0xd1c <BITBanged_Usart_Send+0x120>
     cee:	0b c0       	rjmp	.+22     	; 0xd06 <BITBanged_Usart_Send+0x10a>
				case NUM_STOP_BITS_1:
					Mcal_GPIO_WRITE(&Usart->TX,GPIO_HIGH);
					Usart_Delay(TCNT1_Val);
					break;
				case NUM_STOP_BITS_2://reduced complexity
					Mcal_GPIO_WRITE(&Usart->TX, GPIO_HIGH);
     cf0:	8b 2d       	mov	r24, r11
     cf2:	9a 2d       	mov	r25, r10
     cf4:	61 e0       	ldi	r22, 0x01	; 1
     cf6:	0e 94 7f 09 	call	0x12fe	; 0x12fe <Mcal_GPIO_WRITE>
					Usart_Delay(TCNT1_Val);
     cfa:	80 91 b4 01 	lds	r24, 0x01B4
     cfe:	90 91 b5 01 	lds	r25, 0x01B5
     d02:	0e 94 3b 05 	call	0xa76	; 0xa76 <Usart_Delay>
					Mcal_GPIO_WRITE(&Usart->TX, GPIO_HIGH);
     d06:	8b 2d       	mov	r24, r11
     d08:	9a 2d       	mov	r25, r10
     d0a:	61 e0       	ldi	r22, 0x01	; 1
     d0c:	0e 94 7f 09 	call	0x12fe	; 0x12fe <Mcal_GPIO_WRITE>
					Usart_Delay(TCNT1_Val);
     d10:	80 91 b4 01 	lds	r24, 0x01B4
     d14:	90 91 b5 01 	lds	r25, 0x01B5
     d18:	0e 94 3b 05 	call	0xa76	; 0xa76 <Usart_Delay>
     d1c:	81 e0       	ldi	r24, 0x01	; 1
			}
	}else{
		Err_Status=E_NOK;
	}
	return Err_Status;
}
     d1e:	df 91       	pop	r29
     d20:	cf 91       	pop	r28
     d22:	1f 91       	pop	r17
     d24:	0f 91       	pop	r16
     d26:	ff 90       	pop	r15
     d28:	ef 90       	pop	r14
     d2a:	df 90       	pop	r13
     d2c:	cf 90       	pop	r12
     d2e:	bf 90       	pop	r11
     d30:	af 90       	pop	r10
     d32:	08 95       	ret

00000d34 <BITBanged_Usart_SendStr>:

uint8 BITBanged_Usart_SendStr(BitBanged_USART *Usart,uint8 *Data)
{
     d34:	0f 93       	push	r16
     d36:	1f 93       	push	r17
     d38:	cf 93       	push	r28
     d3a:	df 93       	push	r29
     d3c:	8c 01       	movw	r16, r24
     d3e:	eb 01       	movw	r28, r22
	uint8 Err_Status=E_OK;
	if (Usart != NULL&&Data!=NULL) {
     d40:	00 97       	sbiw	r24, 0x00	; 0
     d42:	69 f0       	breq	.+26     	; 0xd5e <BITBanged_Usart_SendStr+0x2a>
     d44:	61 15       	cp	r22, r1
     d46:	71 05       	cpc	r23, r1
     d48:	29 f4       	brne	.+10     	; 0xd54 <BITBanged_Usart_SendStr+0x20>
     d4a:	09 c0       	rjmp	.+18     	; 0xd5e <BITBanged_Usart_SendStr+0x2a>
		while(*Data)
		{
			BITBanged_Usart_Send(Usart,*Data);
     d4c:	c8 01       	movw	r24, r16
     d4e:	0e 94 fe 05 	call	0xbfc	; 0xbfc <BITBanged_Usart_Send>
			Data++;
     d52:	21 96       	adiw	r28, 0x01	; 1

uint8 BITBanged_Usart_SendStr(BitBanged_USART *Usart,uint8 *Data)
{
	uint8 Err_Status=E_OK;
	if (Usart != NULL&&Data!=NULL) {
		while(*Data)
     d54:	68 81       	ld	r22, Y
     d56:	66 23       	and	r22, r22
     d58:	c9 f7       	brne	.-14     	; 0xd4c <BITBanged_Usart_SendStr+0x18>
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	01 c0       	rjmp	.+2      	; 0xd60 <BITBanged_Usart_SendStr+0x2c>
     d5e:	80 e0       	ldi	r24, 0x00	; 0
		}
	} else {
		Err_Status = E_NOK;
	}
	return Err_Status;
}
     d60:	df 91       	pop	r29
     d62:	cf 91       	pop	r28
     d64:	1f 91       	pop	r17
     d66:	0f 91       	pop	r16
     d68:	08 95       	ret

00000d6a <BitBanged_Usart_init>:
	while (!READ_BIT(TIFR, TOV1));
	TIFR |= (1 << TOV1);
}

uint8 BitBanged_Usart_init(BitBanged_USART *Usart)
{
     d6a:	0f 93       	push	r16
     d6c:	1f 93       	push	r17
     d6e:	cf 93       	push	r28
     d70:	df 93       	push	r29
     d72:	ec 01       	movw	r28, r24
	uint8 Err_Status=E_OK;
	if(Usart==NULL)
     d74:	00 97       	sbiw	r24, 0x00	; 0
     d76:	11 f4       	brne	.+4      	; 0xd7c <BitBanged_Usart_init+0x12>
     d78:	80 e0       	ldi	r24, 0x00	; 0
     d7a:	39 c0       	rjmp	.+114    	; 0xdee <BitBanged_Usart_init+0x84>
		Err_Status=E_NOK;
	else
	{
		/****Init Send And Recieve Bits**/
		Usart->TX.State=GPIO_HIGH;
     d7c:	88 81       	ld	r24, Y
		Usart->TX.Config=GPIO_OUTPUT;
     d7e:	8f 71       	andi	r24, 0x1F	; 31
     d80:	80 6c       	ori	r24, 0xC0	; 192
     d82:	88 83       	st	Y, r24
		Usart->RX.Config=GPIO_OUTPUT;
     d84:	89 81       	ldd	r24, Y+1	; 0x01
     d86:	8f 79       	andi	r24, 0x9F	; 159
		Usart->RX.State=GPIO_HIGH;
     d88:	80 6c       	ori	r24, 0xC0	; 192
     d8a:	89 83       	std	Y+1, r24	; 0x01
		Mcal_GPIO_INIT(&Usart->TX);
     d8c:	ce 01       	movw	r24, r28
     d8e:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <Mcal_GPIO_INIT>
		Mcal_GPIO_INIT(&Usart->RX);
     d92:	8e 01       	movw	r16, r28
     d94:	0f 5f       	subi	r16, 0xFF	; 255
     d96:	1f 4f       	sbci	r17, 0xFF	; 255
     d98:	c8 01       	movw	r24, r16
     d9a:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <Mcal_GPIO_INIT>
		Usart->RX.Config=GPIO_INPUT;
     d9e:	89 81       	ldd	r24, Y+1	; 0x01
     da0:	8f 79       	andi	r24, 0x9F	; 159
     da2:	89 83       	std	Y+1, r24	; 0x01
		Mcal_GPIO_INIT(&Usart->RX);
     da4:	c8 01       	movw	r24, r16
     da6:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <Mcal_GPIO_INIT>
		/*Initiliaze Timer 1 with suitable Prescaler to make  Time of Tick =1us*/
		TCCR1B|=(1<<CS11);
     daa:	8e b5       	in	r24, 0x2e	; 46
     dac:	82 60       	ori	r24, 0x02	; 2
     dae:	8e bd       	out	0x2e, r24	; 46
		uint16 Temp_Val=(uint16)((uint32)1000000/(Usart->BaudRate));
     db0:	2b 81       	ldd	r18, Y+3	; 0x03
     db2:	3c 81       	ldd	r19, Y+4	; 0x04
     db4:	4d 81       	ldd	r20, Y+5	; 0x05
     db6:	5e 81       	ldd	r21, Y+6	; 0x06
     db8:	60 e4       	ldi	r22, 0x40	; 64
     dba:	72 e4       	ldi	r23, 0x42	; 66
     dbc:	8f e0       	ldi	r24, 0x0F	; 15
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	0e 94 14 19 	call	0x3228	; 0x3228 <__udivmodsi4>
     dc4:	89 01       	movw	r16, r18
     dc6:	9a 01       	movw	r18, r20
		Temp_Val*=2;
     dc8:	00 0f       	add	r16, r16
     dca:	11 1f       	adc	r17, r17
		TCNT1_Val=65536-Temp_Val+(8*Temp_Val)/100;
     dcc:	c8 01       	movw	r24, r16
     dce:	23 e0       	ldi	r18, 0x03	; 3
     dd0:	88 0f       	add	r24, r24
     dd2:	99 1f       	adc	r25, r25
     dd4:	2a 95       	dec	r18
     dd6:	e1 f7       	brne	.-8      	; 0xdd0 <BitBanged_Usart_init+0x66>
     dd8:	64 e6       	ldi	r22, 0x64	; 100
     dda:	70 e0       	ldi	r23, 0x00	; 0
     ddc:	0e 94 ed 18 	call	0x31da	; 0x31da <__udivmodhi4>
     de0:	60 1b       	sub	r22, r16
     de2:	71 0b       	sbc	r23, r17
     de4:	70 93 b5 01 	sts	0x01B5, r23
     de8:	60 93 b4 01 	sts	0x01B4, r22
     dec:	81 e0       	ldi	r24, 0x01	; 1
	}
	return Err_Status;
}
     dee:	df 91       	pop	r29
     df0:	cf 91       	pop	r28
     df2:	1f 91       	pop	r17
     df4:	0f 91       	pop	r16
     df6:	08 95       	ret

00000df8 <__vector_11>:
}
#endif

#if Timer0_OVF_Int==TRUE
ISR(TIMER0_OVF_vect)
{
     df8:	1f 92       	push	r1
     dfa:	0f 92       	push	r0
     dfc:	0f b6       	in	r0, 0x3f	; 63
     dfe:	0f 92       	push	r0
     e00:	11 24       	eor	r1, r1
     e02:	2f 93       	push	r18
     e04:	3f 93       	push	r19
     e06:	4f 93       	push	r20
     e08:	5f 93       	push	r21
     e0a:	6f 93       	push	r22
     e0c:	7f 93       	push	r23
     e0e:	8f 93       	push	r24
     e10:	9f 93       	push	r25
     e12:	af 93       	push	r26
     e14:	bf 93       	push	r27
     e16:	ef 93       	push	r30
     e18:	ff 93       	push	r31
	TIMER_ISR_internal();
     e1a:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <TIMER_ISR_internal>
}
     e1e:	ff 91       	pop	r31
     e20:	ef 91       	pop	r30
     e22:	bf 91       	pop	r27
     e24:	af 91       	pop	r26
     e26:	9f 91       	pop	r25
     e28:	8f 91       	pop	r24
     e2a:	7f 91       	pop	r23
     e2c:	6f 91       	pop	r22
     e2e:	5f 91       	pop	r21
     e30:	4f 91       	pop	r20
     e32:	3f 91       	pop	r19
     e34:	2f 91       	pop	r18
     e36:	0f 90       	pop	r0
     e38:	0f be       	out	0x3f, r0	; 63
     e3a:	0f 90       	pop	r0
     e3c:	1f 90       	pop	r1
     e3e:	18 95       	reti

00000e40 <__vector_16>:
 */
#include "Mcal_External_Interrupts.h"

#if ADC_interrupt_enable==TRUE
ISR(ADC_vect)
{
     e40:	1f 92       	push	r1
     e42:	0f 92       	push	r0
     e44:	0f b6       	in	r0, 0x3f	; 63
     e46:	0f 92       	push	r0
     e48:	11 24       	eor	r1, r1
     e4a:	2f 93       	push	r18
     e4c:	3f 93       	push	r19
     e4e:	4f 93       	push	r20
     e50:	5f 93       	push	r21
     e52:	6f 93       	push	r22
     e54:	7f 93       	push	r23
     e56:	8f 93       	push	r24
     e58:	9f 93       	push	r25
     e5a:	af 93       	push	r26
     e5c:	bf 93       	push	r27
     e5e:	ef 93       	push	r30
     e60:	ff 93       	push	r31
	ADC_ISR();
     e62:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <ADC_ISR>
}
     e66:	ff 91       	pop	r31
     e68:	ef 91       	pop	r30
     e6a:	bf 91       	pop	r27
     e6c:	af 91       	pop	r26
     e6e:	9f 91       	pop	r25
     e70:	8f 91       	pop	r24
     e72:	7f 91       	pop	r23
     e74:	6f 91       	pop	r22
     e76:	5f 91       	pop	r21
     e78:	4f 91       	pop	r20
     e7a:	3f 91       	pop	r19
     e7c:	2f 91       	pop	r18
     e7e:	0f 90       	pop	r0
     e80:	0f be       	out	0x3f, r0	; 63
     e82:	0f 90       	pop	r0
     e84:	1f 90       	pop	r1
     e86:	18 95       	reti

00000e88 <Mcal_I2C_init>:
	return ret;
}


uint8 Mcal_I2C_init(I2C_CONFIG_t *I2C)
{
     e88:	ef 92       	push	r14
     e8a:	ff 92       	push	r15
     e8c:	0f 93       	push	r16
     e8e:	1f 93       	push	r17
     e90:	fc 01       	movw	r30, r24
	Bool ret = E_OK;
	switch (I2C->Prescaler_Freq) {
     e92:	74 81       	ldd	r23, Z+4	; 0x04
     e94:	73 70       	andi	r23, 0x03	; 3
     e96:	87 2f       	mov	r24, r23
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	81 30       	cpi	r24, 0x01	; 1
     e9c:	91 05       	cpc	r25, r1
     e9e:	79 f0       	breq	.+30     	; 0xebe <Mcal_I2C_init+0x36>
     ea0:	82 30       	cpi	r24, 0x02	; 2
     ea2:	91 05       	cpc	r25, r1
     ea4:	1c f4       	brge	.+6      	; 0xeac <Mcal_I2C_init+0x24>
     ea6:	89 2b       	or	r24, r25
     ea8:	41 f0       	breq	.+16     	; 0xeba <Mcal_I2C_init+0x32>
     eaa:	05 c0       	rjmp	.+10     	; 0xeb6 <Mcal_I2C_init+0x2e>
     eac:	82 30       	cpi	r24, 0x02	; 2
     eae:	91 05       	cpc	r25, r1
     eb0:	49 f0       	breq	.+18     	; 0xec4 <Mcal_I2C_init+0x3c>
     eb2:	03 97       	sbiw	r24, 0x03	; 3
     eb4:	49 f0       	breq	.+18     	; 0xec8 <Mcal_I2C_init+0x40>
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	39 c0       	rjmp	.+114    	; 0xf2c <Mcal_I2C_init+0xa4>
	case TWPS_PRESCALER:
		CLEAR_BIT(TWSR, TWPS0);
     eba:	08 98       	cbi	0x01, 0	; 1
     ebc:	01 c0       	rjmp	.+2      	; 0xec0 <Mcal_I2C_init+0x38>
		CLEAR_BIT(TWSR, TWPS1);
		break;
	case TWPS_PRESCALER_4:
		SET_BIT(TWSR, TWPS0);
     ebe:	08 9a       	sbi	0x01, 0	; 1
		CLEAR_BIT(TWSR, TWPS1);
     ec0:	09 98       	cbi	0x01, 1	; 1
     ec2:	04 c0       	rjmp	.+8      	; 0xecc <Mcal_I2C_init+0x44>
		break;
	case TWPS_PRESCALER_16:
		CLEAR_BIT(TWSR, TWPS0);
     ec4:	08 98       	cbi	0x01, 0	; 1
     ec6:	01 c0       	rjmp	.+2      	; 0xeca <Mcal_I2C_init+0x42>
		SET_BIT(TWSR, TWPS1);
		break;
	case TWPS_PRESCALER_64:
		SET_BIT(TWSR, TWPS0);
     ec8:	08 9a       	sbi	0x01, 0	; 1
		SET_BIT(TWSR, TWPS1);
     eca:	09 9a       	sbi	0x01, 1	; 1
		break;
	default:
		ret = E_NOK;
	}
	if (ret == E_OK)
		TWBR = ((uint32) F_CPU / I2C->SCL_FREQ - 16)
     ecc:	20 81       	ld	r18, Z
     ece:	31 81       	ldd	r19, Z+1	; 0x01
     ed0:	42 81       	ldd	r20, Z+2	; 0x02
     ed2:	53 81       	ldd	r21, Z+3	; 0x03
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	e6 2e       	mov	r14, r22
     ed8:	f1 2c       	mov	r15, r1
     eda:	01 2d       	mov	r16, r1
     edc:	11 2d       	mov	r17, r1
     ede:	60 e0       	ldi	r22, 0x00	; 0

static int32 Pow_4(int8 exp)
{
	int8 Counter=0;
	int32 ret=1;
	for(Counter=0;Counter<=exp-1;Counter++)
     ee0:	e7 2f       	mov	r30, r23
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	08 c0       	rjmp	.+16     	; 0xef6 <Mcal_I2C_init+0x6e>
		ret*=4;
     ee6:	92 e0       	ldi	r25, 0x02	; 2
     ee8:	ee 0c       	add	r14, r14
     eea:	ff 1c       	adc	r15, r15
     eec:	00 1f       	adc	r16, r16
     eee:	11 1f       	adc	r17, r17
     ef0:	9a 95       	dec	r25
     ef2:	d1 f7       	brne	.-12     	; 0xee8 <Mcal_I2C_init+0x60>

static int32 Pow_4(int8 exp)
{
	int8 Counter=0;
	int32 ret=1;
	for(Counter=0;Counter<=exp-1;Counter++)
     ef4:	6f 5f       	subi	r22, 0xFF	; 255
     ef6:	86 2f       	mov	r24, r22
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	8e 17       	cp	r24, r30
     efc:	9f 07       	cpc	r25, r31
     efe:	9c f3       	brlt	.-26     	; 0xee6 <Mcal_I2C_init+0x5e>
		break;
	default:
		ret = E_NOK;
	}
	if (ret == E_OK)
		TWBR = ((uint32) F_CPU / I2C->SCL_FREQ - 16)
     f00:	60 e0       	ldi	r22, 0x00	; 0
     f02:	74 e2       	ldi	r23, 0x24	; 36
     f04:	84 ef       	ldi	r24, 0xF4	; 244
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	0e 94 14 19 	call	0x3228	; 0x3228 <__udivmodsi4>
     f0c:	20 51       	subi	r18, 0x10	; 16
     f0e:	30 40       	sbci	r19, 0x00	; 0
     f10:	40 40       	sbci	r20, 0x00	; 0
     f12:	50 40       	sbci	r21, 0x00	; 0
     f14:	ee 0c       	add	r14, r14
     f16:	ff 1c       	adc	r15, r15
     f18:	00 1f       	adc	r16, r16
     f1a:	11 1f       	adc	r17, r17
     f1c:	ca 01       	movw	r24, r20
     f1e:	b9 01       	movw	r22, r18
     f20:	a8 01       	movw	r20, r16
     f22:	97 01       	movw	r18, r14
     f24:	0e 94 14 19 	call	0x3228	; 0x3228 <__udivmodsi4>
     f28:	20 b9       	out	0x00, r18	; 0
     f2a:	91 e0       	ldi	r25, 0x01	; 1
	}
#if I2C_RECIEVE_INTERRUPT==TRUE
	I2C_RX_CALLBACK_PTR = I2C->I2C_RX_CALLBACK;
	SET_BIT(TWCR, TWIE);
#endif
	I2C_PORT_DIR|=((1<<PC0)|(1<<PC1));
     f2c:	84 b3       	in	r24, 0x14	; 20
     f2e:	83 60       	ori	r24, 0x03	; 3
     f30:	84 bb       	out	0x14, r24	; 20
	return ret;
}
     f32:	89 2f       	mov	r24, r25
     f34:	1f 91       	pop	r17
     f36:	0f 91       	pop	r16
     f38:	ff 90       	pop	r15
     f3a:	ef 90       	pop	r14
     f3c:	08 95       	ret

00000f3e <Mcal_I2C_write_byte>:

uint8 Mcal_I2C_write_byte(uint8 Address,uint8 Reg_Address,uint8 byte)
{
     f3e:	98 2f       	mov	r25, r24
	uint8 Err_Status=E_OK;
	/*******Gen start Bit*****/
	Mcal_I2C_GEN_START();
     f40:	86 b7       	in	r24, 0x36	; 54
     f42:	84 6a       	ori	r24, 0xA4	; 164
     f44:	86 bf       	out	0x36, r24	; 54
	Mcal_I2C_Wait();
     f46:	06 b6       	in	r0, 0x36	; 54
     f48:	07 fe       	sbrs	r0, 7
     f4a:	fd cf       	rjmp	.-6      	; 0xf46 <Mcal_I2C_write_byte+0x8>
	/*****Check if start and bus is not busy*/
	if((I2C_STATUS&0xF8)==TWSR_START_MSTR)
     f4c:	81 b1       	in	r24, 0x01	; 1
     f4e:	88 7f       	andi	r24, 0xF8	; 248
     f50:	88 30       	cpi	r24, 0x08	; 8
     f52:	31 f5       	brne	.+76     	; 0xfa0 <Mcal_I2C_write_byte+0x62>
	{
		/**Send Address of I2C device with Ack****/
		I2C_WRITE_BUFFER=Address|I2C_WRITE;
     f54:	93 b9       	out	0x03, r25	; 3
		I2C_WRITE_ENABLE();
     f56:	84 e8       	ldi	r24, 0x84	; 132
     f58:	86 bf       	out	0x36, r24	; 54
		Mcal_I2C_Wait();
     f5a:	06 b6       	in	r0, 0x36	; 54
     f5c:	07 fe       	sbrs	r0, 7
     f5e:	fd cf       	rjmp	.-6      	; 0xf5a <Mcal_I2C_write_byte+0x1c>
		/******Check arbitration*****/
		if((I2C_STATUS&0xF8)==TWSR_MSTR_ADD_ACK_REC)
     f60:	81 b1       	in	r24, 0x01	; 1
     f62:	88 7f       	andi	r24, 0xF8	; 248
     f64:	88 31       	cpi	r24, 0x18	; 24
     f66:	e1 f4       	brne	.+56     	; 0xfa0 <Mcal_I2C_write_byte+0x62>
		{
			/*******Send address of register in I2C device*****/
			I2C_WRITE_BUFFER = Reg_Address|I2C_WRITE;
     f68:	63 b9       	out	0x03, r22	; 3
			I2C_WRITE_ENABLE();
     f6a:	84 e8       	ldi	r24, 0x84	; 132
     f6c:	86 bf       	out	0x36, r24	; 54
			Mcal_I2C_Wait();
     f6e:	06 b6       	in	r0, 0x36	; 54
     f70:	07 fe       	sbrs	r0, 7
     f72:	fd cf       	rjmp	.-6      	; 0xf6e <Mcal_I2C_write_byte+0x30>
			/*******Check arbitration*********/
			if((I2C_STATUS&0xF8)==TWSR_MSTR_DATA_ACK_REC)
     f74:	81 b1       	in	r24, 0x01	; 1
     f76:	88 7f       	andi	r24, 0xF8	; 248
     f78:	88 32       	cpi	r24, 0x28	; 40
     f7a:	91 f4       	brne	.+36     	; 0xfa0 <Mcal_I2C_write_byte+0x62>
			{
				/*********Send Data byte********/
				I2C_WRITE_BUFFER = byte;
     f7c:	43 b9       	out	0x03, r20	; 3
				I2C_WRITE_ENABLE();
     f7e:	84 e8       	ldi	r24, 0x84	; 132
     f80:	86 bf       	out	0x36, r24	; 54
				Mcal_I2C_Wait();
     f82:	06 b6       	in	r0, 0x36	; 54
     f84:	07 fe       	sbrs	r0, 7
     f86:	fd cf       	rjmp	.-6      	; 0xf82 <Mcal_I2C_write_byte+0x44>
				/******Send Stop bit to terminate bus control*/
				if((I2C_STATUS&0xF8)==TWSR_MSTR_DATA_ACK_REC)
     f88:	81 b1       	in	r24, 0x01	; 1
     f8a:	88 7f       	andi	r24, 0xF8	; 248
     f8c:	88 32       	cpi	r24, 0x28	; 40
     f8e:	41 f4       	brne	.+16     	; 0xfa0 <Mcal_I2C_write_byte+0x62>
				{
					Mcal_I2C_GEN_STOP();
     f90:	86 b7       	in	r24, 0x36	; 54
     f92:	84 69       	ori	r24, 0x94	; 148
     f94:	86 bf       	out	0x36, r24	; 54
					Mcal_I2C_Wait_Stop();
     f96:	06 b6       	in	r0, 0x36	; 54
     f98:	07 fc       	sbrc	r0, 7
     f9a:	fd cf       	rjmp	.-6      	; 0xf96 <Mcal_I2C_write_byte+0x58>
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	08 95       	ret
     fa0:	80 e0       	ldi	r24, 0x00	; 0
		}
	}else{
		Err_Status=E_NOK;
	}
	return Err_Status;
}
     fa2:	08 95       	ret

00000fa4 <Mcal_I2C_write_buffer>:

uint8 Mcal_I2C_write_buffer(uint8 Address,uint8 Reg_Address,uint8 *Buffer,uint8 Buffer_len)
{
     fa4:	98 2f       	mov	r25, r24
	uint8 Err_Status = E_OK;
	/*******Gen start Bit*****/
	Mcal_I2C_GEN_START();
     fa6:	86 b7       	in	r24, 0x36	; 54
     fa8:	84 6a       	ori	r24, 0xA4	; 164
     faa:	86 bf       	out	0x36, r24	; 54
	Mcal_I2C_Wait();
     fac:	06 b6       	in	r0, 0x36	; 54
     fae:	07 fe       	sbrs	r0, 7
     fb0:	fd cf       	rjmp	.-6      	; 0xfac <Mcal_I2C_write_buffer+0x8>
	/*****Check if start and bus is not busy*/
	if ((I2C_STATUS&0xF8) == TWSR_START_MSTR) {
     fb2:	81 b1       	in	r24, 0x01	; 1
     fb4:	88 7f       	andi	r24, 0xF8	; 248
     fb6:	88 30       	cpi	r24, 0x08	; 8
     fb8:	a1 f5       	brne	.+104    	; 0x1022 <Mcal_I2C_write_buffer+0x7e>
		/**Send Address of I2C device with Ack****/
		I2C_WRITE_BUFFER = Address|I2C_WRITE;
     fba:	93 b9       	out	0x03, r25	; 3
		I2C_WRITE_ENABLE();
     fbc:	84 e8       	ldi	r24, 0x84	; 132
     fbe:	86 bf       	out	0x36, r24	; 54
		Mcal_I2C_Wait();
     fc0:	06 b6       	in	r0, 0x36	; 54
     fc2:	07 fe       	sbrs	r0, 7
     fc4:	fd cf       	rjmp	.-6      	; 0xfc0 <Mcal_I2C_write_buffer+0x1c>
		/******Check arbitration*****/
		if ((I2C_STATUS&0xF8) == TWSR_MSTR_ADD_ACK_REC) {
     fc6:	81 b1       	in	r24, 0x01	; 1
     fc8:	88 7f       	andi	r24, 0xF8	; 248
     fca:	88 31       	cpi	r24, 0x18	; 24
     fcc:	51 f5       	brne	.+84     	; 0x1022 <Mcal_I2C_write_buffer+0x7e>
			/*******Send address of register in I2C device*****/
			I2C_WRITE_BUFFER = Reg_Address|I2C_WRITE;
     fce:	63 b9       	out	0x03, r22	; 3
			I2C_WRITE_ENABLE();
     fd0:	84 e8       	ldi	r24, 0x84	; 132
     fd2:	86 bf       	out	0x36, r24	; 54
			Mcal_I2C_Wait();
     fd4:	06 b6       	in	r0, 0x36	; 54
     fd6:	07 fe       	sbrs	r0, 7
     fd8:	fd cf       	rjmp	.-6      	; 0xfd4 <Mcal_I2C_write_buffer+0x30>
			/*******Check arbitration*********/
			if ((I2C_STATUS&0xF8) == TWSR_MSTR_DATA_ACK_REC) {
     fda:	81 b1       	in	r24, 0x01	; 1
     fdc:	88 7f       	andi	r24, 0xF8	; 248
     fde:	88 32       	cpi	r24, 0x28	; 40
     fe0:	01 f5       	brne	.+64     	; 0x1022 <Mcal_I2C_write_buffer+0x7e>
     fe2:	90 e0       	ldi	r25, 0x00	; 0
				/*********Send Data buffer********/
				uint8 Byte_Cnt=0;
				while(Byte_Cnt<=Buffer_len-1)
     fe4:	30 e0       	ldi	r19, 0x00	; 0
				{
						I2C_WRITE_BUFFER = *(Buffer+Byte_Cnt);
						I2C_WRITE_ENABLE();
     fe6:	64 e8       	ldi	r22, 0x84	; 132
     fe8:	0f c0       	rjmp	.+30     	; 0x1008 <Mcal_I2C_write_buffer+0x64>
			if ((I2C_STATUS&0xF8) == TWSR_MSTR_DATA_ACK_REC) {
				/*********Send Data buffer********/
				uint8 Byte_Cnt=0;
				while(Byte_Cnt<=Buffer_len-1)
				{
						I2C_WRITE_BUFFER = *(Buffer+Byte_Cnt);
     fea:	e4 0f       	add	r30, r20
     fec:	f5 1f       	adc	r31, r21
     fee:	80 81       	ld	r24, Z
     ff0:	83 b9       	out	0x03, r24	; 3
						I2C_WRITE_ENABLE();
     ff2:	66 bf       	out	0x36, r22	; 54
						Mcal_I2C_Wait();
     ff4:	06 b6       	in	r0, 0x36	; 54
     ff6:	07 fe       	sbrs	r0, 7
     ff8:	fd cf       	rjmp	.-6      	; 0xff4 <Mcal_I2C_write_buffer+0x50>
						/******Check status*/
						if ((I2C_STATUS&0xF8)  != TWSR_MSTR_DATA_ACK_REC) {
     ffa:	81 b1       	in	r24, 0x01	; 1
     ffc:	88 7f       	andi	r24, 0xF8	; 248
     ffe:	88 32       	cpi	r24, 0x28	; 40
    1000:	11 f0       	breq	.+4      	; 0x1006 <Mcal_I2C_write_buffer+0x62>
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	07 c0       	rjmp	.+14     	; 0x1014 <Mcal_I2C_write_buffer+0x70>
							Err_Status = E_NOK;
							break;
						} else {
						}
						Byte_Cnt++;
    1006:	9f 5f       	subi	r25, 0xFF	; 255
			Mcal_I2C_Wait();
			/*******Check arbitration*********/
			if ((I2C_STATUS&0xF8) == TWSR_MSTR_DATA_ACK_REC) {
				/*********Send Data buffer********/
				uint8 Byte_Cnt=0;
				while(Byte_Cnt<=Buffer_len-1)
    1008:	e9 2f       	mov	r30, r25
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	e2 17       	cp	r30, r18
    100e:	f3 07       	cpc	r31, r19
    1010:	64 f3       	brlt	.-40     	; 0xfea <Mcal_I2C_write_buffer+0x46>
    1012:	91 e0       	ldi	r25, 0x01	; 1
						} else {
						}
						Byte_Cnt++;
				}
				/******Send Stop bit to terminate bus control*/
				Mcal_I2C_GEN_STOP();
    1014:	86 b7       	in	r24, 0x36	; 54
    1016:	84 69       	ori	r24, 0x94	; 148
    1018:	86 bf       	out	0x36, r24	; 54
				Mcal_I2C_Wait_Stop();
    101a:	06 b6       	in	r0, 0x36	; 54
    101c:	07 fc       	sbrc	r0, 7
    101e:	fd cf       	rjmp	.-6      	; 0x101a <Mcal_I2C_write_buffer+0x76>
    1020:	01 c0       	rjmp	.+2      	; 0x1024 <Mcal_I2C_write_buffer+0x80>
    1022:	90 e0       	ldi	r25, 0x00	; 0
		}
	} else {
		Err_Status = E_NOK;
	}
	return Err_Status;
}
    1024:	89 2f       	mov	r24, r25
    1026:	08 95       	ret

00001028 <Mcal_I2C_read_byte>:

uint8 Mcal_I2C_read_byte(uint8 Address,uint8 Reg_Address,uint8 *Byte)
{
    1028:	98 2f       	mov	r25, r24
    102a:	fa 01       	movw	r30, r20
	uint8 Err_status = E_OK;
		/*******Gen start Bit*****/
		Mcal_I2C_GEN_START();
    102c:	86 b7       	in	r24, 0x36	; 54
    102e:	84 6a       	ori	r24, 0xA4	; 164
    1030:	86 bf       	out	0x36, r24	; 54
		Mcal_I2C_Wait();
    1032:	06 b6       	in	r0, 0x36	; 54
    1034:	07 fe       	sbrs	r0, 7
    1036:	fd cf       	rjmp	.-6      	; 0x1032 <Mcal_I2C_read_byte+0xa>
		/*****Check if start and bus is not busy*/
		if ((I2C_STATUS&0xF8) == TWSR_START_MSTR) {
    1038:	81 b1       	in	r24, 0x01	; 1
    103a:	88 7f       	andi	r24, 0xF8	; 248
    103c:	88 30       	cpi	r24, 0x08	; 8
    103e:	09 f0       	breq	.+2      	; 0x1042 <Mcal_I2C_read_byte+0x1a>
    1040:	3f c0       	rjmp	.+126    	; 0x10c0 <Mcal_I2C_read_byte+0x98>
			/**Send Address of I2C device with Ack****/
			I2C_WRITE_BUFFER = Address | I2C_WRITE;
    1042:	93 b9       	out	0x03, r25	; 3
			I2C_WRITE_ENABLE();
    1044:	84 e8       	ldi	r24, 0x84	; 132
    1046:	86 bf       	out	0x36, r24	; 54
			 Mcal_I2C_Wait();
    1048:	06 b6       	in	r0, 0x36	; 54
    104a:	07 fe       	sbrs	r0, 7
    104c:	fd cf       	rjmp	.-6      	; 0x1048 <Mcal_I2C_read_byte+0x20>
			/******Check arbitration*****/
			if ((I2C_STATUS&0xF8) == TWSR_MSTR_ADD_ACK_REC) {
    104e:	81 b1       	in	r24, 0x01	; 1
    1050:	88 7f       	andi	r24, 0xF8	; 248
    1052:	88 31       	cpi	r24, 0x18	; 24
    1054:	a9 f5       	brne	.+106    	; 0x10c0 <Mcal_I2C_read_byte+0x98>
				/*******Send address of register in I2C device*****/
				I2C_WRITE_BUFFER = Reg_Address | I2C_WRITE;
    1056:	63 b9       	out	0x03, r22	; 3
				I2C_WRITE_ENABLE();
    1058:	84 e8       	ldi	r24, 0x84	; 132
    105a:	86 bf       	out	0x36, r24	; 54
				Mcal_I2C_Wait();
    105c:	06 b6       	in	r0, 0x36	; 54
    105e:	07 fe       	sbrs	r0, 7
    1060:	fd cf       	rjmp	.-6      	; 0x105c <Mcal_I2C_read_byte+0x34>
				/*******Check arbitration*********/
				if ((I2C_STATUS&0xF8) == TWSR_MSTR_DATA_ACK_REC) {
    1062:	81 b1       	in	r24, 0x01	; 1
    1064:	88 7f       	andi	r24, 0xF8	; 248
    1066:	88 32       	cpi	r24, 0x28	; 40
    1068:	59 f5       	brne	.+86     	; 0x10c0 <Mcal_I2C_read_byte+0x98>
					/*********REPEATED Start********/
					Mcal_I2C_GEN_START();
    106a:	86 b7       	in	r24, 0x36	; 54
    106c:	84 6a       	ori	r24, 0xA4	; 164
    106e:	86 bf       	out	0x36, r24	; 54
					Mcal_I2C_Wait();
    1070:	06 b6       	in	r0, 0x36	; 54
    1072:	07 fe       	sbrs	r0, 7
    1074:	fd cf       	rjmp	.-6      	; 0x1070 <Mcal_I2C_read_byte+0x48>
					if ((I2C_STATUS & 0xF8) == TWSR_REPEATED_START_MSTR) {
    1076:	81 b1       	in	r24, 0x01	; 1
    1078:	88 7f       	andi	r24, 0xF8	; 248
    107a:	80 31       	cpi	r24, 0x10	; 16
    107c:	11 f0       	breq	.+4      	; 0x1082 <Mcal_I2C_read_byte+0x5a>
    107e:	91 e0       	ldi	r25, 0x01	; 1
    1080:	20 c0       	rjmp	.+64     	; 0x10c2 <Mcal_I2C_read_byte+0x9a>
							I2C_WRITE_BUFFER = Address | I2C_READ;
    1082:	91 60       	ori	r25, 0x01	; 1
    1084:	93 b9       	out	0x03, r25	; 3
							I2C_WRITE_ENABLE();
    1086:	84 e8       	ldi	r24, 0x84	; 132
    1088:	86 bf       	out	0x36, r24	; 54
							Mcal_I2C_Wait();
    108a:	06 b6       	in	r0, 0x36	; 54
    108c:	07 fe       	sbrs	r0, 7
    108e:	fd cf       	rjmp	.-6      	; 0x108a <Mcal_I2C_read_byte+0x62>
							if((I2C_STATUS & 0xF8) == TW_MSR_DATA_R_ACK){
    1090:	81 b1       	in	r24, 0x01	; 1
    1092:	88 7f       	andi	r24, 0xF8	; 248
    1094:	80 35       	cpi	r24, 0x50	; 80
    1096:	61 f4       	brne	.+24     	; 0x10b0 <Mcal_I2C_read_byte+0x88>
								I2C_READ_NACK();
    1098:	84 e8       	ldi	r24, 0x84	; 132
    109a:	86 bf       	out	0x36, r24	; 54
								Mcal_I2C_Wait();
    109c:	06 b6       	in	r0, 0x36	; 54
    109e:	07 fe       	sbrs	r0, 7
    10a0:	fd cf       	rjmp	.-6      	; 0x109c <Mcal_I2C_read_byte+0x74>
								*Byte = I2C_WRITE_BUFFER;
    10a2:	83 b1       	in	r24, 0x03	; 3
    10a4:	80 83       	st	Z, r24
								if ((I2C_STATUS & 0xF8) != TW_MSR_DATA_R_NACK) {
    10a6:	81 b1       	in	r24, 0x01	; 1
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	88 7f       	andi	r24, 0xF8	; 248
    10ac:	88 35       	cpi	r24, 0x58	; 88
    10ae:	09 f4       	brne	.+2      	; 0x10b2 <Mcal_I2C_read_byte+0x8a>
    10b0:	91 e0       	ldi	r25, 0x01	; 1
										Err_status = E_NOK;
									}
								}
							/******Send Stop bit to terminate bus control*/
								Mcal_I2C_GEN_STOP();
    10b2:	86 b7       	in	r24, 0x36	; 54
    10b4:	84 69       	ori	r24, 0x94	; 148
    10b6:	86 bf       	out	0x36, r24	; 54
								Mcal_I2C_Wait_Stop();
    10b8:	06 b6       	in	r0, 0x36	; 54
    10ba:	07 fc       	sbrc	r0, 7
    10bc:	fd cf       	rjmp	.-6      	; 0x10b8 <Mcal_I2C_read_byte+0x90>
    10be:	01 c0       	rjmp	.+2      	; 0x10c2 <Mcal_I2C_read_byte+0x9a>
    10c0:	90 e0       	ldi	r25, 0x00	; 0
			}
		} else {
			Err_status = E_NOK;
		}
		return Err_status;
}
    10c2:	89 2f       	mov	r24, r25
    10c4:	08 95       	ret

000010c6 <Mcal_I2C_read_buffer>:

uint8 Mcal_I2C_read_buffer(uint8 Address,uint8 Reg_Address,uint8 *Byte,uint8 Buffer_length)
{
    10c6:	1f 93       	push	r17
    10c8:	98 2f       	mov	r25, r24
	uint8 Err_status = E_OK;
	/*******Gen start Bit*****/
	Mcal_I2C_GEN_START();
    10ca:	86 b7       	in	r24, 0x36	; 54
    10cc:	84 6a       	ori	r24, 0xA4	; 164
    10ce:	86 bf       	out	0x36, r24	; 54
	Mcal_I2C_Wait();
    10d0:	06 b6       	in	r0, 0x36	; 54
    10d2:	07 fe       	sbrs	r0, 7
    10d4:	fd cf       	rjmp	.-6      	; 0x10d0 <Mcal_I2C_read_buffer+0xa>
	/*****Check if start and bus is not busy*/
	if ((I2C_STATUS&0xF8) == TWSR_START_MSTR) {
    10d6:	81 b1       	in	r24, 0x01	; 1
    10d8:	88 7f       	andi	r24, 0xF8	; 248
    10da:	88 30       	cpi	r24, 0x08	; 8
    10dc:	09 f0       	breq	.+2      	; 0x10e0 <Mcal_I2C_read_buffer+0x1a>
    10de:	66 c0       	rjmp	.+204    	; 0x11ac <Mcal_I2C_read_buffer+0xe6>
		/**Send Address of I2C device with Ack****/
		I2C_WRITE_BUFFER = Address | I2C_WRITE;
    10e0:	93 b9       	out	0x03, r25	; 3
		I2C_WRITE_ENABLE();
    10e2:	84 e8       	ldi	r24, 0x84	; 132
    10e4:	86 bf       	out	0x36, r24	; 54
		 Mcal_I2C_Wait();
    10e6:	06 b6       	in	r0, 0x36	; 54
    10e8:	07 fe       	sbrs	r0, 7
    10ea:	fd cf       	rjmp	.-6      	; 0x10e6 <Mcal_I2C_read_buffer+0x20>
		/******Check arbitration*****/
		if ((I2C_STATUS&0xF8) == TWSR_MSTR_ADD_ACK_REC) {
    10ec:	81 b1       	in	r24, 0x01	; 1
    10ee:	88 7f       	andi	r24, 0xF8	; 248
    10f0:	88 31       	cpi	r24, 0x18	; 24
    10f2:	09 f0       	breq	.+2      	; 0x10f6 <Mcal_I2C_read_buffer+0x30>
    10f4:	5b c0       	rjmp	.+182    	; 0x11ac <Mcal_I2C_read_buffer+0xe6>
			/*******Send address of register in I2C device*****/
			I2C_WRITE_BUFFER = Reg_Address | I2C_WRITE;
    10f6:	63 b9       	out	0x03, r22	; 3
			I2C_WRITE_ENABLE();
    10f8:	84 e8       	ldi	r24, 0x84	; 132
    10fa:	86 bf       	out	0x36, r24	; 54
			Mcal_I2C_Wait();
    10fc:	06 b6       	in	r0, 0x36	; 54
    10fe:	07 fe       	sbrs	r0, 7
    1100:	fd cf       	rjmp	.-6      	; 0x10fc <Mcal_I2C_read_buffer+0x36>
			/*******Check arbitration*********/
			if ((I2C_STATUS&0xF8) == TWSR_MSTR_DATA_ACK_REC) {
    1102:	81 b1       	in	r24, 0x01	; 1
    1104:	88 7f       	andi	r24, 0xF8	; 248
    1106:	88 32       	cpi	r24, 0x28	; 40
    1108:	09 f0       	breq	.+2      	; 0x110c <Mcal_I2C_read_buffer+0x46>
    110a:	50 c0       	rjmp	.+160    	; 0x11ac <Mcal_I2C_read_buffer+0xe6>
				/*********REPEATED Start********/
				Mcal_I2C_GEN_START();
    110c:	86 b7       	in	r24, 0x36	; 54
    110e:	84 6a       	ori	r24, 0xA4	; 164
    1110:	86 bf       	out	0x36, r24	; 54
				Mcal_I2C_Wait();
    1112:	06 b6       	in	r0, 0x36	; 54
    1114:	07 fe       	sbrs	r0, 7
    1116:	fd cf       	rjmp	.-6      	; 0x1112 <Mcal_I2C_read_buffer+0x4c>
				if ((I2C_STATUS & 0xF8) == TWSR_REPEATED_START_MSTR) {
    1118:	81 b1       	in	r24, 0x01	; 1
    111a:	88 7f       	andi	r24, 0xF8	; 248
    111c:	80 31       	cpi	r24, 0x10	; 16
    111e:	09 f0       	breq	.+2      	; 0x1122 <Mcal_I2C_read_buffer+0x5c>
    1120:	47 c0       	rjmp	.+142    	; 0x11b0 <Mcal_I2C_read_buffer+0xea>
						I2C_WRITE_BUFFER = Address | I2C_READ;
    1122:	91 60       	ori	r25, 0x01	; 1
    1124:	93 b9       	out	0x03, r25	; 3
						I2C_WRITE_ENABLE();
    1126:	84 e8       	ldi	r24, 0x84	; 132
    1128:	86 bf       	out	0x36, r24	; 54
						Mcal_I2C_Wait();
    112a:	06 b6       	in	r0, 0x36	; 54
    112c:	07 fe       	sbrs	r0, 7
    112e:	fd cf       	rjmp	.-6      	; 0x112a <Mcal_I2C_read_buffer+0x64>
						if((I2C_STATUS & 0xF8) == TW_MSR_SLA_R_ACK){
    1130:	81 b1       	in	r24, 0x01	; 1
    1132:	88 7f       	andi	r24, 0xF8	; 248
    1134:	80 34       	cpi	r24, 0x40	; 64
    1136:	e1 f5       	brne	.+120    	; 0x11b0 <Mcal_I2C_read_buffer+0xea>
    1138:	30 e0       	ldi	r19, 0x00	; 0
						uint8 BYTE_RX = 0;
						while (BYTE_RX <= Buffer_length - 1) {
    113a:	a2 2f       	mov	r26, r18
    113c:	b0 e0       	ldi	r27, 0x00	; 0
							if (BYTE_RX < Buffer_length - 1) {
    113e:	bd 01       	movw	r22, r26
    1140:	61 50       	subi	r22, 0x01	; 1
    1142:	70 40       	sbci	r23, 0x00	; 0
								if ((I2C_STATUS & 0xF8) != TW_MSR_DATA_R_ACK) {
									Err_status = E_NOK;
									break;
								}
							} else if (BYTE_RX == Buffer_length - 1) {
								I2C_READ_NACK();
    1144:	14 e8       	ldi	r17, 0x84	; 132
						Mcal_I2C_Wait();
						if((I2C_STATUS & 0xF8) == TW_MSR_SLA_R_ACK){
						uint8 BYTE_RX = 0;
						while (BYTE_RX <= Buffer_length - 1) {
							if (BYTE_RX < Buffer_length - 1) {
								I2C_READ_ACK();
    1146:	24 ec       	ldi	r18, 0xC4	; 196
    1148:	22 c0       	rjmp	.+68     	; 0x118e <Mcal_I2C_read_buffer+0xc8>
						I2C_WRITE_ENABLE();
						Mcal_I2C_Wait();
						if((I2C_STATUS & 0xF8) == TW_MSR_SLA_R_ACK){
						uint8 BYTE_RX = 0;
						while (BYTE_RX <= Buffer_length - 1) {
							if (BYTE_RX < Buffer_length - 1) {
    114a:	86 17       	cp	r24, r22
    114c:	97 07       	cpc	r25, r23
    114e:	74 f4       	brge	.+28     	; 0x116c <Mcal_I2C_read_buffer+0xa6>
								I2C_READ_ACK();
    1150:	26 bf       	out	0x36, r18	; 54
								Mcal_I2C_Wait();
    1152:	06 b6       	in	r0, 0x36	; 54
    1154:	07 fe       	sbrs	r0, 7
    1156:	fd cf       	rjmp	.-6      	; 0x1152 <Mcal_I2C_read_buffer+0x8c>
								*(Byte+BYTE_RX) = I2C_WRITE_BUFFER;
    1158:	83 b1       	in	r24, 0x03	; 3
    115a:	fa 01       	movw	r30, r20
    115c:	e3 0f       	add	r30, r19
    115e:	f1 1d       	adc	r31, r1
    1160:	80 83       	st	Z, r24
								if ((I2C_STATUS & 0xF8) != TW_MSR_DATA_R_ACK) {
    1162:	81 b1       	in	r24, 0x01	; 1
    1164:	88 7f       	andi	r24, 0xF8	; 248
    1166:	80 35       	cpi	r24, 0x50	; 80
    1168:	89 f0       	breq	.+34     	; 0x118c <Mcal_I2C_read_buffer+0xc6>
    116a:	18 c0       	rjmp	.+48     	; 0x119c <Mcal_I2C_read_buffer+0xd6>
									Err_status = E_NOK;
									break;
								}
							} else if (BYTE_RX == Buffer_length - 1) {
    116c:	86 17       	cp	r24, r22
    116e:	97 07       	cpc	r25, r23
    1170:	69 f4       	brne	.+26     	; 0x118c <Mcal_I2C_read_buffer+0xc6>
								I2C_READ_NACK();
    1172:	16 bf       	out	0x36, r17	; 54
								Mcal_I2C_Wait();
    1174:	06 b6       	in	r0, 0x36	; 54
    1176:	07 fe       	sbrs	r0, 7
    1178:	fd cf       	rjmp	.-6      	; 0x1174 <Mcal_I2C_read_buffer+0xae>
								*(Byte+BYTE_RX) = I2C_WRITE_BUFFER;
    117a:	83 b1       	in	r24, 0x03	; 3
    117c:	fa 01       	movw	r30, r20
    117e:	e3 0f       	add	r30, r19
    1180:	f1 1d       	adc	r31, r1
    1182:	80 83       	st	Z, r24
								if ((I2C_STATUS & 0xF8) != TW_MSR_DATA_R_NACK) {
    1184:	81 b1       	in	r24, 0x01	; 1
    1186:	88 7f       	andi	r24, 0xF8	; 248
    1188:	88 35       	cpi	r24, 0x58	; 88
    118a:	41 f4       	brne	.+16     	; 0x119c <Mcal_I2C_read_buffer+0xd6>
									Err_status = E_NOK;
									break;
								}
							}
							BYTE_RX++;
    118c:	3f 5f       	subi	r19, 0xFF	; 255
						I2C_WRITE_BUFFER = Address | I2C_READ;
						I2C_WRITE_ENABLE();
						Mcal_I2C_Wait();
						if((I2C_STATUS & 0xF8) == TW_MSR_SLA_R_ACK){
						uint8 BYTE_RX = 0;
						while (BYTE_RX <= Buffer_length - 1) {
    118e:	83 2f       	mov	r24, r19
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	8a 17       	cp	r24, r26
    1194:	9b 07       	cpc	r25, r27
    1196:	cc f2       	brlt	.-78     	; 0x114a <Mcal_I2C_read_buffer+0x84>
    1198:	91 e0       	ldi	r25, 0x01	; 1
    119a:	01 c0       	rjmp	.+2      	; 0x119e <Mcal_I2C_read_buffer+0xd8>
    119c:	90 e0       	ldi	r25, 0x00	; 0
								}
							}
							BYTE_RX++;
						}
						/******Send Stop bit to terminate bus control*/
						Mcal_I2C_GEN_STOP();
    119e:	86 b7       	in	r24, 0x36	; 54
    11a0:	84 69       	ori	r24, 0x94	; 148
    11a2:	86 bf       	out	0x36, r24	; 54
						Mcal_I2C_Wait_Stop();
    11a4:	06 b6       	in	r0, 0x36	; 54
    11a6:	07 fc       	sbrc	r0, 7
    11a8:	fd cf       	rjmp	.-6      	; 0x11a4 <Mcal_I2C_read_buffer+0xde>
    11aa:	03 c0       	rjmp	.+6      	; 0x11b2 <Mcal_I2C_read_buffer+0xec>
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	01 c0       	rjmp	.+2      	; 0x11b2 <Mcal_I2C_read_buffer+0xec>
    11b0:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else {
		Err_status = E_NOK;
	}
	return Err_status;
}
    11b2:	89 2f       	mov	r24, r25
    11b4:	1f 91       	pop	r17
    11b6:	08 95       	ret

000011b8 <Mcal_GPIO_INIT>:
uint8 *DDRX_REGS[]={(uint8 *)&DDRA,(uint8 *)&DDRB,(uint8 *)&DDRC,(uint8 *)&DDRD};
uint8 *PORTX_REGS[]={(uint8 *)&PORTA,(uint8 *)&PORTB,(uint8 *)&PORTC,(uint8 *)&PORTD};
uint8 *PINX_REGS[]={(uint8 *)&PINA,(uint8 *)&PINB,(uint8 *)&PINC,(uint8 *)&PIND};

uint8 Mcal_GPIO_INIT(GPIO_PIN_t *Gpio)
{
    11b8:	dc 01       	movw	r26, r24
	uint8 Err_state=E_OK;
	if(Gpio->Port>GPIO_PORTD||Gpio->PIN>GPIO_PIN8||Gpio->Config>GPIO_OUTPUT)
    11ba:	9c 91       	ld	r25, X
    11bc:	e9 2f       	mov	r30, r25
    11be:	e3 70       	andi	r30, 0x03	; 3
    11c0:	29 2f       	mov	r18, r25
    11c2:	26 95       	lsr	r18
    11c4:	26 95       	lsr	r18
    11c6:	27 70       	andi	r18, 0x07	; 7
    11c8:	89 2f       	mov	r24, r25
    11ca:	82 95       	swap	r24
    11cc:	86 95       	lsr	r24
    11ce:	83 70       	andi	r24, 0x03	; 3
    11d0:	83 30       	cpi	r24, 0x03	; 3
    11d2:	09 f4       	brne	.+2      	; 0x11d6 <Mcal_GPIO_INIT+0x1e>
    11d4:	92 c0       	rjmp	.+292    	; 0x12fa <Mcal_GPIO_INIT+0x142>
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
		Err_state=E_NOK;
	else
	{
		if(Gpio->Config==GPIO_INPUT)
    11d8:	89 2f       	mov	r24, r25
    11da:	80 76       	andi	r24, 0x60	; 96
    11dc:	99 f4       	brne	.+38     	; 0x1204 <Mcal_GPIO_INIT+0x4c>
			CLEAR_BIT(*DDRX_REGS[Gpio->Port],Gpio->PIN);
    11de:	ee 0f       	add	r30, r30
    11e0:	ff 1f       	adc	r31, r31
    11e2:	e9 58       	subi	r30, 0x89	; 137
    11e4:	fe 4f       	sbci	r31, 0xFE	; 254
    11e6:	01 90       	ld	r0, Z+
    11e8:	f0 81       	ld	r31, Z
    11ea:	e0 2d       	mov	r30, r0
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <Mcal_GPIO_INIT+0x3e>
    11f2:	88 0f       	add	r24, r24
    11f4:	99 1f       	adc	r25, r25
    11f6:	2a 95       	dec	r18
    11f8:	e2 f7       	brpl	.-8      	; 0x11f2 <Mcal_GPIO_INIT+0x3a>
    11fa:	80 95       	com	r24
    11fc:	20 81       	ld	r18, Z
    11fe:	28 23       	and	r18, r24
    1200:	20 83       	st	Z, r18
    1202:	79 c0       	rjmp	.+242    	; 0x12f6 <Mcal_GPIO_INIT+0x13e>
		else if(Gpio->Config==GPIO_INPUT_PULLUP)
    1204:	80 32       	cpi	r24, 0x20	; 32
    1206:	39 f5       	brne	.+78     	; 0x1256 <Mcal_GPIO_INIT+0x9e>
		{
			CLEAR_BIT(*DDRX_REGS[Gpio->Port],Gpio->PIN);
    1208:	ee 0f       	add	r30, r30
    120a:	ff 1f       	adc	r31, r31
    120c:	e9 58       	subi	r30, 0x89	; 137
    120e:	fe 4f       	sbci	r31, 0xFE	; 254
    1210:	01 90       	ld	r0, Z+
    1212:	f0 81       	ld	r31, Z
    1214:	e0 2d       	mov	r30, r0
    1216:	41 e0       	ldi	r20, 0x01	; 1
    1218:	50 e0       	ldi	r21, 0x00	; 0
    121a:	ca 01       	movw	r24, r20
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <Mcal_GPIO_INIT+0x6a>
    121e:	88 0f       	add	r24, r24
    1220:	99 1f       	adc	r25, r25
    1222:	2a 95       	dec	r18
    1224:	e2 f7       	brpl	.-8      	; 0x121e <Mcal_GPIO_INIT+0x66>
    1226:	80 95       	com	r24
    1228:	20 81       	ld	r18, Z
    122a:	28 23       	and	r18, r24
    122c:	20 83       	st	Z, r18
			SET_BIT(*PORTX_REGS[Gpio->Port],Gpio->PIN);
    122e:	8c 91       	ld	r24, X
    1230:	e8 2f       	mov	r30, r24
    1232:	e3 70       	andi	r30, 0x03	; 3
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	ee 0f       	add	r30, r30
    1238:	ff 1f       	adc	r31, r31
    123a:	e1 58       	subi	r30, 0x81	; 129
    123c:	fe 4f       	sbci	r31, 0xFE	; 254
    123e:	01 90       	ld	r0, Z+
    1240:	f0 81       	ld	r31, Z
    1242:	e0 2d       	mov	r30, r0
    1244:	86 95       	lsr	r24
    1246:	86 95       	lsr	r24
    1248:	87 70       	andi	r24, 0x07	; 7
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <Mcal_GPIO_INIT+0x98>
    124c:	44 0f       	add	r20, r20
    124e:	55 1f       	adc	r21, r21
    1250:	8a 95       	dec	r24
    1252:	e2 f7       	brpl	.-8      	; 0x124c <Mcal_GPIO_INIT+0x94>
    1254:	4d c0       	rjmp	.+154    	; 0x12f0 <Mcal_GPIO_INIT+0x138>
		}
		else if(Gpio->Config==GPIO_OUTPUT)
    1256:	80 34       	cpi	r24, 0x40	; 64
    1258:	09 f0       	breq	.+2      	; 0x125c <Mcal_GPIO_INIT+0xa4>
    125a:	4f c0       	rjmp	.+158    	; 0x12fa <Mcal_GPIO_INIT+0x142>
		{
			SET_BIT(*DDRX_REGS[Gpio->Port],Gpio->PIN);
    125c:	ee 0f       	add	r30, r30
    125e:	ff 1f       	adc	r31, r31
    1260:	e9 58       	subi	r30, 0x89	; 137
    1262:	fe 4f       	sbci	r31, 0xFE	; 254
    1264:	01 90       	ld	r0, Z+
    1266:	f0 81       	ld	r31, Z
    1268:	e0 2d       	mov	r30, r0
    126a:	61 e0       	ldi	r22, 0x01	; 1
    126c:	70 e0       	ldi	r23, 0x00	; 0
    126e:	cb 01       	movw	r24, r22
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <Mcal_GPIO_INIT+0xbe>
    1272:	88 0f       	add	r24, r24
    1274:	99 1f       	adc	r25, r25
    1276:	2a 95       	dec	r18
    1278:	e2 f7       	brpl	.-8      	; 0x1272 <Mcal_GPIO_INIT+0xba>
    127a:	9c 01       	movw	r18, r24
    127c:	80 81       	ld	r24, Z
    127e:	82 2b       	or	r24, r18
    1280:	80 83       	st	Z, r24
			switch(Gpio->State)
    1282:	2c 91       	ld	r18, X
    1284:	82 2f       	mov	r24, r18
    1286:	88 1f       	adc	r24, r24
    1288:	88 27       	eor	r24, r24
    128a:	88 1f       	adc	r24, r24
    128c:	48 2f       	mov	r20, r24
    128e:	50 e0       	ldi	r21, 0x00	; 0
    1290:	41 15       	cp	r20, r1
    1292:	51 05       	cpc	r21, r1
    1294:	21 f0       	breq	.+8      	; 0x129e <Mcal_GPIO_INIT+0xe6>
    1296:	41 30       	cpi	r20, 0x01	; 1
    1298:	51 05       	cpc	r21, r1
    129a:	69 f5       	brne	.+90     	; 0x12f6 <Mcal_GPIO_INIT+0x13e>
    129c:	17 c0       	rjmp	.+46     	; 0x12cc <Mcal_GPIO_INIT+0x114>
			{
				case GPIO_LOW:
					CLEAR_BIT(*PORTX_REGS[Gpio->Port],Gpio->PIN);
    129e:	e2 2f       	mov	r30, r18
    12a0:	e3 70       	andi	r30, 0x03	; 3
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	ee 0f       	add	r30, r30
    12a6:	ff 1f       	adc	r31, r31
    12a8:	e1 58       	subi	r30, 0x81	; 129
    12aa:	fe 4f       	sbci	r31, 0xFE	; 254
    12ac:	01 90       	ld	r0, Z+
    12ae:	f0 81       	ld	r31, Z
    12b0:	e0 2d       	mov	r30, r0
    12b2:	26 95       	lsr	r18
    12b4:	26 95       	lsr	r18
    12b6:	27 70       	andi	r18, 0x07	; 7
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <Mcal_GPIO_INIT+0x106>
    12ba:	66 0f       	add	r22, r22
    12bc:	77 1f       	adc	r23, r23
    12be:	2a 95       	dec	r18
    12c0:	e2 f7       	brpl	.-8      	; 0x12ba <Mcal_GPIO_INIT+0x102>
    12c2:	96 2f       	mov	r25, r22
    12c4:	90 95       	com	r25
    12c6:	80 81       	ld	r24, Z
    12c8:	89 23       	and	r24, r25
    12ca:	14 c0       	rjmp	.+40     	; 0x12f4 <Mcal_GPIO_INIT+0x13c>
					break;
				case GPIO_HIGH:
					SET_BIT(*PORTX_REGS[Gpio->Port],Gpio->PIN);
    12cc:	e2 2f       	mov	r30, r18
    12ce:	e3 70       	andi	r30, 0x03	; 3
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	ee 0f       	add	r30, r30
    12d4:	ff 1f       	adc	r31, r31
    12d6:	e1 58       	subi	r30, 0x81	; 129
    12d8:	fe 4f       	sbci	r31, 0xFE	; 254
    12da:	01 90       	ld	r0, Z+
    12dc:	f0 81       	ld	r31, Z
    12de:	e0 2d       	mov	r30, r0
    12e0:	26 95       	lsr	r18
    12e2:	26 95       	lsr	r18
    12e4:	27 70       	andi	r18, 0x07	; 7
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <Mcal_GPIO_INIT+0x134>
    12e8:	44 0f       	add	r20, r20
    12ea:	55 1f       	adc	r21, r21
    12ec:	2a 95       	dec	r18
    12ee:	e2 f7       	brpl	.-8      	; 0x12e8 <Mcal_GPIO_INIT+0x130>
    12f0:	80 81       	ld	r24, Z
    12f2:	84 2b       	or	r24, r20
    12f4:	80 83       	st	Z, r24
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	08 95       	ret
    12fa:	80 e0       	ldi	r24, 0x00	; 0
		}
		else
			Err_state=E_NOK;
	}
	return Err_state;
}
    12fc:	08 95       	ret

000012fe <Mcal_GPIO_WRITE>:

uint8 Mcal_GPIO_WRITE(GPIO_PIN_t *Gpio,GPIO_state state)
{
    12fe:	fc 01       	movw	r30, r24
	uint8 Err_state=E_OK;
	if(Gpio->Port>GPIO_PORTD||Gpio->PIN>GPIO_PIN8)
    1300:	90 81       	ld	r25, Z
    1302:	89 2f       	mov	r24, r25
    1304:	83 70       	andi	r24, 0x03	; 3
    1306:	e8 2f       	mov	r30, r24
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	29 2f       	mov	r18, r25
    130c:	26 95       	lsr	r18
    130e:	26 95       	lsr	r18
    1310:	27 70       	andi	r18, 0x07	; 7
		Err_state=E_NOK;
	else
		WRITE_BIT(*PORTX_REGS[Gpio->Port],Gpio->PIN,state);
    1312:	61 30       	cpi	r22, 0x01	; 1
    1314:	89 f4       	brne	.+34     	; 0x1338 <Mcal_GPIO_WRITE+0x3a>
    1316:	ee 0f       	add	r30, r30
    1318:	ff 1f       	adc	r31, r31
    131a:	e1 58       	subi	r30, 0x81	; 129
    131c:	fe 4f       	sbci	r31, 0xFE	; 254
    131e:	01 90       	ld	r0, Z+
    1320:	f0 81       	ld	r31, Z
    1322:	e0 2d       	mov	r30, r0
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	02 c0       	rjmp	.+4      	; 0x132e <Mcal_GPIO_WRITE+0x30>
    132a:	88 0f       	add	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	2a 95       	dec	r18
    1330:	e2 f7       	brpl	.-8      	; 0x132a <Mcal_GPIO_WRITE+0x2c>
    1332:	20 81       	ld	r18, Z
    1334:	28 2b       	or	r18, r24
    1336:	13 c0       	rjmp	.+38     	; 0x135e <Mcal_GPIO_WRITE+0x60>
    1338:	66 23       	and	r22, r22
    133a:	91 f4       	brne	.+36     	; 0x1360 <Mcal_GPIO_WRITE+0x62>
    133c:	ee 0f       	add	r30, r30
    133e:	ff 1f       	adc	r31, r31
    1340:	e1 58       	subi	r30, 0x81	; 129
    1342:	fe 4f       	sbci	r31, 0xFE	; 254
    1344:	01 90       	ld	r0, Z+
    1346:	f0 81       	ld	r31, Z
    1348:	e0 2d       	mov	r30, r0
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <Mcal_GPIO_WRITE+0x56>
    1350:	88 0f       	add	r24, r24
    1352:	99 1f       	adc	r25, r25
    1354:	2a 95       	dec	r18
    1356:	e2 f7       	brpl	.-8      	; 0x1350 <Mcal_GPIO_WRITE+0x52>
    1358:	80 95       	com	r24
    135a:	20 81       	ld	r18, Z
    135c:	28 23       	and	r18, r24
    135e:	20 83       	st	Z, r18
	return Err_state;
}
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	08 95       	ret

00001364 <Mcal_GPIO_READ>:

uint8 Mcal_GPIO_READ(GPIO_PIN_t *Gpio,GPIO_state *state)
{
    1364:	fc 01       	movw	r30, r24
    1366:	db 01       	movw	r26, r22
	uint8 Err_state=E_OK;
	if(Gpio->Port>GPIO_PORTD||Gpio->PIN>GPIO_PIN8)
		Err_state=E_NOK;
	else
	{
		*state=READ_BIT(*PINX_REGS[Gpio->Port],Gpio->PIN);
    1368:	20 81       	ld	r18, Z
    136a:	e2 2f       	mov	r30, r18
    136c:	e3 70       	andi	r30, 0x03	; 3
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	ee 0f       	add	r30, r30
    1372:	ff 1f       	adc	r31, r31
    1374:	e9 57       	subi	r30, 0x79	; 121
    1376:	fe 4f       	sbci	r31, 0xFE	; 254
    1378:	01 90       	ld	r0, Z+
    137a:	f0 81       	ld	r31, Z
    137c:	e0 2d       	mov	r30, r0
    137e:	80 81       	ld	r24, Z
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	26 95       	lsr	r18
    1384:	26 95       	lsr	r18
    1386:	27 70       	andi	r18, 0x07	; 7
    1388:	02 c0       	rjmp	.+4      	; 0x138e <Mcal_GPIO_READ+0x2a>
    138a:	95 95       	asr	r25
    138c:	87 95       	ror	r24
    138e:	2a 95       	dec	r18
    1390:	e2 f7       	brpl	.-8      	; 0x138a <Mcal_GPIO_READ+0x26>
    1392:	81 70       	andi	r24, 0x01	; 1
    1394:	8c 93       	st	X, r24
	}
	return Err_state;
}
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	08 95       	ret

0000139a <Mcal_GPIO_TOGGLE>:

uint8 Mcal_GPIO_TOGGLE(GPIO_PIN_t *Gpio)
{
    139a:	fc 01       	movw	r30, r24
	uint8 Err_state = E_OK;
	if (Gpio->Port > GPIO_PORTD || Gpio->PIN > GPIO_PIN8)
		Err_state = E_NOK;
	else
		TOGGLE_BIT(*PORTX_REGS[Gpio->Port],Gpio->PIN);
    139c:	20 81       	ld	r18, Z
    139e:	e2 2f       	mov	r30, r18
    13a0:	e3 70       	andi	r30, 0x03	; 3
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	ee 0f       	add	r30, r30
    13a6:	ff 1f       	adc	r31, r31
    13a8:	e1 58       	subi	r30, 0x81	; 129
    13aa:	fe 4f       	sbci	r31, 0xFE	; 254
    13ac:	01 90       	ld	r0, Z+
    13ae:	f0 81       	ld	r31, Z
    13b0:	e0 2d       	mov	r30, r0
    13b2:	26 95       	lsr	r18
    13b4:	26 95       	lsr	r18
    13b6:	27 70       	andi	r18, 0x07	; 7
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	02 c0       	rjmp	.+4      	; 0x13c2 <Mcal_GPIO_TOGGLE+0x28>
    13be:	88 0f       	add	r24, r24
    13c0:	99 1f       	adc	r25, r25
    13c2:	2a 95       	dec	r18
    13c4:	e2 f7       	brpl	.-8      	; 0x13be <Mcal_GPIO_TOGGLE+0x24>
    13c6:	20 81       	ld	r18, Z
    13c8:	28 27       	eor	r18, r24
    13ca:	20 83       	st	Z, r18
	return Err_state;
}
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	08 95       	ret

000013d0 <Mcal_GPIO_Init_PORT>:

uint8 Mcal_GPIO_Init_PORT(GPIO_Port PORT_index,uint8 Val)
{
	uint8 Err_state = E_OK;
	switch (PORT_index) {
    13d0:	81 30       	cpi	r24, 0x01	; 1
    13d2:	51 f0       	breq	.+20     	; 0x13e8 <Mcal_GPIO_Init_PORT+0x18>
    13d4:	81 30       	cpi	r24, 0x01	; 1
    13d6:	30 f0       	brcs	.+12     	; 0x13e4 <Mcal_GPIO_Init_PORT+0x14>
    13d8:	82 30       	cpi	r24, 0x02	; 2
    13da:	41 f0       	breq	.+16     	; 0x13ec <Mcal_GPIO_Init_PORT+0x1c>
    13dc:	83 30       	cpi	r24, 0x03	; 3
    13de:	49 f0       	breq	.+18     	; 0x13f2 <Mcal_GPIO_Init_PORT+0x22>
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	08 95       	ret
		case GPIO_PORTA:
			DDRA = Val;
    13e4:	6a bb       	out	0x1a, r22	; 26
    13e6:	03 c0       	rjmp	.+6      	; 0x13ee <Mcal_GPIO_Init_PORT+0x1e>
			break;
		case GPIO_PORTB:
			DDRB = Val;
    13e8:	67 bb       	out	0x17, r22	; 23
    13ea:	01 c0       	rjmp	.+2      	; 0x13ee <Mcal_GPIO_Init_PORT+0x1e>
			break;
		case GPIO_PORTC:
			DDRC = Val;
    13ec:	64 bb       	out	0x14, r22	; 20
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	08 95       	ret
			break;
		case GPIO_PORTD:
			DDRD = Val;
    13f2:	61 bb       	out	0x11, r22	; 17
    13f4:	81 e0       	ldi	r24, 0x01	; 1
			break;
		default:
			Err_state = E_NOK;
	}
	return Err_state;
}
    13f6:	08 95       	ret

000013f8 <Mcal_GPIO_WRITE_PORT>:

uint8 Mcal_GPIO_WRITE_PORT(GPIO_Port PORT_index,uint8 Val)
{
	uint8 Err_state=E_OK;
	switch(PORT_index)
    13f8:	81 30       	cpi	r24, 0x01	; 1
    13fa:	51 f0       	breq	.+20     	; 0x1410 <Mcal_GPIO_WRITE_PORT+0x18>
    13fc:	81 30       	cpi	r24, 0x01	; 1
    13fe:	30 f0       	brcs	.+12     	; 0x140c <Mcal_GPIO_WRITE_PORT+0x14>
    1400:	82 30       	cpi	r24, 0x02	; 2
    1402:	41 f0       	breq	.+16     	; 0x1414 <Mcal_GPIO_WRITE_PORT+0x1c>
    1404:	83 30       	cpi	r24, 0x03	; 3
    1406:	49 f0       	breq	.+18     	; 0x141a <Mcal_GPIO_WRITE_PORT+0x22>
    1408:	80 e0       	ldi	r24, 0x00	; 0
    140a:	08 95       	ret
	{
		case GPIO_PORTA:
			PORTA=Val;
    140c:	6b bb       	out	0x1b, r22	; 27
    140e:	03 c0       	rjmp	.+6      	; 0x1416 <Mcal_GPIO_WRITE_PORT+0x1e>
			break;
		case GPIO_PORTB:
			PORTB=Val;
    1410:	68 bb       	out	0x18, r22	; 24
    1412:	01 c0       	rjmp	.+2      	; 0x1416 <Mcal_GPIO_WRITE_PORT+0x1e>
			break;
		case GPIO_PORTC:
			PORTC=Val;
    1414:	65 bb       	out	0x15, r22	; 21
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	08 95       	ret
			break;
		case GPIO_PORTD:
			PORTD=Val;
    141a:	62 bb       	out	0x12, r22	; 18
    141c:	81 e0       	ldi	r24, 0x01	; 1
			break;
		default:
			Err_state=E_NOK;
	}
	return Err_state;
}
    141e:	08 95       	ret

00001420 <Mcal_GPIO_READ_PORT>:

uint8 Mcal_GPIO_READ_PORT(GPIO_Port PORT_index,uint8 *Val)
{
    1420:	fb 01       	movw	r30, r22
	uint8 Err_state = E_OK;
	switch (PORT_index) {
    1422:	81 30       	cpi	r24, 0x01	; 1
    1424:	51 f0       	breq	.+20     	; 0x143a <Mcal_GPIO_READ_PORT+0x1a>
    1426:	81 30       	cpi	r24, 0x01	; 1
    1428:	30 f0       	brcs	.+12     	; 0x1436 <Mcal_GPIO_READ_PORT+0x16>
    142a:	82 30       	cpi	r24, 0x02	; 2
    142c:	41 f0       	breq	.+16     	; 0x143e <Mcal_GPIO_READ_PORT+0x1e>
    142e:	83 30       	cpi	r24, 0x03	; 3
    1430:	51 f0       	breq	.+20     	; 0x1446 <Mcal_GPIO_READ_PORT+0x26>
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	08 95       	ret
		case GPIO_PORTA:
			*Val=PINA;
    1436:	89 b3       	in	r24, 0x19	; 25
    1438:	03 c0       	rjmp	.+6      	; 0x1440 <Mcal_GPIO_READ_PORT+0x20>
			break;
		case GPIO_PORTB:
			*Val=PINB;
    143a:	86 b3       	in	r24, 0x16	; 22
    143c:	01 c0       	rjmp	.+2      	; 0x1440 <Mcal_GPIO_READ_PORT+0x20>
			break;
		case GPIO_PORTC:
			*Val=PINC;
    143e:	83 b3       	in	r24, 0x13	; 19
    1440:	80 83       	st	Z, r24
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	08 95       	ret
			break;
		case GPIO_PORTD:
			*Val=PIND;
    1446:	80 b3       	in	r24, 0x10	; 16
    1448:	80 83       	st	Z, r24
    144a:	81 e0       	ldi	r24, 0x01	; 1
			break;
		default:
			Err_state = E_NOK;
	}
	return Err_state;
}
    144c:	08 95       	ret

0000144e <ADC_init>:
}

static inline void ADC_read(uint8 ADC_justification,uint16*Result);

uint8 ADC_init(ADC_config_t *Adc)
{
    144e:	fc 01       	movw	r30, r24
	uint8 Err_state=E_OK;
	if(Adc==NULL)
    1450:	00 97       	sbiw	r24, 0x00	; 0
    1452:	11 f4       	brne	.+4      	; 0x1458 <ADC_init+0xa>
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	3d c0       	rjmp	.+122    	; 0x14d2 <ADC_init+0x84>
		Err_state=E_NOK;
	else
	{
		ADC_DISABLE();
    1458:	37 98       	cbi	0x06, 7	; 6
		ADMUX&=0xE0;
    145a:	87 b1       	in	r24, 0x07	; 7
    145c:	80 7e       	andi	r24, 0xE0	; 224
    145e:	87 b9       	out	0x07, r24	; 7
		ADMUX|=Adc->ADC_channel;
    1460:	97 b1       	in	r25, 0x07	; 7
    1462:	81 81       	ldd	r24, Z+1	; 0x01
    1464:	86 95       	lsr	r24
    1466:	86 95       	lsr	r24
    1468:	86 95       	lsr	r24
    146a:	87 70       	andi	r24, 0x07	; 7
    146c:	89 2b       	or	r24, r25
    146e:	87 b9       	out	0x07, r24	; 7
		switch(Adc->ADC_justification)
    1470:	81 81       	ldd	r24, Z+1	; 0x01
    1472:	86 95       	lsr	r24
    1474:	86 95       	lsr	r24
    1476:	81 70       	andi	r24, 0x01	; 1
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	00 97       	sbiw	r24, 0x00	; 0
    147c:	21 f0       	breq	.+8      	; 0x1486 <ADC_init+0x38>
    147e:	01 97       	sbiw	r24, 0x01	; 1
    1480:	21 f0       	breq	.+8      	; 0x148a <ADC_init+0x3c>
    1482:	20 e0       	ldi	r18, 0x00	; 0
    1484:	04 c0       	rjmp	.+8      	; 0x148e <ADC_init+0x40>
		{
			case ADC_Left_justified:
				ADC_LEFT_justified();
    1486:	35 98       	cbi	0x06, 5	; 6
    1488:	01 c0       	rjmp	.+2      	; 0x148c <ADC_init+0x3e>
				break;
			case ADC_Right_justified:
				ADC_RIGHT_justified();
    148a:	35 9a       	sbi	0x06, 5	; 6
    148c:	21 e0       	ldi	r18, 0x01	; 1
				break;
			default:
				Err_state=E_NOK;
		}
		ADCSRA|=Adc->Clock;
    148e:	86 b1       	in	r24, 0x06	; 6
    1490:	90 81       	ld	r25, Z
    1492:	89 2b       	or	r24, r25
    1494:	86 b9       	out	0x06, r24	; 6
		switch(Adc->Voltage_source)
    1496:	81 81       	ldd	r24, Z+1	; 0x01
    1498:	83 70       	andi	r24, 0x03	; 3
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	81 30       	cpi	r24, 0x01	; 1
    149e:	91 05       	cpc	r25, r1
    14a0:	49 f0       	breq	.+18     	; 0x14b4 <ADC_init+0x66>
    14a2:	83 30       	cpi	r24, 0x03	; 3
    14a4:	91 05       	cpc	r25, r1
    14a6:	49 f0       	breq	.+18     	; 0x14ba <ADC_init+0x6c>
    14a8:	89 2b       	or	r24, r25
    14aa:	11 f0       	breq	.+4      	; 0x14b0 <ADC_init+0x62>
    14ac:	20 e0       	ldi	r18, 0x00	; 0
    14ae:	07 c0       	rjmp	.+14     	; 0x14be <ADC_init+0x70>
		{
			case ADC_refrence_V_Aref:
				WRITE_BIT(ADMUX,REFS0,FALSE);
    14b0:	3e 98       	cbi	0x07, 6	; 7
    14b2:	01 c0       	rjmp	.+2      	; 0x14b6 <ADC_init+0x68>
				WRITE_BIT(ADMUX,REFS1,FALSE);
				break;
			case ADC_refrence_V_Avcc_cap:
				WRITE_BIT(ADMUX, REFS0, TRUE);
    14b4:	3e 9a       	sbi	0x07, 6	; 7
				WRITE_BIT(ADMUX, REFS1, FALSE);
    14b6:	3f 98       	cbi	0x07, 7	; 7
    14b8:	02 c0       	rjmp	.+4      	; 0x14be <ADC_init+0x70>
				break;
			case ADC_Internal_V_2_56_Pullup:
				WRITE_BIT(ADMUX, REFS0, TRUE);
    14ba:	3e 9a       	sbi	0x07, 6	; 7
				WRITE_BIT(ADMUX, REFS1, TRUE);
    14bc:	3f 9a       	sbi	0x07, 7	; 7
				break;
			default:
				Err_state=E_NOK;
		}
#if ADC_interrupt_enable==TRUE
		sei();
    14be:	78 94       	sei
		ADC_Flag_Clear();
    14c0:	34 9a       	sbi	0x06, 4	; 6
		ADC_Interrupt_Enable();
    14c2:	33 9a       	sbi	0x06, 3	; 6
		ADC_call_ptr=Adc->Adc_callback;
    14c4:	82 81       	ldd	r24, Z+2	; 0x02
    14c6:	93 81       	ldd	r25, Z+3	; 0x03
    14c8:	90 93 a5 01 	sts	0x01A5, r25
    14cc:	80 93 a4 01 	sts	0x01A4, r24
#endif
		ADC_ENABLE() ;
    14d0:	37 9a       	sbi	0x06, 7	; 6
	}
	ADC_START_Conversion();
    14d2:	36 9a       	sbi	0x06, 6	; 6
	return Err_state;
}
    14d4:	82 2f       	mov	r24, r18
    14d6:	08 95       	ret

000014d8 <ADC_config_channel>:

uint8 ADC_config_channel(ADC_config_t *Adc,uint8 Adc_channel)
{
    14d8:	fc 01       	movw	r30, r24
	uint8 Err_state=E_OK;
	if(Adc==NULL)
    14da:	00 97       	sbiw	r24, 0x00	; 0
    14dc:	11 f4       	brne	.+4      	; 0x14e2 <ADC_config_channel+0xa>
    14de:	80 e0       	ldi	r24, 0x00	; 0
    14e0:	08 95       	ret
		Err_state=E_NOK;
	else
	{
		Adc->ADC_channel=Adc_channel;
    14e2:	96 2f       	mov	r25, r22
    14e4:	97 70       	andi	r25, 0x07	; 7
    14e6:	99 0f       	add	r25, r25
    14e8:	99 0f       	add	r25, r25
    14ea:	99 0f       	add	r25, r25
    14ec:	81 81       	ldd	r24, Z+1	; 0x01
    14ee:	87 7c       	andi	r24, 0xC7	; 199
    14f0:	89 2b       	or	r24, r25
    14f2:	81 83       	std	Z+1, r24	; 0x01
static void (*ADC_call_ptr)(void)=NULL;
#endif

static inline void Adc_set_channel(uint8 Adc_channel)
{
	ADMUX&=0xE0;
    14f4:	87 b1       	in	r24, 0x07	; 7
    14f6:	80 7e       	andi	r24, 0xE0	; 224
    14f8:	87 b9       	out	0x07, r24	; 7
	ADMUX|=Adc_channel;
    14fa:	87 b1       	in	r24, 0x07	; 7
    14fc:	86 2b       	or	r24, r22
    14fe:	87 b9       	out	0x07, r24	; 7
    1500:	81 e0       	ldi	r24, 0x01	; 1
	{
		Adc->ADC_channel=Adc_channel;
		Adc_set_channel(Adc_channel);
	}
	return Err_state;
}
    1502:	08 95       	ret

00001504 <ADC_Conversion_polling>:

uint8 ADC_Conversion_polling(ADC_config_t *Adc,uint16 *Result)
{
    1504:	fc 01       	movw	r30, r24
    1506:	db 01       	movw	r26, r22
	uint8 Err_state=E_OK;
	if (Adc == NULL)
    1508:	00 97       	sbiw	r24, 0x00	; 0
    150a:	11 f4       	brne	.+4      	; 0x1510 <ADC_Conversion_polling+0xc>
    150c:	80 e0       	ldi	r24, 0x00	; 0
    150e:	08 95       	ret
		Err_state = E_NOK;
	else
	{
		ADC_config_channel(Adc,Adc->ADC_channel);
    1510:	81 81       	ldd	r24, Z+1	; 0x01
    1512:	98 2f       	mov	r25, r24
    1514:	96 95       	lsr	r25
    1516:	96 95       	lsr	r25
    1518:	96 95       	lsr	r25
    151a:	97 70       	andi	r25, 0x07	; 7
	uint8 Err_state=E_OK;
	if(Adc==NULL)
		Err_state=E_NOK;
	else
	{
		Adc->ADC_channel=Adc_channel;
    151c:	29 2f       	mov	r18, r25
    151e:	22 0f       	add	r18, r18
    1520:	22 0f       	add	r18, r18
    1522:	22 0f       	add	r18, r18
    1524:	87 7c       	andi	r24, 0xC7	; 199
    1526:	82 2b       	or	r24, r18
    1528:	81 83       	std	Z+1, r24	; 0x01
static void (*ADC_call_ptr)(void)=NULL;
#endif

static inline void Adc_set_channel(uint8 Adc_channel)
{
	ADMUX&=0xE0;
    152a:	87 b1       	in	r24, 0x07	; 7
    152c:	80 7e       	andi	r24, 0xE0	; 224
    152e:	87 b9       	out	0x07, r24	; 7
	ADMUX|=Adc_channel;
    1530:	87 b1       	in	r24, 0x07	; 7
    1532:	98 2b       	or	r25, r24
    1534:	97 b9       	out	0x07, r25	; 7
	if (Adc == NULL)
		Err_state = E_NOK;
	else
	{
		ADC_config_channel(Adc,Adc->ADC_channel);
		ADC_START_Conversion();
    1536:	36 9a       	sbi	0x06, 6	; 6
		while(ADC_CONV_IN_PROGRESS());
    1538:	36 99       	sbic	0x06, 6	; 6
    153a:	fe cf       	rjmp	.-4      	; 0x1538 <ADC_Conversion_polling+0x34>
	return Err_state;
}

static  void ADC_read(uint8 ADC_justification,uint16*Result)
{
	switch(ADC_justification)
    153c:	81 81       	ldd	r24, Z+1	; 0x01
    153e:	86 95       	lsr	r24
    1540:	86 95       	lsr	r24
    1542:	98 2f       	mov	r25, r24
    1544:	91 70       	andi	r25, 0x01	; 1
    1546:	80 ff       	sbrs	r24, 0
    1548:	03 c0       	rjmp	.+6      	; 0x1550 <ADC_Conversion_polling+0x4c>
    154a:	91 30       	cpi	r25, 0x01	; 1
    154c:	49 f4       	brne	.+18     	; 0x1560 <ADC_Conversion_polling+0x5c>
    154e:	0a c0       	rjmp	.+20     	; 0x1564 <ADC_Conversion_polling+0x60>
	{
	case ADC_Left_justified:
		*Result=ADCL+(uint16)256*ADCH;
    1550:	34 b1       	in	r19, 0x04	; 4
    1552:	25 b1       	in	r18, 0x05	; 5
    1554:	92 2f       	mov	r25, r18
    1556:	80 e0       	ldi	r24, 0x00	; 0
    1558:	83 0f       	add	r24, r19
    155a:	91 1d       	adc	r25, r1
    155c:	8d 93       	st	X+, r24
    155e:	9c 93       	st	X, r25
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	08 95       	ret
		break;
	case ADC_Right_justified:
		*Result=(ADCL>>6)+(ADCH&0x3F)+(uint16)((ADCH>>6)*256);
    1564:	54 b1       	in	r21, 0x04	; 4
    1566:	25 b1       	in	r18, 0x05	; 5
    1568:	45 b1       	in	r20, 0x05	; 5
    156a:	94 2f       	mov	r25, r20
    156c:	92 95       	swap	r25
    156e:	96 95       	lsr	r25
    1570:	96 95       	lsr	r25
    1572:	93 70       	andi	r25, 0x03	; 3
    1574:	80 e0       	ldi	r24, 0x00	; 0
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	2f 73       	andi	r18, 0x3F	; 63
    157a:	30 70       	andi	r19, 0x00	; 0
    157c:	52 95       	swap	r21
    157e:	56 95       	lsr	r21
    1580:	56 95       	lsr	r21
    1582:	53 70       	andi	r21, 0x03	; 3
    1584:	25 0f       	add	r18, r21
    1586:	31 1d       	adc	r19, r1
    1588:	82 0f       	add	r24, r18
    158a:	93 1f       	adc	r25, r19
    158c:	8d 93       	st	X+, r24
    158e:	9c 93       	st	X, r25
    1590:	81 e0       	ldi	r24, 0x01	; 1
		ADC_START_Conversion();
		while(ADC_CONV_IN_PROGRESS());
		ADC_read(Adc->ADC_justification,Result);
	}
	return Err_state;
}
    1592:	08 95       	ret

00001594 <ADC_Conversion_interrupt>:
		break;
	}
}

void ADC_Conversion_interrupt(uint8 ADC_justification,uint16*Result,uint8 Next_channel)
{
    1594:	fb 01       	movw	r30, r22
    1596:	64 2f       	mov	r22, r20
	switch (ADC_justification) {
    1598:	88 23       	and	r24, r24
    159a:	19 f0       	breq	.+6      	; 0x15a2 <ADC_Conversion_interrupt+0xe>
    159c:	81 30       	cpi	r24, 0x01	; 1
    159e:	f1 f4       	brne	.+60     	; 0x15dc <ADC_Conversion_interrupt+0x48>
    15a0:	07 c0       	rjmp	.+14     	; 0x15b0 <ADC_Conversion_interrupt+0x1c>
	case ADC_Left_justified:
		*Result = ADCL + (uint16) 256 * ADCH;
    15a2:	34 b1       	in	r19, 0x04	; 4
    15a4:	25 b1       	in	r18, 0x05	; 5
    15a6:	92 2f       	mov	r25, r18
    15a8:	80 e0       	ldi	r24, 0x00	; 0
    15aa:	83 0f       	add	r24, r19
    15ac:	91 1d       	adc	r25, r1
    15ae:	14 c0       	rjmp	.+40     	; 0x15d8 <ADC_Conversion_interrupt+0x44>
		break;
	case ADC_Right_justified:
		*Result = (ADCL >> 6) + (ADCH & 0x3F) + (uint16) ((ADCH >> 6) * 256);
    15b0:	54 b1       	in	r21, 0x04	; 4
    15b2:	25 b1       	in	r18, 0x05	; 5
    15b4:	45 b1       	in	r20, 0x05	; 5
    15b6:	94 2f       	mov	r25, r20
    15b8:	92 95       	swap	r25
    15ba:	96 95       	lsr	r25
    15bc:	96 95       	lsr	r25
    15be:	93 70       	andi	r25, 0x03	; 3
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	2f 73       	andi	r18, 0x3F	; 63
    15c6:	30 70       	andi	r19, 0x00	; 0
    15c8:	52 95       	swap	r21
    15ca:	56 95       	lsr	r21
    15cc:	56 95       	lsr	r21
    15ce:	53 70       	andi	r21, 0x03	; 3
    15d0:	25 0f       	add	r18, r21
    15d2:	31 1d       	adc	r19, r1
    15d4:	82 0f       	add	r24, r18
    15d6:	93 1f       	adc	r25, r19
    15d8:	91 83       	std	Z+1, r25	; 0x01
    15da:	80 83       	st	Z, r24
static void (*ADC_call_ptr)(void)=NULL;
#endif

static inline void Adc_set_channel(uint8 Adc_channel)
{
	ADMUX&=0xE0;
    15dc:	87 b1       	in	r24, 0x07	; 7
    15de:	80 7e       	andi	r24, 0xE0	; 224
    15e0:	87 b9       	out	0x07, r24	; 7
	ADMUX|=Adc_channel;
    15e2:	87 b1       	in	r24, 0x07	; 7
    15e4:	86 2b       	or	r24, r22
    15e6:	87 b9       	out	0x07, r24	; 7
	case ADC_Right_justified:
		*Result = (ADCL >> 6) + (ADCH & 0x3F) + (uint16) ((ADCH >> 6) * 256);
		break;
	}
	Adc_set_channel(Next_channel);
}
    15e8:	08 95       	ret

000015ea <ADC_ISR>:

#if ADC_interrupt_enable==TRUE
void ADC_ISR()
{
	if(ADC_call_ptr)
    15ea:	e0 91 a4 01 	lds	r30, 0x01A4
    15ee:	f0 91 a5 01 	lds	r31, 0x01A5
    15f2:	30 97       	sbiw	r30, 0x00	; 0
    15f4:	09 f0       	breq	.+2      	; 0x15f8 <ADC_ISR+0xe>
		ADC_call_ptr();
    15f6:	09 95       	icall
    15f8:	08 95       	ret

000015fa <SPI_CONFIG>:
 */

#include "mcal_spi.h"

uint8 SPI_CONFIG(spi_cnfg_t *Spi)
{
    15fa:	fc 01       	movw	r30, r24
	uint8 Ret=E_OK;
	if(Spi==NULL)
    15fc:	00 97       	sbiw	r24, 0x00	; 0
    15fe:	11 f4       	brne	.+4      	; 0x1604 <SPI_CONFIG+0xa>
    1600:	80 e0       	ldi	r24, 0x00	; 0
    1602:	08 95       	ret
		Ret= E_NOK;
	else{
		/***Disable SPI***/
		Mcal_SPI_DIS();
    1604:	6e 98       	cbi	0x0d, 6	; 13
		Mcal_SPI_INT_DIS();
    1606:	6f 98       	cbi	0x0d, 7	; 13
		/*******Set SPI_DIr******/
		switch(Spi->SPI_mode)
    1608:	80 81       	ld	r24, Z
    160a:	82 95       	swap	r24
    160c:	81 70       	andi	r24, 0x01	; 1
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	00 97       	sbiw	r24, 0x00	; 0
    1612:	19 f0       	breq	.+6      	; 0x161a <SPI_CONFIG+0x20>
    1614:	01 97       	sbiw	r24, 0x01	; 1
    1616:	41 f4       	brne	.+16     	; 0x1628 <SPI_CONFIG+0x2e>
    1618:	05 c0       	rjmp	.+10     	; 0x1624 <SPI_CONFIG+0x2a>
		{
			case SPI_MSTR_MODE:
				 Mcal_SPI_MSTR();
    161a:	6c 9a       	sbi	0x0d, 4	; 13
				 SPI_PORT_DIR|=(1<<MOSI|1<<SCK|1<<SS);
    161c:	87 b3       	in	r24, 0x17	; 23
    161e:	80 6b       	ori	r24, 0xB0	; 176
    1620:	87 bb       	out	0x17, r24	; 23
    1622:	02 c0       	rjmp	.+4      	; 0x1628 <SPI_CONFIG+0x2e>
				break;
			case SPI_SLAVE_MODE:
				Mcal_SPI_SLAVE();
    1624:	6c 98       	cbi	0x0d, 4	; 13
				SPI_PORT_DIR|=(1<<MISO);
    1626:	be 9a       	sbi	0x17, 6	; 23
				break;
		}
		/*******Set SPI_Speed******/
		SPCR|=(Spi->SPI_CLK_SPEED&0x03);
    1628:	3d b1       	in	r19, 0x0d	; 13
    162a:	80 81       	ld	r24, Z
    162c:	28 2f       	mov	r18, r24
    162e:	23 70       	andi	r18, 0x03	; 3
    1630:	23 2b       	or	r18, r19
    1632:	2d b9       	out	0x0d, r18	; 13
		SPSR|=((Spi->SPI_CLK_SPEED&0x04)>>2);
    1634:	2e b1       	in	r18, 0x0e	; 14
				Mcal_SPI_SLAVE();
				SPI_PORT_DIR|=(1<<MISO);
				break;
		}
		/*******Set SPI_Speed******/
		SPCR|=(Spi->SPI_CLK_SPEED&0x03);
    1636:	8f 70       	andi	r24, 0x0F	; 15
		SPSR|=((Spi->SPI_CLK_SPEED&0x04)>>2);
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	84 70       	andi	r24, 0x04	; 4
    163c:	90 70       	andi	r25, 0x00	; 0
    163e:	95 95       	asr	r25
    1640:	87 95       	ror	r24
    1642:	95 95       	asr	r25
    1644:	87 95       	ror	r24
    1646:	28 2b       	or	r18, r24
    1648:	2e b9       	out	0x0e, r18	; 14
		/*********Set Spi Sampling******/
		switch(Spi->SPI_sample_set)
    164a:	81 81       	ldd	r24, Z+1	; 0x01
    164c:	81 30       	cpi	r24, 0x01	; 1
    164e:	49 f0       	breq	.+18     	; 0x1662 <SPI_CONFIG+0x68>
    1650:	81 30       	cpi	r24, 0x01	; 1
    1652:	28 f0       	brcs	.+10     	; 0x165e <SPI_CONFIG+0x64>
    1654:	82 30       	cpi	r24, 0x02	; 2
    1656:	39 f0       	breq	.+14     	; 0x1666 <SPI_CONFIG+0x6c>
    1658:	83 30       	cpi	r24, 0x03	; 3
    165a:	51 f4       	brne	.+20     	; 0x1670 <SPI_CONFIG+0x76>
    165c:	07 c0       	rjmp	.+14     	; 0x166c <SPI_CONFIG+0x72>
		{
			case SPI_SAMPLE_RISING_SETUP_FALLING:
				Mcal_SPI_CLK_Polarity_L();
    165e:	6b 98       	cbi	0x0d, 3	; 13
    1660:	03 c0       	rjmp	.+6      	; 0x1668 <SPI_CONFIG+0x6e>
				Mcal_SPI_CLK_phase_L();
				break;
			case SPI_SETUP_RISING__SETUP_FALLING:
				Mcal_SPI_CLK_Polarity_L();
    1662:	6b 98       	cbi	0x0d, 3	; 13
    1664:	04 c0       	rjmp	.+8      	; 0x166e <SPI_CONFIG+0x74>
				Mcal_SPI_CLK_phase_H();
				break;
			case SPI_SAMPLE_FALLING_SETUP_RISING:
				Mcal_SPI_CLK_Polarity_H();
    1666:	6b 9a       	sbi	0x0d, 3	; 13
				Mcal_SPI_CLK_phase_L();
    1668:	6a 98       	cbi	0x0d, 2	; 13
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <SPI_CONFIG+0x76>
				break;
			case SPI_SETUP_FALLING_SAMPLE_RISING:
				Mcal_SPI_CLK_Polarity_H();
    166c:	6b 9a       	sbi	0x0d, 3	; 13
				Mcal_SPI_CLK_phase_H();
    166e:	6a 9a       	sbi	0x0d, 2	; 13
				break;
		}
		/*********Set Spi data sent*******/
		switch(Spi->SPI_ORD)
    1670:	80 81       	ld	r24, Z
    1672:	82 95       	swap	r24
    1674:	86 95       	lsr	r24
    1676:	81 70       	andi	r24, 0x01	; 1
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	00 97       	sbiw	r24, 0x00	; 0
    167c:	19 f0       	breq	.+6      	; 0x1684 <SPI_CONFIG+0x8a>
    167e:	01 97       	sbiw	r24, 0x01	; 1
    1680:	21 f4       	brne	.+8      	; 0x168a <SPI_CONFIG+0x90>
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <SPI_CONFIG+0x8e>
		{
			case	MSB_FIRST:
				Mcal_SPI_MSB_FIRST();
    1684:	6d 98       	cbi	0x0d, 5	; 13
    1686:	01 c0       	rjmp	.+2      	; 0x168a <SPI_CONFIG+0x90>
				break;
			case LSB_FIRST:
				Mcal_SPI_LSB_FIRST();
    1688:	6d 9a       	sbi	0x0d, 5	; 13
				break;
		}
		Mcal_SPI_EN();
    168a:	6e 9a       	sbi	0x0d, 6	; 13
    168c:	81 e0       	ldi	r24, 0x01	; 1
	}
	return Ret;
}
    168e:	08 95       	ret

00001690 <SPI_SEND_BYTE>:
void SPI_SEND_BYTE(uint8 Data)
{
	SPDR=Data;
    1690:	8f b9       	out	0x0f, r24	; 15
	while(!READ_BIT(SPSR,SPIF));
    1692:	77 9b       	sbis	0x0e, 7	; 14
    1694:	fe cf       	rjmp	.-4      	; 0x1692 <SPI_SEND_BYTE+0x2>
}
    1696:	08 95       	ret

00001698 <SPI_SEND_STR>:
void SPI_SEND_STR(uint8 *str)
{
    1698:	04 c0       	rjmp	.+8      	; 0x16a2 <SPI_SEND_STR+0xa>
	}
	return Ret;
}
void SPI_SEND_BYTE(uint8 Data)
{
	SPDR=Data;
    169a:	8f b9       	out	0x0f, r24	; 15
	while(!READ_BIT(SPSR,SPIF));
    169c:	77 9b       	sbis	0x0e, 7	; 14
    169e:	fe cf       	rjmp	.-4      	; 0x169c <SPI_SEND_STR+0x4>
}
void SPI_SEND_STR(uint8 *str)
{
	while(str)
	{
		SPI_SEND_BYTE(str++);
    16a0:	01 96       	adiw	r24, 0x01	; 1
	SPDR=Data;
	while(!READ_BIT(SPSR,SPIF));
}
void SPI_SEND_STR(uint8 *str)
{
	while(str)
    16a2:	00 97       	sbiw	r24, 0x00	; 0
    16a4:	d1 f7       	brne	.-12     	; 0x169a <SPI_SEND_STR+0x2>
	{
		SPI_SEND_BYTE(str++);
	}
}
    16a6:	08 95       	ret

000016a8 <SPI_RX_BYTE>:
void SPI_RX_BYTE(uint8 *RX)
{
    16a8:	fc 01       	movw	r30, r24
	while(!READ_BIT(SPSR,SPIF));
    16aa:	77 9b       	sbis	0x0e, 7	; 14
    16ac:	fe cf       	rjmp	.-4      	; 0x16aa <SPI_RX_BYTE+0x2>
	*RX=SPDR;
    16ae:	8f b1       	in	r24, 0x0f	; 15
    16b0:	80 83       	st	Z, r24
}
    16b2:	08 95       	ret

000016b4 <SPI_RX_string>:
void SPI_RX_string(uint8 *RX)
{
    16b4:	ac 01       	movw	r20, r24
    16b6:	2f ef       	ldi	r18, 0xFF	; 255
	int8 i=-1;
	do
	{
		i++;
    16b8:	2f 5f       	subi	r18, 0xFF	; 255
		SPI_SEND_BYTE(str++);
	}
}
void SPI_RX_BYTE(uint8 *RX)
{
	while(!READ_BIT(SPSR,SPIF));
    16ba:	77 9b       	sbis	0x0e, 7	; 14
    16bc:	fe cf       	rjmp	.-4      	; 0x16ba <SPI_RX_string+0x6>
	*RX=SPDR;
    16be:	8f b1       	in	r24, 0x0f	; 15
    16c0:	fa 01       	movw	r30, r20
    16c2:	e2 0f       	add	r30, r18
    16c4:	f1 1d       	adc	r31, r1
    16c6:	80 83       	st	Z, r24
	int8 i=-1;
	do
	{
		i++;
		SPI_RX_BYTE(RX+i);
	}while(*(RX+i)!='#');
    16c8:	83 32       	cpi	r24, 0x23	; 35
    16ca:	b1 f7       	brne	.-20     	; 0x16b8 <SPI_RX_string+0x4>
}
    16cc:	08 95       	ret

000016ce <Mcal_TIMER0_set_duty>:
	return Err_state;
}

void	  Mcal_TIMER0_set_duty(uint8 Duty_cycle)
{
	OCR0=((Duty_cycle*255)/100);
    16ce:	9f ef       	ldi	r25, 0xFF	; 255
    16d0:	89 9f       	mul	r24, r25
    16d2:	c0 01       	movw	r24, r0
    16d4:	11 24       	eor	r1, r1
    16d6:	64 e6       	ldi	r22, 0x64	; 100
    16d8:	70 e0       	ldi	r23, 0x00	; 0
    16da:	0e 94 01 19 	call	0x3202	; 0x3202 <__divmodhi4>
    16de:	6c bf       	out	0x3c, r22	; 60
}
    16e0:	08 95       	ret

000016e2 <Mcal_Timer0_delay_polling>:

void  Mcal_Timer0_delay_polling(uint8 TCNT0_val)
{
	uint8 Prescaler;
	Prescaler=TCCR0;
    16e2:	23 b7       	in	r18, 0x33	; 51
	TIMER0_STOP();
    16e4:	93 b7       	in	r25, 0x33	; 51
    16e6:	9e 7f       	andi	r25, 0xFE	; 254
    16e8:	93 bf       	out	0x33, r25	; 51
    16ea:	93 b7       	in	r25, 0x33	; 51
    16ec:	9d 7f       	andi	r25, 0xFD	; 253
    16ee:	93 bf       	out	0x33, r25	; 51
    16f0:	93 b7       	in	r25, 0x33	; 51
    16f2:	9b 7f       	andi	r25, 0xFB	; 251
    16f4:	93 bf       	out	0x33, r25	; 51
	TCNT0=TCNT0_val;
    16f6:	82 bf       	out	0x32, r24	; 50
	TCCR0=Prescaler;
    16f8:	23 bf       	out	0x33, r18	; 51
	while(!READ_BIT(TIFR,TOV0));
    16fa:	08 b6       	in	r0, 0x38	; 56
    16fc:	00 fe       	sbrs	r0, 0
    16fe:	fd cf       	rjmp	.-6      	; 0x16fa <Mcal_Timer0_delay_polling+0x18>
	TIMER0_T0_OVF_Flag_Clear();
    1700:	88 b7       	in	r24, 0x38	; 56
    1702:	81 60       	ori	r24, 0x01	; 1
    1704:	88 bf       	out	0x38, r24	; 56
}
    1706:	08 95       	ret

00001708 <Mcal_Timer0_init>:
#endif

static void  Timer0_wfgm_setting(Timer0_config *Timer0);

uint8 Mcal_Timer0_init(Timer0_config *Timer0)
{
    1708:	cf 93       	push	r28
    170a:	df 93       	push	r29
    170c:	ec 01       	movw	r28, r24
	uint8 Err_state=E_OK;
	if(NULL==Timer0)
    170e:	00 97       	sbiw	r24, 0x00	; 0
    1710:	11 f4       	brne	.+4      	; 0x1716 <Mcal_Timer0_init+0xe>
    1712:	80 e0       	ldi	r24, 0x00	; 0
    1714:	83 c0       	rjmp	.+262    	; 0x181c <Mcal_Timer0_init+0x114>
		Err_state=E_NOK;
	else
	{
		TIMER0_STOP();
    1716:	83 b7       	in	r24, 0x33	; 51
    1718:	8e 7f       	andi	r24, 0xFE	; 254
    171a:	83 bf       	out	0x33, r24	; 51
    171c:	83 b7       	in	r24, 0x33	; 51
    171e:	8d 7f       	andi	r24, 0xFD	; 253
    1720:	83 bf       	out	0x33, r24	; 51
    1722:	83 b7       	in	r24, 0x33	; 51
    1724:	8b 7f       	andi	r24, 0xFB	; 251
    1726:	83 bf       	out	0x33, r24	; 51
		TIMER0_T0_OVF_Flag_Clear();
    1728:	88 b7       	in	r24, 0x38	; 56
    172a:	81 60       	ori	r24, 0x01	; 1
    172c:	88 bf       	out	0x38, r24	; 56
		TIMER0_T0_CTC_Flag_Clear();
    172e:	88 b7       	in	r24, 0x38	; 56
    1730:	82 60       	ori	r24, 0x02	; 2
    1732:	88 bf       	out	0x38, r24	; 56
	TIMER0_T0_OVF_Flag_Clear();
}

static void  Timer0_wfgm_setting(Timer0_config *Timer0)
{
	switch(Timer0->WFGM_mode)
    1734:	88 81       	ld	r24, Y
    1736:	81 30       	cpi	r24, 0x01	; 1
    1738:	71 f0       	breq	.+28     	; 0x1756 <Mcal_Timer0_init+0x4e>
    173a:	81 30       	cpi	r24, 0x01	; 1
    173c:	30 f0       	brcs	.+12     	; 0x174a <Mcal_Timer0_init+0x42>
    173e:	82 30       	cpi	r24, 0x02	; 2
    1740:	d1 f0       	breq	.+52     	; 0x1776 <Mcal_Timer0_init+0x6e>
    1742:	83 30       	cpi	r24, 0x03	; 3
    1744:	09 f0       	breq	.+2      	; 0x1748 <Mcal_Timer0_init+0x40>
    1746:	51 c0       	rjmp	.+162    	; 0x17ea <Mcal_Timer0_init+0xe2>
    1748:	39 c0       	rjmp	.+114    	; 0x17bc <Mcal_Timer0_init+0xb4>
	{
		case WFGM_T0_NORMAL:
			CLEAR_BIT(TCCR0,WGM00);
    174a:	83 b7       	in	r24, 0x33	; 51
    174c:	8f 7b       	andi	r24, 0xBF	; 191
    174e:	83 bf       	out	0x33, r24	; 51
			CLEAR_BIT(TCCR0,WGM01);
    1750:	83 b7       	in	r24, 0x33	; 51
    1752:	87 7f       	andi	r24, 0xF7	; 247
    1754:	25 c0       	rjmp	.+74     	; 0x17a0 <Mcal_Timer0_init+0x98>
			break;
		case WFGM_PWM_T0_PHASE_CORRECT:
			SET_BIT(TCCR0,WGM00);
    1756:	83 b7       	in	r24, 0x33	; 51
    1758:	80 64       	ori	r24, 0x40	; 64
    175a:	83 bf       	out	0x33, r24	; 51
			CLEAR_BIT(TCCR0,WGM01);
    175c:	83 b7       	in	r24, 0x33	; 51
    175e:	87 7f       	andi	r24, 0xF7	; 247
    1760:	83 bf       	out	0x33, r24	; 51
			TIMER0_DDR|=(1<<OCO);
    1762:	bb 9a       	sbi	0x17, 3	; 23
			switch(Timer0->Phase_PWM_setting)
    1764:	8b 81       	ldd	r24, Y+3	; 0x03
    1766:	32 c0       	rjmp	.+100    	; 0x17cc <Mcal_Timer0_init+0xc4>
				case PHASE_CORRECT_PWM_T0_NonInverting:
					CLEAR_BIT(TCCR0, COM00);
					SET_BIT(TCCR0, COM01);
					break;
				case PHASE_CORRECT_PWM_T0_Inverting:
					SET_BIT(TCCR0, COM00);
    1768:	83 b7       	in	r24, 0x33	; 51
    176a:	80 61       	ori	r24, 0x10	; 16
    176c:	83 bf       	out	0x33, r24	; 51
					SET_BIT(TCCR0, COM01);
    176e:	83 b7       	in	r24, 0x33	; 51
    1770:	80 62       	ori	r24, 0x20	; 32
    1772:	83 bf       	out	0x33, r24	; 51
    1774:	3e c0       	rjmp	.+124    	; 0x17f2 <Mcal_Timer0_init+0xea>
				default:
					break;
			}
			break;
		case WFGM_CTC_T0:
			CLEAR_BIT(TCCR0,WGM00);
    1776:	83 b7       	in	r24, 0x33	; 51
    1778:	8f 7b       	andi	r24, 0xBF	; 191
    177a:	83 bf       	out	0x33, r24	; 51
			SET_BIT(TCCR0,WGM01);
    177c:	83 b7       	in	r24, 0x33	; 51
    177e:	88 60       	ori	r24, 0x08	; 8
    1780:	83 bf       	out	0x33, r24	; 51
		switch (Timer0->Fast_PWM_setting) {
    1782:	8a 81       	ldd	r24, Y+2	; 0x02
    1784:	81 30       	cpi	r24, 0x01	; 1
    1786:	71 f0       	breq	.+28     	; 0x17a4 <Mcal_Timer0_init+0x9c>
    1788:	81 30       	cpi	r24, 0x01	; 1
    178a:	28 f0       	brcs	.+10     	; 0x1796 <Mcal_Timer0_init+0x8e>
    178c:	82 30       	cpi	r24, 0x02	; 2
    178e:	69 f0       	breq	.+26     	; 0x17aa <Mcal_Timer0_init+0xa2>
    1790:	83 30       	cpi	r24, 0x03	; 3
    1792:	99 f5       	brne	.+102    	; 0x17fa <Mcal_Timer0_init+0xf2>
    1794:	0d c0       	rjmp	.+26     	; 0x17b0 <Mcal_Timer0_init+0xa8>
			case CTCT_T0_NORMAL_PORT:
				CLEAR_BIT(TCCR0, COM00);
    1796:	83 b7       	in	r24, 0x33	; 51
    1798:	8f 7e       	andi	r24, 0xEF	; 239
    179a:	83 bf       	out	0x33, r24	; 51
				CLEAR_BIT(TCCR0, COM01);
    179c:	83 b7       	in	r24, 0x33	; 51
    179e:	8f 7d       	andi	r24, 0xDF	; 223
    17a0:	83 bf       	out	0x33, r24	; 51
    17a2:	2b c0       	rjmp	.+86     	; 0x17fa <Mcal_Timer0_init+0xf2>
				break;
			case CTC_T0_TOGGLE_OC0:
				SET_BIT(TCCR0, COM00);
    17a4:	83 b7       	in	r24, 0x33	; 51
    17a6:	80 61       	ori	r24, 0x10	; 16
    17a8:	f8 cf       	rjmp	.-16     	; 0x179a <Mcal_Timer0_init+0x92>
				CLEAR_BIT(TCCR0, COM01);
				break;
			case CTC_T0_CLEAR_OC0:
				CLEAR_BIT(TCCR0, COM00);
    17aa:	83 b7       	in	r24, 0x33	; 51
    17ac:	8f 7e       	andi	r24, 0xEF	; 239
    17ae:	02 c0       	rjmp	.+4      	; 0x17b4 <Mcal_Timer0_init+0xac>
				SET_BIT(TCCR0, COM01);
				break;
			case CTCT_T0_SET_OC0:
				SET_BIT(TCCR0, COM00);
    17b0:	83 b7       	in	r24, 0x33	; 51
    17b2:	80 61       	ori	r24, 0x10	; 16
    17b4:	83 bf       	out	0x33, r24	; 51
				SET_BIT(TCCR0, COM01);
    17b6:	83 b7       	in	r24, 0x33	; 51
    17b8:	80 62       	ori	r24, 0x20	; 32
    17ba:	f2 cf       	rjmp	.-28     	; 0x17a0 <Mcal_Timer0_init+0x98>
			default:
				break;
			}
			break;
		case WFGM_T0_FAST_PWM:
			SET_BIT(TCCR0, WGM00);
    17bc:	83 b7       	in	r24, 0x33	; 51
    17be:	80 64       	ori	r24, 0x40	; 64
    17c0:	83 bf       	out	0x33, r24	; 51
			SET_BIT(TCCR0, WGM01);
    17c2:	83 b7       	in	r24, 0x33	; 51
    17c4:	88 60       	ori	r24, 0x08	; 8
    17c6:	83 bf       	out	0x33, r24	; 51
			TIMER0_DDR|=(1<<OCO);
    17c8:	bb 9a       	sbi	0x17, 3	; 23
		switch (Timer0->Fast_PWM_setting) {
    17ca:	8a 81       	ldd	r24, Y+2	; 0x02
    17cc:	82 30       	cpi	r24, 0x02	; 2
    17ce:	51 f0       	breq	.+20     	; 0x17e4 <Mcal_Timer0_init+0xdc>
    17d0:	83 30       	cpi	r24, 0x03	; 3
    17d2:	51 f2       	breq	.-108    	; 0x1768 <Mcal_Timer0_init+0x60>
    17d4:	88 23       	and	r24, r24
    17d6:	69 f4       	brne	.+26     	; 0x17f2 <Mcal_Timer0_init+0xea>
			case FAST_PWM_T0_Normal:
				CLEAR_BIT(TCCR0, COM00);
    17d8:	83 b7       	in	r24, 0x33	; 51
    17da:	8f 7e       	andi	r24, 0xEF	; 239
    17dc:	83 bf       	out	0x33, r24	; 51
				CLEAR_BIT(TCCR0, COM01);
    17de:	83 b7       	in	r24, 0x33	; 51
    17e0:	8f 7d       	andi	r24, 0xDF	; 223
    17e2:	c7 cf       	rjmp	.-114    	; 0x1772 <Mcal_Timer0_init+0x6a>
				break;
			case FAST_PWM_T0_NonInverting:
				CLEAR_BIT(TCCR0, COM00);
    17e4:	83 b7       	in	r24, 0x33	; 51
    17e6:	8f 7e       	andi	r24, 0xEF	; 239
    17e8:	c1 cf       	rjmp	.-126    	; 0x176c <Mcal_Timer0_init+0x64>
	{
		TIMER0_STOP();
		TIMER0_T0_OVF_Flag_Clear();
		TIMER0_T0_CTC_Flag_Clear();
		Timer0_wfgm_setting(Timer0);
		if(Timer0->WFGM_mode==WFGM_PWM_T0_PHASE_CORRECT||Timer0->WFGM_mode==WFGM_T0_FAST_PWM)
    17ea:	81 30       	cpi	r24, 0x01	; 1
    17ec:	11 f0       	breq	.+4      	; 0x17f2 <Mcal_Timer0_init+0xea>
    17ee:	83 30       	cpi	r24, 0x03	; 3
    17f0:	21 f4       	brne	.+8      	; 0x17fa <Mcal_Timer0_init+0xf2>
			Mcal_TIMER0_set_duty(Timer0->T0_duty_cycle);
    17f2:	8d 81       	ldd	r24, Y+5	; 0x05
    17f4:	0e 94 67 0b 	call	0x16ce	; 0x16ce <Mcal_TIMER0_set_duty>
    17f8:	02 c0       	rjmp	.+4      	; 0x17fe <Mcal_Timer0_init+0xf6>
		else
			TCNT0=Timer0->T0_TCNT0_init_val;
    17fa:	8e 81       	ldd	r24, Y+6	; 0x06
    17fc:	82 bf       	out	0x32, r24	; 50
#if Timer0_OVF_Int==TRUE
		sei();
    17fe:	78 94       	sei
		TIMER0_OVF_callback=Timer0->TIMER0_ovf_callback;
    1800:	8f 81       	ldd	r24, Y+7	; 0x07
    1802:	98 85       	ldd	r25, Y+8	; 0x08
    1804:	90 93 a7 01 	sts	0x01A7, r25
    1808:	80 93 a6 01 	sts	0x01A6, r24
		TIMER0_T0_OVF_INT_Enable();
    180c:	89 b7       	in	r24, 0x39	; 57
    180e:	81 60       	ori	r24, 0x01	; 1
    1810:	89 bf       	out	0x39, r24	; 57
#if Timer0_CTC_Int==TRUE
		sei();
		TIMER0_CTC_callback=Timer0->TIMER0_ctc_callback;
		TIMER0_T0_CTC_INT_Enable();
#endif
		TCCR0|=Timer0->Prescaler_Counter_setting;
    1812:	83 b7       	in	r24, 0x33	; 51
    1814:	9c 81       	ldd	r25, Y+4	; 0x04
    1816:	89 2b       	or	r24, r25
    1818:	83 bf       	out	0x33, r24	; 51
    181a:	81 e0       	ldi	r24, 0x01	; 1
	}
	return Err_state;
}
    181c:	df 91       	pop	r29
    181e:	cf 91       	pop	r28
    1820:	08 95       	ret

00001822 <Mcal_Usart_init>:
			break;
	}
}

uint8 Mcal_Usart_init(USART_Config_t *USART)
{
    1822:	cf 93       	push	r28
    1824:	df 93       	push	r29
    1826:	ec 01       	movw	r28, r24
	uint8 Err_state=E_OK;
	if(USART==NULL)
    1828:	00 97       	sbiw	r24, 0x00	; 0
    182a:	11 f4       	brne	.+4      	; 0x1830 <Mcal_Usart_init+0xe>
    182c:	80 e0       	ldi	r24, 0x00	; 0
    182e:	60 c0       	rjmp	.+192    	; 0x18f0 <Mcal_Usart_init+0xce>
#endif

static void Baud_rate_set(USART_Config_t *USART)
{
	uint32 UBRR;
	switch(USART->Enhanced_Speed)
    1830:	8c 81       	ldd	r24, Y+4	; 0x04
    1832:	88 23       	and	r24, r24
    1834:	19 f0       	breq	.+6      	; 0x183c <Mcal_Usart_init+0x1a>
    1836:	81 30       	cpi	r24, 0x01	; 1
    1838:	51 f5       	brne	.+84     	; 0x188e <Mcal_Usart_init+0x6c>
    183a:	0d c0       	rjmp	.+26     	; 0x1856 <Mcal_Usart_init+0x34>
	{
		case USART_DOUBLE_SPEED_ENABLE:
			USART_D2X_ENABLE();
    183c:	59 9a       	sbi	0x0b, 1	; 11
			UBRR=(((F_CPU / (USART->Baud_rate * 8UL))) - 1);
    183e:	28 81       	ld	r18, Y
    1840:	39 81       	ldd	r19, Y+1	; 0x01
    1842:	4a 81       	ldd	r20, Y+2	; 0x02
    1844:	5b 81       	ldd	r21, Y+3	; 0x03
    1846:	63 e0       	ldi	r22, 0x03	; 3
    1848:	22 0f       	add	r18, r18
    184a:	33 1f       	adc	r19, r19
    184c:	44 1f       	adc	r20, r20
    184e:	55 1f       	adc	r21, r21
    1850:	6a 95       	dec	r22
    1852:	d1 f7       	brne	.-12     	; 0x1848 <Mcal_Usart_init+0x26>
    1854:	0c c0       	rjmp	.+24     	; 0x186e <Mcal_Usart_init+0x4c>
			UBRRL=(uint8)UBRR;
			UBRRH=(uint8)(UBRR>>8);
			break;
		case USART_DOUBLE_SPEED_DISABLE:
			USART_D2X_DISABLE();
    1856:	59 98       	cbi	0x0b, 1	; 11
			UBRR=(((F_CPU / (USART->Baud_rate * 16UL))) - 1);
    1858:	28 81       	ld	r18, Y
    185a:	39 81       	ldd	r19, Y+1	; 0x01
    185c:	4a 81       	ldd	r20, Y+2	; 0x02
    185e:	5b 81       	ldd	r21, Y+3	; 0x03
    1860:	94 e0       	ldi	r25, 0x04	; 4
    1862:	22 0f       	add	r18, r18
    1864:	33 1f       	adc	r19, r19
    1866:	44 1f       	adc	r20, r20
    1868:	55 1f       	adc	r21, r21
    186a:	9a 95       	dec	r25
    186c:	d1 f7       	brne	.-12     	; 0x1862 <Mcal_Usart_init+0x40>
    186e:	60 e0       	ldi	r22, 0x00	; 0
    1870:	74 e2       	ldi	r23, 0x24	; 36
    1872:	84 ef       	ldi	r24, 0xF4	; 244
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	0e 94 14 19 	call	0x3228	; 0x3228 <__udivmodsi4>
    187a:	21 50       	subi	r18, 0x01	; 1
    187c:	30 40       	sbci	r19, 0x00	; 0
    187e:	40 40       	sbci	r20, 0x00	; 0
    1880:	50 40       	sbci	r21, 0x00	; 0
			UBRRL=(uint8)UBRR;
    1882:	29 b9       	out	0x09, r18	; 9
			UBRRH=(uint8)(UBRR>>8);
    1884:	23 2f       	mov	r18, r19
    1886:	34 2f       	mov	r19, r20
    1888:	45 2f       	mov	r20, r21
    188a:	55 27       	eor	r21, r21
    188c:	20 bd       	out	0x20, r18	; 32
	}
}

static void USART_BUFF_SIZE_set(USART_Config_t *USART)
{
	switch(USART->Buff_size)
    188e:	8f 81       	ldd	r24, Y+7	; 0x07
    1890:	82 30       	cpi	r24, 0x02	; 2
    1892:	89 f0       	breq	.+34     	; 0x18b6 <Mcal_Usart_init+0x94>
    1894:	83 30       	cpi	r24, 0x03	; 3
    1896:	28 f4       	brcc	.+10     	; 0x18a2 <Mcal_Usart_init+0x80>
    1898:	88 23       	and	r24, r24
    189a:	59 f0       	breq	.+22     	; 0x18b2 <Mcal_Usart_init+0x90>
    189c:	81 30       	cpi	r24, 0x01	; 1
    189e:	a9 f4       	brne	.+42     	; 0x18ca <Mcal_Usart_init+0xa8>
    18a0:	05 c0       	rjmp	.+10     	; 0x18ac <Mcal_Usart_init+0x8a>
    18a2:	83 30       	cpi	r24, 0x03	; 3
    18a4:	59 f0       	breq	.+22     	; 0x18bc <Mcal_Usart_init+0x9a>
    18a6:	87 30       	cpi	r24, 0x07	; 7
    18a8:	81 f4       	brne	.+32     	; 0x18ca <Mcal_Usart_init+0xa8>
    18aa:	0b c0       	rjmp	.+22     	; 0x18c2 <Mcal_Usart_init+0xa0>
	{
		case USART_DATA_5_BITS:
			WRITE_BIT(UCSRB,UCSZ2,FALSE);
			break;
		case USART_DATA_6_BITS:
			UCSRC|=(1<<URSEL|1<<UCSZ0);
    18ac:	80 b5       	in	r24, 0x20	; 32
    18ae:	82 68       	ori	r24, 0x82	; 130
    18b0:	80 bd       	out	0x20, r24	; 32
			WRITE_BIT(UCSRB,UCSZ2,FALSE);
    18b2:	52 98       	cbi	0x0a, 2	; 10
    18b4:	0a c0       	rjmp	.+20     	; 0x18ca <Mcal_Usart_init+0xa8>
					break;
		case USART_DATA_7_BITS:
			UCSRC|=(1<<URSEL|1<<UCSZ1);
    18b6:	80 b5       	in	r24, 0x20	; 32
    18b8:	84 68       	ori	r24, 0x84	; 132
    18ba:	fa cf       	rjmp	.-12     	; 0x18b0 <Mcal_Usart_init+0x8e>
			WRITE_BIT(UCSRB,UCSZ2,FALSE);
					break;
		case USART_DATA_8_BITS:
			UCSRC|=(1<<URSEL|1<<UCSZ1|1<<UCSZ0);
    18bc:	80 b5       	in	r24, 0x20	; 32
    18be:	86 68       	ori	r24, 0x86	; 134
    18c0:	f7 cf       	rjmp	.-18     	; 0x18b0 <Mcal_Usart_init+0x8e>
			WRITE_BIT(UCSRB,UCSZ2,FALSE);
					break;
		case USART_DATA_9_BITS:
			UCSRC|=(1<<URSEL|1<<UCSZ1|1<<UCSZ0);
    18c2:	80 b5       	in	r24, 0x20	; 32
    18c4:	86 68       	ori	r24, 0x86	; 134
    18c6:	80 bd       	out	0x20, r24	; 32
			WRITE_BIT(UCSRB,UCSZ2,TRUE);
    18c8:	52 9a       	sbi	0x0a, 2	; 10
			break;
			default:
				break;
	}
	switch (USART->P_Mode) {
    18ca:	8e 81       	ldd	r24, Y+6	; 0x06
    18cc:	82 30       	cpi	r24, 0x02	; 2
    18ce:	19 f0       	breq	.+6      	; 0x18d6 <Mcal_Usart_init+0xb4>
    18d0:	83 30       	cpi	r24, 0x03	; 3
    18d2:	39 f4       	brne	.+14     	; 0x18e2 <Mcal_Usart_init+0xc0>
    18d4:	03 c0       	rjmp	.+6      	; 0x18dc <Mcal_Usart_init+0xba>
		case USART_PARITY_EVEN:
			UCSRC |= (1 << URSEL | 1 << UPM1);
    18d6:	80 b5       	in	r24, 0x20	; 32
    18d8:	80 6a       	ori	r24, 0xA0	; 160
    18da:	02 c0       	rjmp	.+4      	; 0x18e0 <Mcal_Usart_init+0xbe>
			break;
		case USART_PARITY_ODD:
			UCSRC |= (1 << URSEL | 1 << UPM1 | 1 << UPM0);
    18dc:	80 b5       	in	r24, 0x20	; 32
    18de:	80 6b       	ori	r24, 0xB0	; 176
    18e0:	80 bd       	out	0x20, r24	; 32
		Err_state=E_NOK;
	else
	{
		Baud_rate_set(USART);
		USART_BUFF_SIZE_set(USART);
		switch (USART->NO_stop_bits) {
    18e2:	8d 81       	ldd	r24, Y+5	; 0x05
    18e4:	81 30       	cpi	r24, 0x01	; 1
    18e6:	19 f4       	brne	.+6      	; 0x18ee <Mcal_Usart_init+0xcc>
		case USART_1_STOP_BITS:
			break;
		case USART_2_STOP_BITS:
			UCSRC|=(1<<URSEL|1<<USBS);
    18e8:	80 b5       	in	r24, 0x20	; 32
    18ea:	88 68       	ori	r24, 0x88	; 136
    18ec:	80 bd       	out	0x20, r24	; 32
    18ee:	81 e0       	ldi	r24, 0x01	; 1
		USART_TX_ENABLE();
		USART_RX_ENABLE();
		}
	}
	return Err_state;
}
    18f0:	df 91       	pop	r29
    18f2:	cf 91       	pop	r28
    18f4:	08 95       	ret

000018f6 <Mcal_Usart_send>:


uint8 Mcal_Usart_send(USART_Config_t *USART,uint8 Data)
{
    18f6:	fc 01       	movw	r30, r24
	uint8 Err_state = E_OK;
	if (USART == NULL)
    18f8:	00 97       	sbiw	r24, 0x00	; 0
    18fa:	11 f4       	brne	.+4      	; 0x1900 <Mcal_Usart_send+0xa>
    18fc:	80 e0       	ldi	r24, 0x00	; 0
    18fe:	08 95       	ret
		Err_state = E_NOK;
	else {
		uint8 Parity_bit=0;
		switch(USART->Buff_size)
    1900:	87 81       	ldd	r24, Z+7	; 0x07
    1902:	87 30       	cpi	r24, 0x07	; 7
    1904:	09 f0       	breq	.+2      	; 0x1908 <Mcal_Usart_send+0x12>
    1906:	78 c0       	rjmp	.+240    	; 0x19f8 <Mcal_Usart_send+0x102>
		{
			case USART_DATA_9_BITS:
			{
				switch(USART->P_Mode)
    1908:	86 81       	ldd	r24, Z+6	; 0x06
    190a:	82 30       	cpi	r24, 0x02	; 2
    190c:	21 f0       	breq	.+8      	; 0x1916 <Mcal_Usart_send+0x20>
    190e:	83 30       	cpi	r24, 0x03	; 3
    1910:	09 f0       	breq	.+2      	; 0x1914 <Mcal_Usart_send+0x1e>
    1912:	72 c0       	rjmp	.+228    	; 0x19f8 <Mcal_Usart_send+0x102>
    1914:	2e c0       	rjmp	.+92     	; 0x1972 <Mcal_Usart_send+0x7c>
				{
				case USART_PARITY_EVEN:
					Parity_bit = (READ_BIT(Data, 7)) ^ (READ_BIT(Data, 6))
    1916:	96 2f       	mov	r25, r22
    1918:	91 70       	andi	r25, 0x01	; 1
    191a:	86 2f       	mov	r24, r22
    191c:	88 1f       	adc	r24, r24
    191e:	88 27       	eor	r24, r24
    1920:	88 1f       	adc	r24, r24
    1922:	98 27       	eor	r25, r24
    1924:	86 2f       	mov	r24, r22
    1926:	82 95       	swap	r24
    1928:	86 95       	lsr	r24
    192a:	86 95       	lsr	r24
    192c:	81 70       	andi	r24, 0x01	; 1
    192e:	98 27       	eor	r25, r24
    1930:	86 2f       	mov	r24, r22
    1932:	82 95       	swap	r24
    1934:	86 95       	lsr	r24
    1936:	81 70       	andi	r24, 0x01	; 1
    1938:	98 27       	eor	r25, r24
    193a:	86 2f       	mov	r24, r22
    193c:	82 95       	swap	r24
    193e:	81 70       	andi	r24, 0x01	; 1
    1940:	98 27       	eor	r25, r24
    1942:	86 2f       	mov	r24, r22
    1944:	86 95       	lsr	r24
    1946:	86 95       	lsr	r24
    1948:	86 95       	lsr	r24
    194a:	81 70       	andi	r24, 0x01	; 1
    194c:	98 27       	eor	r25, r24
    194e:	86 2f       	mov	r24, r22
    1950:	86 95       	lsr	r24
    1952:	86 95       	lsr	r24
    1954:	81 70       	andi	r24, 0x01	; 1
    1956:	98 27       	eor	r25, r24
    1958:	86 2f       	mov	r24, r22
    195a:	86 95       	lsr	r24
    195c:	81 70       	andi	r24, 0x01	; 1
    195e:	98 27       	eor	r25, r24
						^ (READ_BIT(Data, 5)) ^ (READ_BIT(Data, 4))
						^ (READ_BIT(Data, 3)) ^ (READ_BIT(Data, 2))
						^ (READ_BIT(Data, 1)) ^ (READ_BIT(Data, 0));
					while (USART_BUFFER_NEMPTY());
    1960:	5d 9b       	sbis	0x0b, 5	; 11
    1962:	fe cf       	rjmp	.-4      	; 0x1960 <Mcal_Usart_send+0x6a>
					WRITE_BIT(UCSRB,TXB8,Parity_bit);
    1964:	91 30       	cpi	r25, 0x01	; 1
    1966:	09 f4       	brne	.+2      	; 0x196a <Mcal_Usart_send+0x74>
    1968:	43 c0       	rjmp	.+134    	; 0x19f0 <Mcal_Usart_send+0xfa>
    196a:	99 23       	and	r25, r25
    196c:	09 f0       	breq	.+2      	; 0x1970 <Mcal_Usart_send+0x7a>
    196e:	43 c0       	rjmp	.+134    	; 0x19f6 <Mcal_Usart_send+0x100>
    1970:	41 c0       	rjmp	.+130    	; 0x19f4 <Mcal_Usart_send+0xfe>
				case USART_PARITY_ODD:
						Parity_bit = !((READ_BIT(Data, 7)) ^ (READ_BIT(Data, 6))
						^ (READ_BIT(Data, 5)) ^ (READ_BIT(Data, 4))
						^ (READ_BIT(Data, 3)) ^ (READ_BIT(Data, 2))
						^ (READ_BIT(Data, 1)) ^ (READ_BIT(Data, 0)));
						while (USART_BUFFER_NEMPTY());
    1972:	5d 9b       	sbis	0x0b, 5	; 11
    1974:	fe cf       	rjmp	.-4      	; 0x1972 <Mcal_Usart_send+0x7c>
						WRITE_BIT(UCSRB,TXB8,Parity_bit);
    1976:	86 2f       	mov	r24, r22
    1978:	82 95       	swap	r24
    197a:	86 95       	lsr	r24
    197c:	86 95       	lsr	r24
    197e:	83 70       	andi	r24, 0x03	; 3
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	26 2f       	mov	r18, r22
    1984:	22 95       	swap	r18
    1986:	26 95       	lsr	r18
    1988:	27 70       	andi	r18, 0x07	; 7
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	28 27       	eor	r18, r24
    198e:	39 27       	eor	r19, r25
    1990:	21 70       	andi	r18, 0x01	; 1
    1992:	30 70       	andi	r19, 0x00	; 0
    1994:	86 2f       	mov	r24, r22
    1996:	88 1f       	adc	r24, r24
    1998:	88 27       	eor	r24, r24
    199a:	88 1f       	adc	r24, r24
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	28 27       	eor	r18, r24
    19a0:	39 27       	eor	r19, r25
    19a2:	86 2f       	mov	r24, r22
    19a4:	82 95       	swap	r24
    19a6:	8f 70       	andi	r24, 0x0F	; 15
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	81 70       	andi	r24, 0x01	; 1
    19ac:	90 70       	andi	r25, 0x00	; 0
    19ae:	28 27       	eor	r18, r24
    19b0:	39 27       	eor	r19, r25
    19b2:	86 2f       	mov	r24, r22
    19b4:	86 95       	lsr	r24
    19b6:	86 95       	lsr	r24
    19b8:	86 95       	lsr	r24
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	81 70       	andi	r24, 0x01	; 1
    19be:	90 70       	andi	r25, 0x00	; 0
    19c0:	28 27       	eor	r18, r24
    19c2:	39 27       	eor	r19, r25
    19c4:	86 2f       	mov	r24, r22
    19c6:	86 95       	lsr	r24
    19c8:	86 95       	lsr	r24
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	81 70       	andi	r24, 0x01	; 1
    19ce:	90 70       	andi	r25, 0x00	; 0
    19d0:	28 27       	eor	r18, r24
    19d2:	39 27       	eor	r19, r25
    19d4:	86 2f       	mov	r24, r22
    19d6:	86 95       	lsr	r24
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	81 70       	andi	r24, 0x01	; 1
    19dc:	90 70       	andi	r25, 0x00	; 0
    19de:	28 27       	eor	r18, r24
    19e0:	39 27       	eor	r19, r25
    19e2:	86 2f       	mov	r24, r22
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	81 70       	andi	r24, 0x01	; 1
    19e8:	90 70       	andi	r25, 0x00	; 0
    19ea:	28 17       	cp	r18, r24
    19ec:	39 07       	cpc	r19, r25
    19ee:	11 f4       	brne	.+4      	; 0x19f4 <Mcal_Usart_send+0xfe>
    19f0:	50 9a       	sbi	0x0a, 0	; 10
    19f2:	01 c0       	rjmp	.+2      	; 0x19f6 <Mcal_Usart_send+0x100>
    19f4:	50 98       	cbi	0x0a, 0	; 10
						UDR = Data;
    19f6:	6c b9       	out	0x0c, r22	; 12
				default:
					break;
				}
			}
			default:
				while (USART_BUFFER_NEMPTY());
    19f8:	5d 9b       	sbis	0x0b, 5	; 11
    19fa:	fe cf       	rjmp	.-4      	; 0x19f8 <Mcal_Usart_send+0x102>
						UDR = Data ;
    19fc:	6c b9       	out	0x0c, r22	; 12
    19fe:	81 e0       	ldi	r24, 0x01	; 1
				break;
		}
	}
	return Err_state;
}
    1a00:	08 95       	ret

00001a02 <Mcal_Usart_send_string>:

uint8 Mcal_Usart_send_string(USART_Config_t *USART,uint8* Data)
{
    1a02:	ef 92       	push	r14
    1a04:	ff 92       	push	r15
    1a06:	1f 93       	push	r17
    1a08:	cf 93       	push	r28
    1a0a:	df 93       	push	r29
    1a0c:	ec 01       	movw	r28, r24
    1a0e:	7b 01       	movw	r14, r22
	uint8 Err_state = E_OK;
	if (USART == NULL)
    1a10:	00 97       	sbiw	r24, 0x00	; 0
    1a12:	11 f4       	brne	.+4      	; 0x1a18 <Mcal_Usart_send_string+0x16>
    1a14:	80 e0       	ldi	r24, 0x00	; 0
    1a16:	0d c0       	rjmp	.+26     	; 0x1a32 <Mcal_Usart_send_string+0x30>
    1a18:	10 e0       	ldi	r17, 0x00	; 0
    1a1a:	04 c0       	rjmp	.+8      	; 0x1a24 <Mcal_Usart_send_string+0x22>
		Err_state = E_NOK;
	else {
		uint8 i=0;
		while(*(Data+i)!='\0')
		{
			Mcal_Usart_send(USART,*(Data+i));
    1a1c:	ce 01       	movw	r24, r28
    1a1e:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <Mcal_Usart_send>
			i++;
    1a22:	1f 5f       	subi	r17, 0xFF	; 255
	uint8 Err_state = E_OK;
	if (USART == NULL)
		Err_state = E_NOK;
	else {
		uint8 i=0;
		while(*(Data+i)!='\0')
    1a24:	f7 01       	movw	r30, r14
    1a26:	e1 0f       	add	r30, r17
    1a28:	f1 1d       	adc	r31, r1
    1a2a:	60 81       	ld	r22, Z
    1a2c:	66 23       	and	r22, r22
    1a2e:	b1 f7       	brne	.-20     	; 0x1a1c <Mcal_Usart_send_string+0x1a>
    1a30:	81 e0       	ldi	r24, 0x01	; 1
			Mcal_Usart_send(USART,*(Data+i));
			i++;
		}
	}
	return Err_state;
}
    1a32:	df 91       	pop	r29
    1a34:	cf 91       	pop	r28
    1a36:	1f 91       	pop	r17
    1a38:	ff 90       	pop	r15
    1a3a:	ef 90       	pop	r14
    1a3c:	08 95       	ret

00001a3e <Mcal_Usart_rx>:

uint8 Mcal_Usart_rx(USART_Config_t *USART,uint8 *Data)
{
    1a3e:	fb 01       	movw	r30, r22
	uint8 Err_state = E_OK;
	if (USART == NULL)
    1a40:	89 2b       	or	r24, r25
    1a42:	11 f4       	brne	.+4      	; 0x1a48 <Mcal_Usart_rx+0xa>
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	08 95       	ret
			Err_state = E_NOK;
	else {
		while (!READ_BIT(UCSRA , RXC));/* Wait till data is received */
    1a48:	5f 9b       	sbis	0x0b, 7	; 11
    1a4a:	fe cf       	rjmp	.-4      	; 0x1a48 <Mcal_Usart_rx+0xa>
		*Data=UDR;			/* Return the byte*/
    1a4c:	8c b1       	in	r24, 0x0c	; 12
    1a4e:	80 83       	st	Z, r24
    1a50:	81 e0       	ldi	r24, 0x01	; 1
	}
	return Err_state;
}
    1a52:	08 95       	ret

00001a54 <Usart_rx_string>:

uint8 Usart_rx_string(USART_Config_t *USART,uint8 *Data)
{
	uint8 Err_state = E_OK;
	if (USART == NULL)
    1a54:	89 2b       	or	r24, r25
    1a56:	11 f4       	brne	.+4      	; 0x1a5c <Usart_rx_string+0x8>
    1a58:	80 e0       	ldi	r24, 0x00	; 0
    1a5a:	08 95       	ret
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	05 c0       	rjmp	.+10     	; 0x1a6a <Usart_rx_string+0x16>
{
	uint8 Err_state = E_OK;
	if (USART == NULL)
			Err_state = E_NOK;
	else {
		while (!READ_BIT(UCSRA , RXC));/* Wait till data is received */
    1a60:	5f 9b       	sbis	0x0b, 7	; 11
    1a62:	fe cf       	rjmp	.-4      	; 0x1a60 <Usart_rx_string+0xc>
		*Data=UDR;			/* Return the byte*/
    1a64:	8c b1       	in	r24, 0x0c	; 12
    1a66:	80 83       	st	Z, r24
		Err_state = E_NOK;
	else {
			uint8 i = 0;
			while (*(Data + i) != '\0') {
				Mcal_Usart_rx(USART,Data+i);
				i++;
    1a68:	9f 5f       	subi	r25, 0xFF	; 255
	uint8 Err_state = E_OK;
	if (USART == NULL)
		Err_state = E_NOK;
	else {
			uint8 i = 0;
			while (*(Data + i) != '\0') {
    1a6a:	fb 01       	movw	r30, r22
    1a6c:	e9 0f       	add	r30, r25
    1a6e:	f1 1d       	adc	r31, r1
    1a70:	80 81       	ld	r24, Z
    1a72:	88 23       	and	r24, r24
    1a74:	a9 f7       	brne	.-22     	; 0x1a60 <Usart_rx_string+0xc>
    1a76:	81 e0       	ldi	r24, 0x01	; 1
				Mcal_Usart_rx(USART,Data+i);
				i++;
			}
	}
	return Err_state;
}
    1a78:	08 95       	ret

00001a7a <TIMER_ISR_Internal_2>:
uint8 OLD_humid_low;
uint8 OLD_humid_high;

void TIMER_ISR_Internal_2()
{
	Int_global_cntr++;
    1a7a:	80 91 b7 01 	lds	r24, 0x01B7
    1a7e:	90 91 b8 01 	lds	r25, 0x01B8
    1a82:	a0 91 b9 01 	lds	r26, 0x01B9
    1a86:	b0 91 ba 01 	lds	r27, 0x01BA
    1a8a:	01 96       	adiw	r24, 0x01	; 1
    1a8c:	a1 1d       	adc	r26, r1
    1a8e:	b1 1d       	adc	r27, r1
    1a90:	80 93 b7 01 	sts	0x01B7, r24
    1a94:	90 93 b8 01 	sts	0x01B8, r25
    1a98:	a0 93 b9 01 	sts	0x01B9, r26
    1a9c:	b0 93 ba 01 	sts	0x01BA, r27
}
    1aa0:	08 95       	ret

00001aa2 <Ecual_DHT11_init>:

void  Ecual_DHT11_init(dht11_t  *Dht)
{
	Mcal_GPIO_INIT(&Dht->data);
    1aa2:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <Mcal_GPIO_INIT>
}
    1aa6:	08 95       	ret

00001aa8 <Ecual_DHT11_get_data>:
	}
	return Ret;
}

uint8  Ecual_DHT11_get_data(dht11_t  *Dht,uint8 *Arr)
{
    1aa8:	4f 92       	push	r4
    1aaa:	5f 92       	push	r5
    1aac:	6f 92       	push	r6
    1aae:	7f 92       	push	r7
    1ab0:	8f 92       	push	r8
    1ab2:	9f 92       	push	r9
    1ab4:	af 92       	push	r10
    1ab6:	bf 92       	push	r11
    1ab8:	cf 92       	push	r12
    1aba:	df 92       	push	r13
    1abc:	ef 92       	push	r14
    1abe:	ff 92       	push	r15
    1ac0:	0f 93       	push	r16
    1ac2:	1f 93       	push	r17
    1ac4:	df 93       	push	r29
    1ac6:	cf 93       	push	r28
    1ac8:	cd b7       	in	r28, 0x3d	; 61
    1aca:	de b7       	in	r29, 0x3e	; 62
    1acc:	2b 97       	sbiw	r28, 0x0b	; 11
    1ace:	0f b6       	in	r0, 0x3f	; 63
    1ad0:	f8 94       	cli
    1ad2:	de bf       	out	0x3e, r29	; 62
    1ad4:	0f be       	out	0x3f, r0	; 63
    1ad6:	cd bf       	out	0x3d, r28	; 61
    1ad8:	8c 01       	movw	r16, r24
    1ada:	7b 01       	movw	r14, r22
		uint8 Rx_counter=0;
		uint8 Bit_counter=0;
		uint8 Ret=E_OK;
		Timer0_config Timer_t;
		uint8 Tick_Time=0;
		GPIO_state State = GPIO_LOW;
    1adc:	19 82       	std	Y+1, r1	; 0x01
    1ade:	80 e0       	ldi	r24, 0x00	; 0
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
		for (Rx_counter = 0; Rx_counter <= 4; Rx_counter++)
			Arr[Rx_counter] = 0; //clear the Temperature/Humidity Buffer
    1ae2:	f7 01       	movw	r30, r14
    1ae4:	e8 0f       	add	r30, r24
    1ae6:	f9 1f       	adc	r31, r25
    1ae8:	10 82       	st	Z, r1
    1aea:	01 96       	adiw	r24, 0x01	; 1
		uint8 Bit_counter=0;
		uint8 Ret=E_OK;
		Timer0_config Timer_t;
		uint8 Tick_Time=0;
		GPIO_state State = GPIO_LOW;
		for (Rx_counter = 0; Rx_counter <= 4; Rx_counter++)
    1aec:	85 30       	cpi	r24, 0x05	; 5
    1aee:	91 05       	cpc	r25, r1
    1af0:	c1 f7       	brne	.-16     	; 0x1ae2 <Ecual_DHT11_get_data+0x3a>
			Arr[Rx_counter] = 0; //clear the Temperature/Humidity Buffer
		/**************Timer Mode********/
		TIMER0_RESET();
    1af2:	13 be       	out	0x33, r1	; 51
    1af4:	12 be       	out	0x32, r1	; 50
		Timer_t.WFGM_mode = WFGM_T0_NORMAL;
    1af6:	1b 82       	std	Y+3, r1	; 0x03
		Timer_t.T0_TCNT0_init_val = 0;
    1af8:	19 86       	std	Y+9, r1	; 0x09
		Timer_t.Prescaler_Counter_setting=TIMER0_PRESCALER_8; //if 16 Mhz then input Clock= 2Mhz hence Ttick=0.5us hence Timer max=127.5us
    1afa:	82 e0       	ldi	r24, 0x02	; 2
    1afc:	8f 83       	std	Y+7, r24	; 0x07
		Timer_t.TIMER0_ovf_callback = NULL;
    1afe:	1b 86       	std	Y+11, r1	; 0x0b
    1b00:	1a 86       	std	Y+10, r1	; 0x0a
		Mcal_Timer0_init(&Timer_t);//Timer Set
    1b02:	ce 01       	movw	r24, r28
    1b04:	03 96       	adiw	r24, 0x03	; 3
    1b06:	0e 94 84 0b 	call	0x1708	; 0x1708 <Mcal_Timer0_init>

static uint8  DHT11_Resp(dht11_t *Dht)
{
	uint8 Ret=E_OK;
	uint8 Tick_Time=0;
	GPIO_state State = GPIO_LOW;
    1b0a:	1a 82       	std	Y+2, r1	; 0x02
	Dht->data.Config = GPIO_OUTPUT;
    1b0c:	f8 01       	movw	r30, r16
    1b0e:	80 81       	ld	r24, Z
    1b10:	8f 79       	andi	r24, 0x9F	; 159
    1b12:	80 64       	ori	r24, 0x40	; 64
    1b14:	80 83       	st	Z, r24
	Int_global_cntr++;
}

void  Ecual_DHT11_init(dht11_t  *Dht)
{
	Mcal_GPIO_INIT(&Dht->data);
    1b16:	58 01       	movw	r10, r16
    1b18:	c8 01       	movw	r24, r16
    1b1a:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <Mcal_GPIO_INIT>
	uint8 Ret=E_OK;
	uint8 Tick_Time=0;
	GPIO_state State = GPIO_LOW;
	Dht->data.Config = GPIO_OUTPUT;
	Ecual_DHT11_init(Dht);
	Mcal_GPIO_WRITE(&Dht->data, GPIO_LOW);
    1b1e:	c8 01       	movw	r24, r16
    1b20:	60 e0       	ldi	r22, 0x00	; 0
    1b22:	0e 94 7f 09 	call	0x12fe	; 0x12fe <Mcal_GPIO_WRITE>
    1b26:	88 ec       	ldi	r24, 0xC8	; 200
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b2a:	20 e9       	ldi	r18, 0x90	; 144
    1b2c:	31 e0       	ldi	r19, 0x01	; 1
    1b2e:	f9 01       	movw	r30, r18
    1b30:	31 97       	sbiw	r30, 0x01	; 1
    1b32:	f1 f7       	brne	.-4      	; 0x1b30 <Ecual_DHT11_get_data+0x88>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b34:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b36:	d9 f7       	brne	.-10     	; 0x1b2e <Ecual_DHT11_get_data+0x86>
	_delay_ms(20);
	Mcal_GPIO_WRITE(&Dht->data, GPIO_HIGH);
    1b38:	c5 01       	movw	r24, r10
    1b3a:	61 e0       	ldi	r22, 0x01	; 1
    1b3c:	0e 94 7f 09 	call	0x12fe	; 0x12fe <Mcal_GPIO_WRITE>
	Dht->data.Config = GPIO_INPUT;
    1b40:	f8 01       	movw	r30, r16
    1b42:	80 81       	ld	r24, Z
    1b44:	8f 79       	andi	r24, 0x9F	; 159
    1b46:	80 83       	st	Z, r24
	Mcal_GPIO_INIT(&Dht->data);
    1b48:	c5 01       	movw	r24, r10
    1b4a:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <Mcal_GPIO_INIT>
	Mcal_GPIO_READ(&Dht->data, &State);
    1b4e:	8e 01       	movw	r16, r28
    1b50:	0e 5f       	subi	r16, 0xFE	; 254
    1b52:	1f 4f       	sbci	r17, 0xFF	; 255
    1b54:	c5 01       	movw	r24, r10
    1b56:	b8 01       	movw	r22, r16
    1b58:	0e 94 b2 09 	call	0x1364	; 0x1364 <Mcal_GPIO_READ>
	TIMER0_Write(0);
    1b5c:	12 be       	out	0x32, r1	; 50
	while (State == GPIO_HIGH) {
		Tick_Time = TCNT0;
		Mcal_GPIO_READ(&Dht->data, &State);
    1b5e:	d0 2e       	mov	r13, r16
    1b60:	01 2f       	mov	r16, r17
    1b62:	09 c0       	rjmp	.+18     	; 0x1b76 <Ecual_DHT11_get_data+0xce>
	Dht->data.Config = GPIO_INPUT;
	Mcal_GPIO_INIT(&Dht->data);
	Mcal_GPIO_READ(&Dht->data, &State);
	TIMER0_Write(0);
	while (State == GPIO_HIGH) {
		Tick_Time = TCNT0;
    1b64:	12 b7       	in	r17, 0x32	; 50
		Mcal_GPIO_READ(&Dht->data, &State);
    1b66:	c5 01       	movw	r24, r10
    1b68:	6d 2d       	mov	r22, r13
    1b6a:	70 2f       	mov	r23, r16
    1b6c:	0e 94 b2 09 	call	0x1364	; 0x1364 <Mcal_GPIO_READ>
		if (Tick_Time > 240) {
    1b70:	11 3f       	cpi	r17, 0xF1	; 241
    1b72:	08 f0       	brcs	.+2      	; 0x1b76 <Ecual_DHT11_get_data+0xce>
    1b74:	98 c0       	rjmp	.+304    	; 0x1ca6 <Ecual_DHT11_get_data+0x1fe>
	Mcal_GPIO_WRITE(&Dht->data, GPIO_HIGH);
	Dht->data.Config = GPIO_INPUT;
	Mcal_GPIO_INIT(&Dht->data);
	Mcal_GPIO_READ(&Dht->data, &State);
	TIMER0_Write(0);
	while (State == GPIO_HIGH) {
    1b76:	8a 81       	ldd	r24, Y+2	; 0x02
    1b78:	81 30       	cpi	r24, 0x01	; 1
    1b7a:	a1 f3       	breq	.-24     	; 0x1b64 <Ecual_DHT11_get_data+0xbc>
    1b7c:	ba c0       	rjmp	.+372    	; 0x1cf2 <Ecual_DHT11_get_data+0x24a>
	}
	if(Ret==E_OK)
	{
		TIMER0_Write(0);
		while (State == GPIO_LOW) {
			Tick_Time = TCNT0;
    1b7e:	12 b7       	in	r17, 0x32	; 50
			Mcal_GPIO_READ(&Dht->data, &State);
    1b80:	c5 01       	movw	r24, r10
    1b82:	b6 01       	movw	r22, r12
    1b84:	0e 94 b2 09 	call	0x1364	; 0x1364 <Mcal_GPIO_READ>
			if (Tick_Time > 240) {
    1b88:	11 3f       	cpi	r17, 0xF1	; 241
    1b8a:	08 f0       	brcs	.+2      	; 0x1b8e <Ecual_DHT11_get_data+0xe6>
    1b8c:	8c c0       	rjmp	.+280    	; 0x1ca6 <Ecual_DHT11_get_data+0x1fe>
		}
	}
	if(Ret==E_OK)
	{
		TIMER0_Write(0);
		while (State == GPIO_LOW) {
    1b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b90:	88 23       	and	r24, r24
    1b92:	a9 f3       	breq	.-22     	; 0x1b7e <Ecual_DHT11_get_data+0xd6>
    1b94:	b5 c0       	rjmp	.+362    	; 0x1d00 <Ecual_DHT11_get_data+0x258>
		}
		if(Ret==E_OK)
		{
			TIMER0_Write(0);
			while (State == GPIO_HIGH) {
				Tick_Time = TCNT0;
    1b96:	12 b7       	in	r17, 0x32	; 50
				Mcal_GPIO_READ(&Dht->data, &State);
    1b98:	c5 01       	movw	r24, r10
    1b9a:	b6 01       	movw	r22, r12
    1b9c:	0e 94 b2 09 	call	0x1364	; 0x1364 <Mcal_GPIO_READ>
				if (Tick_Time > 240) {
    1ba0:	11 3f       	cpi	r17, 0xF1	; 241
    1ba2:	08 f0       	brcs	.+2      	; 0x1ba6 <Ecual_DHT11_get_data+0xfe>
    1ba4:	80 c0       	rjmp	.+256    	; 0x1ca6 <Ecual_DHT11_get_data+0x1fe>
			}
		}
		if(Ret==E_OK)
		{
			TIMER0_Write(0);
			while (State == GPIO_HIGH) {
    1ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba8:	81 30       	cpi	r24, 0x01	; 1
    1baa:	a9 f3       	breq	.-22     	; 0x1b96 <Ecual_DHT11_get_data+0xee>
    1bac:	67 01       	movw	r12, r14
    1bae:	99 24       	eor	r9, r9
    1bb0:	88 24       	eor	r8, r8
			for(Rx_counter=0;Rx_counter<=4;Rx_counter++)
			{
				for(Bit_counter=0;Bit_counter<=7;Bit_counter++)
				{
						TIMER0_Write(0);
						Mcal_GPIO_READ(&Dht->data, &State);
    1bb2:	3e 01       	movw	r6, r28
    1bb4:	08 94       	sec
    1bb6:	61 1c       	adc	r6, r1
    1bb8:	71 1c       	adc	r7, r1
						if (Ret == E_NOK)
							break;
						if(Tick_Time>40&&Tick_Time<90)
							CLEAR_BIT(*(Arr+Rx_counter),(7-Bit_counter));
						else if(Tick_Time<180&&Tick_Time>120)
							SET_BIT(*(Arr+Rx_counter),(7-Bit_counter));
    1bba:	21 e0       	ldi	r18, 0x01	; 1
    1bbc:	42 2e       	mov	r4, r18
    1bbe:	51 2c       	mov	r5, r1
    1bc0:	4f c0       	rjmp	.+158    	; 0x1c60 <Ecual_DHT11_get_data+0x1b8>
		{
			for(Rx_counter=0;Rx_counter<=4;Rx_counter++)
			{
				for(Bit_counter=0;Bit_counter<=7;Bit_counter++)
				{
						TIMER0_Write(0);
    1bc2:	12 be       	out	0x32, r1	; 50
						Mcal_GPIO_READ(&Dht->data, &State);
    1bc4:	c5 01       	movw	r24, r10
    1bc6:	b3 01       	movw	r22, r6
    1bc8:	0e 94 b2 09 	call	0x1364	; 0x1364 <Mcal_GPIO_READ>
    1bcc:	09 c0       	rjmp	.+18     	; 0x1be0 <Ecual_DHT11_get_data+0x138>
						while (State == GPIO_LOW) {
							Tick_Time=TCNT0;
    1bce:	92 b6       	in	r9, 0x32	; 50
							Mcal_GPIO_READ(&Dht->data, &State);
    1bd0:	c5 01       	movw	r24, r10
    1bd2:	b3 01       	movw	r22, r6
    1bd4:	0e 94 b2 09 	call	0x1364	; 0x1364 <Mcal_GPIO_READ>
							if (Tick_Time > 240) {
    1bd8:	f0 ef       	ldi	r31, 0xF0	; 240
    1bda:	f9 15       	cp	r31, r9
    1bdc:	08 f4       	brcc	.+2      	; 0x1be0 <Ecual_DHT11_get_data+0x138>
    1bde:	70 c0       	rjmp	.+224    	; 0x1cc0 <Ecual_DHT11_get_data+0x218>
			{
				for(Bit_counter=0;Bit_counter<=7;Bit_counter++)
				{
						TIMER0_Write(0);
						Mcal_GPIO_READ(&Dht->data, &State);
						while (State == GPIO_LOW) {
    1be0:	89 81       	ldd	r24, Y+1	; 0x01
    1be2:	88 23       	and	r24, r24
    1be4:	a1 f3       	breq	.-24     	; 0x1bce <Ecual_DHT11_get_data+0x126>
								break;
							}
							}
						if (Ret == E_NOK)
							break;
						TIMER0_Write(0);
    1be6:	12 be       	out	0x32, r1	; 50
						Mcal_GPIO_READ(&Dht->data, &State);
    1be8:	c5 01       	movw	r24, r10
    1bea:	b3 01       	movw	r22, r6
    1bec:	0e 94 b2 09 	call	0x1364	; 0x1364 <Mcal_GPIO_READ>
    1bf0:	06 c0       	rjmp	.+12     	; 0x1bfe <Ecual_DHT11_get_data+0x156>
						while (State == GPIO_HIGH) {
							Tick_Time=TCNT0;
    1bf2:	92 b6       	in	r9, 0x32	; 50
							Mcal_GPIO_READ(&Dht->data, &State);
    1bf4:	c5 01       	movw	r24, r10
    1bf6:	b3 01       	movw	r22, r6
    1bf8:	0e 94 b2 09 	call	0x1364	; 0x1364 <Mcal_GPIO_READ>
							if (TCNT0 > 270) {
    1bfc:	82 b7       	in	r24, 0x32	; 50
							}
						if (Ret == E_NOK)
							break;
						TIMER0_Write(0);
						Mcal_GPIO_READ(&Dht->data, &State);
						while (State == GPIO_HIGH) {
    1bfe:	89 81       	ldd	r24, Y+1	; 0x01
    1c00:	81 30       	cpi	r24, 0x01	; 1
    1c02:	b9 f3       	breq	.-18     	; 0x1bf2 <Ecual_DHT11_get_data+0x14a>
								break;
							}
						}
						if (Ret == E_NOK)
							break;
						if(Tick_Time>40&&Tick_Time<90)
    1c04:	89 2d       	mov	r24, r9
    1c06:	89 52       	subi	r24, 0x29	; 41
    1c08:	81 33       	cpi	r24, 0x31	; 49
    1c0a:	68 f4       	brcc	.+26     	; 0x1c26 <Ecual_DHT11_get_data+0x17e>
							CLEAR_BIT(*(Arr+Rx_counter),(7-Bit_counter));
    1c0c:	c2 01       	movw	r24, r4
    1c0e:	00 2e       	mov	r0, r16
    1c10:	02 c0       	rjmp	.+4      	; 0x1c16 <Ecual_DHT11_get_data+0x16e>
    1c12:	88 0f       	add	r24, r24
    1c14:	99 1f       	adc	r25, r25
    1c16:	0a 94       	dec	r0
    1c18:	e2 f7       	brpl	.-8      	; 0x1c12 <Ecual_DHT11_get_data+0x16a>
    1c1a:	80 95       	com	r24
    1c1c:	f6 01       	movw	r30, r12
    1c1e:	20 81       	ld	r18, Z
    1c20:	28 23       	and	r18, r24
    1c22:	20 83       	st	Z, r18
    1c24:	0f c0       	rjmp	.+30     	; 0x1c44 <Ecual_DHT11_get_data+0x19c>
						else if(Tick_Time<180&&Tick_Time>120)
    1c26:	89 2d       	mov	r24, r9
    1c28:	89 57       	subi	r24, 0x79	; 121
    1c2a:	8b 33       	cpi	r24, 0x3B	; 59
    1c2c:	58 f4       	brcc	.+22     	; 0x1c44 <Ecual_DHT11_get_data+0x19c>
							SET_BIT(*(Arr+Rx_counter),(7-Bit_counter));
    1c2e:	92 01       	movw	r18, r4
    1c30:	00 2e       	mov	r0, r16
    1c32:	02 c0       	rjmp	.+4      	; 0x1c38 <Ecual_DHT11_get_data+0x190>
    1c34:	22 0f       	add	r18, r18
    1c36:	33 1f       	adc	r19, r19
    1c38:	0a 94       	dec	r0
    1c3a:	e2 f7       	brpl	.-8      	; 0x1c34 <Ecual_DHT11_get_data+0x18c>
    1c3c:	f6 01       	movw	r30, r12
    1c3e:	80 81       	ld	r24, Z
    1c40:	82 2b       	or	r24, r18
    1c42:	80 83       	st	Z, r24
    1c44:	01 50       	subi	r16, 0x01	; 1
    1c46:	10 40       	sbci	r17, 0x00	; 0
		Ret=DHT11_Resp(Dht);
		if(Ret==E_OK)
		{
			for(Rx_counter=0;Rx_counter<=4;Rx_counter++)
			{
				for(Bit_counter=0;Bit_counter<=7;Bit_counter++)
    1c48:	ff ef       	ldi	r31, 0xFF	; 255
    1c4a:	0f 3f       	cpi	r16, 0xFF	; 255
    1c4c:	1f 07       	cpc	r17, r31
    1c4e:	09 f0       	breq	.+2      	; 0x1c52 <Ecual_DHT11_get_data+0x1aa>
    1c50:	b8 cf       	rjmp	.-144    	; 0x1bc2 <Ecual_DHT11_get_data+0x11a>
		Mcal_Timer0_init(&Timer_t);//Timer Set
		/********************DHT11 READ*******/
		Ret=DHT11_Resp(Dht);
		if(Ret==E_OK)
		{
			for(Rx_counter=0;Rx_counter<=4;Rx_counter++)
    1c52:	83 94       	inc	r8
    1c54:	08 94       	sec
    1c56:	c1 1c       	adc	r12, r1
    1c58:	d1 1c       	adc	r13, r1
    1c5a:	85 e0       	ldi	r24, 0x05	; 5
    1c5c:	88 16       	cp	r8, r24
    1c5e:	19 f0       	breq	.+6      	; 0x1c66 <Ecual_DHT11_get_data+0x1be>
    1c60:	07 e0       	ldi	r16, 0x07	; 7
    1c62:	10 e0       	ldi	r17, 0x00	; 0
    1c64:	ae cf       	rjmp	.-164    	; 0x1bc2 <Ecual_DHT11_get_data+0x11a>
				if(Ret==E_NOK)
					break;
			}
			if(Ret==E_OK)
			{
				OLD_temp_low=*(Arr + 3);
    1c66:	f7 01       	movw	r30, r14
    1c68:	83 81       	ldd	r24, Z+3	; 0x03
    1c6a:	80 93 bd 01 	sts	0x01BD, r24
				OLD_temp_high=*(Arr + 2);
    1c6e:	82 81       	ldd	r24, Z+2	; 0x02
    1c70:	80 93 bc 01 	sts	0x01BC, r24
				OLD_humid_low=*(Arr + 1);
    1c74:	81 81       	ldd	r24, Z+1	; 0x01
    1c76:	80 93 be 01 	sts	0x01BE, r24
				OLD_humid_high=*(Arr + 0);
    1c7a:	80 81       	ld	r24, Z
    1c7c:	80 93 bb 01 	sts	0x01BB, r24
    1c80:	40 e0       	ldi	r20, 0x00	; 0
    1c82:	83 81       	ldd	r24, Z+3	; 0x03
    1c84:	22 81       	ldd	r18, Z+2	; 0x02
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	28 0f       	add	r18, r24
    1c8a:	31 1d       	adc	r19, r1
    1c8c:	80 81       	ld	r24, Z
    1c8e:	28 0f       	add	r18, r24
    1c90:	31 1d       	adc	r19, r1
    1c92:	81 81       	ldd	r24, Z+1	; 0x01
    1c94:	28 0f       	add	r18, r24
    1c96:	31 1d       	adc	r19, r1
    1c98:	84 81       	ldd	r24, Z+4	; 0x04
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	28 17       	cp	r18, r24
    1c9e:	39 07       	cpc	r19, r25
    1ca0:	81 f4       	brne	.+32     	; 0x1cc2 <Ecual_DHT11_get_data+0x21a>
    1ca2:	41 e0       	ldi	r20, 0x01	; 1
    1ca4:	0e c0       	rjmp	.+28     	; 0x1cc2 <Ecual_DHT11_get_data+0x21a>
				else
					Ret = E_OK;
			}
		}
		else{
			 *(Arr + 3)=OLD_temp_low;
    1ca6:	80 91 bd 01 	lds	r24, 0x01BD
    1caa:	f7 01       	movw	r30, r14
    1cac:	83 83       	std	Z+3, r24	; 0x03
			 *(Arr + 2)=OLD_temp_high;
    1cae:	80 91 bc 01 	lds	r24, 0x01BC
    1cb2:	82 83       	std	Z+2, r24	; 0x02
			 *(Arr + 1)=OLD_humid_low;
    1cb4:	80 91 be 01 	lds	r24, 0x01BE
    1cb8:	81 83       	std	Z+1, r24	; 0x01
			 *(Arr + 0)=OLD_humid_high;
    1cba:	80 91 bb 01 	lds	r24, 0x01BB
    1cbe:	80 83       	st	Z, r24
    1cc0:	40 e0       	ldi	r20, 0x00	; 0
		}
		return Ret;
}
    1cc2:	84 2f       	mov	r24, r20
    1cc4:	2b 96       	adiw	r28, 0x0b	; 11
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	f8 94       	cli
    1cca:	de bf       	out	0x3e, r29	; 62
    1ccc:	0f be       	out	0x3f, r0	; 63
    1cce:	cd bf       	out	0x3d, r28	; 61
    1cd0:	cf 91       	pop	r28
    1cd2:	df 91       	pop	r29
    1cd4:	1f 91       	pop	r17
    1cd6:	0f 91       	pop	r16
    1cd8:	ff 90       	pop	r15
    1cda:	ef 90       	pop	r14
    1cdc:	df 90       	pop	r13
    1cde:	cf 90       	pop	r12
    1ce0:	bf 90       	pop	r11
    1ce2:	af 90       	pop	r10
    1ce4:	9f 90       	pop	r9
    1ce6:	8f 90       	pop	r8
    1ce8:	7f 90       	pop	r7
    1cea:	6f 90       	pop	r6
    1cec:	5f 90       	pop	r5
    1cee:	4f 90       	pop	r4
    1cf0:	08 95       	ret
			break;
		}
	}
	if(Ret==E_OK)
	{
		TIMER0_Write(0);
    1cf2:	12 be       	out	0x32, r1	; 50
		while (State == GPIO_LOW) {
			Tick_Time = TCNT0;
			Mcal_GPIO_READ(&Dht->data, &State);
    1cf4:	92 e0       	ldi	r25, 0x02	; 2
    1cf6:	c9 2e       	mov	r12, r25
    1cf8:	d1 2c       	mov	r13, r1
    1cfa:	cc 0e       	add	r12, r28
    1cfc:	dd 1e       	adc	r13, r29
    1cfe:	47 cf       	rjmp	.-370    	; 0x1b8e <Ecual_DHT11_get_data+0xe6>
				break;
			}
		}
		if(Ret==E_OK)
		{
			TIMER0_Write(0);
    1d00:	12 be       	out	0x32, r1	; 50
			while (State == GPIO_HIGH) {
				Tick_Time = TCNT0;
				Mcal_GPIO_READ(&Dht->data, &State);
    1d02:	82 e0       	ldi	r24, 0x02	; 2
    1d04:	c8 2e       	mov	r12, r24
    1d06:	d1 2c       	mov	r13, r1
    1d08:	cc 0e       	add	r12, r28
    1d0a:	dd 1e       	adc	r13, r29
    1d0c:	4c cf       	rjmp	.-360    	; 0x1ba6 <Ecual_DHT11_get_data+0xfe>

00001d0e <TIMER_ISR_internal>:

volatile uint32 OV_count;

void TIMER_ISR_internal()
{
	OV_count++;
    1d0e:	80 91 bf 01 	lds	r24, 0x01BF
    1d12:	90 91 c0 01 	lds	r25, 0x01C0
    1d16:	a0 91 c1 01 	lds	r26, 0x01C1
    1d1a:	b0 91 c2 01 	lds	r27, 0x01C2
    1d1e:	01 96       	adiw	r24, 0x01	; 1
    1d20:	a1 1d       	adc	r26, r1
    1d22:	b1 1d       	adc	r27, r1
    1d24:	80 93 bf 01 	sts	0x01BF, r24
    1d28:	90 93 c0 01 	sts	0x01C0, r25
    1d2c:	a0 93 c1 01 	sts	0x01C1, r26
    1d30:	b0 93 c2 01 	sts	0x01C2, r27
}
    1d34:	08 95       	ret

00001d36 <Ecual_Ultrasonic_Read>:
	_delay_us(15);
	Mcal_GPIO_WRITE(&Ut->Trigger, GPIO_LOW);
}

uint8 Ecual_Ultrasonic_Read(Ultrasonic_t *Ut,uint16 *Result)
{
    1d36:	2f 92       	push	r2
    1d38:	3f 92       	push	r3
    1d3a:	5f 92       	push	r5
    1d3c:	6f 92       	push	r6
    1d3e:	7f 92       	push	r7
    1d40:	8f 92       	push	r8
    1d42:	9f 92       	push	r9
    1d44:	af 92       	push	r10
    1d46:	bf 92       	push	r11
    1d48:	cf 92       	push	r12
    1d4a:	df 92       	push	r13
    1d4c:	ef 92       	push	r14
    1d4e:	ff 92       	push	r15
    1d50:	0f 93       	push	r16
    1d52:	1f 93       	push	r17
    1d54:	df 93       	push	r29
    1d56:	cf 93       	push	r28
    1d58:	cd b7       	in	r28, 0x3d	; 61
    1d5a:	de b7       	in	r29, 0x3e	; 62
    1d5c:	2a 97       	sbiw	r28, 0x0a	; 10
    1d5e:	0f b6       	in	r0, 0x3f	; 63
    1d60:	f8 94       	cli
    1d62:	de bf       	out	0x3e, r29	; 62
    1d64:	0f be       	out	0x3f, r0	; 63
    1d66:	cd bf       	out	0x3d, r28	; 61
    1d68:	7c 01       	movw	r14, r24
    1d6a:	1b 01       	movw	r2, r22
	uint32 Timer_start=0;
	uint32 Timer_end=0;
	uint32 Timer=0;
	uint16 distance=0;
	uint32 OVF_old=0;
	GPIO_state State_read=GPIO_LOW;
    1d6c:	19 82       	std	Y+1, r1	; 0x01
	Timer0_config Timer_t;
	uint8 Timeout=E_OK;
	/**************Timer Mode********/
	TIMER0_RESET();
    1d6e:	13 be       	out	0x33, r1	; 51
    1d70:	12 be       	out	0x32, r1	; 50
	Timer_t.WFGM_mode=WFGM_T0_NORMAL;
    1d72:	1a 82       	std	Y+2, r1	; 0x02
	Timer_t.T0_TCNT0_init_val=0;
    1d74:	18 86       	std	Y+8, r1	; 0x08
	Timer_t.Prescaler_Counter_setting=TIMER0_PRESCALER_8; //if 16 Mhz then input Clock= 2Mhz hence Ttick=0.5us hence Timer max=127.5us
    1d76:	82 e0       	ldi	r24, 0x02	; 2
    1d78:	8e 83       	std	Y+6, r24	; 0x06
	Timer_t.TIMER0_ovf_callback=TIMER_ISR_internal;
    1d7a:	87 e8       	ldi	r24, 0x87	; 135
    1d7c:	9e e0       	ldi	r25, 0x0E	; 14
    1d7e:	9a 87       	std	Y+10, r25	; 0x0a
    1d80:	89 87       	std	Y+9, r24	; 0x09
	Mcal_Timer0_init(&Timer_t);
    1d82:	ce 01       	movw	r24, r28
    1d84:	02 96       	adiw	r24, 0x02	; 2
    1d86:	0e 94 84 0b 	call	0x1708	; 0x1708 <Mcal_Timer0_init>
	Mcal_GPIO_INIT(&Ut->Trigger);
}

static void Ultrasonic_send_pulse(Ultrasonic_t *Ut)
{
	Mcal_GPIO_WRITE(&Ut->Trigger, GPIO_HIGH);
    1d8a:	87 01       	movw	r16, r14
    1d8c:	0f 5f       	subi	r16, 0xFF	; 255
    1d8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d90:	c8 01       	movw	r24, r16
    1d92:	61 e0       	ldi	r22, 0x01	; 1
    1d94:	0e 94 7f 09 	call	0x12fe	; 0x12fe <Mcal_GPIO_WRITE>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d98:	80 e5       	ldi	r24, 0x50	; 80
    1d9a:	8a 95       	dec	r24
    1d9c:	f1 f7       	brne	.-4      	; 0x1d9a <Ecual_Ultrasonic_Read+0x64>
	_delay_us(15);
	Mcal_GPIO_WRITE(&Ut->Trigger, GPIO_LOW);
    1d9e:	c8 01       	movw	r24, r16
    1da0:	60 e0       	ldi	r22, 0x00	; 0
    1da2:	0e 94 7f 09 	call	0x12fe	; 0x12fe <Mcal_GPIO_WRITE>
	Timer_t.TIMER0_ovf_callback=TIMER_ISR_internal;
	Mcal_Timer0_init(&Timer_t);
	/*********Ultrasonic Burst***********/
	Ultrasonic_send_pulse(Ut);
	/**********Read Data************/
	Mcal_GPIO_READ(&Ut->Echo,&State_read);
    1da6:	9e 2c       	mov	r9, r14
    1da8:	8f 2c       	mov	r8, r15
    1daa:	c7 01       	movw	r24, r14
    1dac:	8e 01       	movw	r16, r28
    1dae:	0f 5f       	subi	r16, 0xFF	; 255
    1db0:	1f 4f       	sbci	r17, 0xFF	; 255
    1db2:	b8 01       	movw	r22, r16
    1db4:	0e 94 b2 09 	call	0x1364	; 0x1364 <Mcal_GPIO_READ>
	TIMER0_Write(0);
    1db8:	12 be       	out	0x32, r1	; 50
	OVF_old=OV_count;
    1dba:	c0 90 bf 01 	lds	r12, 0x01BF
    1dbe:	d0 90 c0 01 	lds	r13, 0x01C0
    1dc2:	e0 90 c1 01 	lds	r14, 0x01C1
    1dc6:	f0 90 c2 01 	lds	r15, 0x01C2
	while(State_read == GPIO_LOW)
	{
		Mcal_GPIO_READ(&Ut->Echo,&State_read);
    1dca:	b0 2e       	mov	r11, r16
    1dcc:	01 2f       	mov	r16, r17
    1dce:	22 c0       	rjmp	.+68     	; 0x1e14 <Ecual_Ultrasonic_Read+0xde>
    1dd0:	89 2d       	mov	r24, r9
    1dd2:	98 2d       	mov	r25, r8
    1dd4:	6b 2d       	mov	r22, r11
    1dd6:	70 2f       	mov	r23, r16
    1dd8:	0e 94 b2 09 	call	0x1364	; 0x1364 <Mcal_GPIO_READ>
		Timer = ((TCNT0+ (uint32) (OV_count-OVF_old) * 256 )/2)/2;
    1ddc:	22 b7       	in	r18, 0x32	; 50
    1dde:	80 91 bf 01 	lds	r24, 0x01BF
    1de2:	90 91 c0 01 	lds	r25, 0x01C0
    1de6:	a0 91 c1 01 	lds	r26, 0x01C1
    1dea:	b0 91 c2 01 	lds	r27, 0x01C2
		if(Timer>Ultrasonic_TimeOut)
    1dee:	8c 19       	sub	r24, r12
    1df0:	9d 09       	sbc	r25, r13
    1df2:	ae 09       	sbc	r26, r14
    1df4:	bf 09       	sbc	r27, r15
    1df6:	ba 2f       	mov	r27, r26
    1df8:	a9 2f       	mov	r26, r25
    1dfa:	98 2f       	mov	r25, r24
    1dfc:	88 27       	eor	r24, r24
    1dfe:	82 0f       	add	r24, r18
    1e00:	91 1d       	adc	r25, r1
    1e02:	a1 1d       	adc	r26, r1
    1e04:	b1 1d       	adc	r27, r1
    1e06:	84 58       	subi	r24, 0x84	; 132
    1e08:	98 43       	sbci	r25, 0x38	; 56
    1e0a:	a1 40       	sbci	r26, 0x01	; 1
    1e0c:	b0 40       	sbci	r27, 0x00	; 0
    1e0e:	10 f0       	brcs	.+4      	; 0x1e14 <Ecual_Ultrasonic_Read+0xde>
    1e10:	80 e0       	ldi	r24, 0x00	; 0
    1e12:	5c c0       	rjmp	.+184    	; 0x1ecc <Ecual_Ultrasonic_Read+0x196>
	Ultrasonic_send_pulse(Ut);
	/**********Read Data************/
	Mcal_GPIO_READ(&Ut->Echo,&State_read);
	TIMER0_Write(0);
	OVF_old=OV_count;
	while(State_read == GPIO_LOW)
    1e14:	89 81       	ldd	r24, Y+1	; 0x01
    1e16:	88 23       	and	r24, r24
    1e18:	d9 f2       	breq	.-74     	; 0x1dd0 <Ecual_Ultrasonic_Read+0x9a>
    1e1a:	70 c0       	rjmp	.+224    	; 0x1efc <Ecual_Ultrasonic_Read+0x1c6>
	{
		Timer_start=TCNT0;
		OVF_old=OV_count;
		while (State_read == GPIO_HIGH)
		{
			Mcal_GPIO_READ(&Ut->Echo, &State_read);
    1e1c:	89 2d       	mov	r24, r9
    1e1e:	98 2d       	mov	r25, r8
    1e20:	b3 01       	movw	r22, r6
    1e22:	0e 94 b2 09 	call	0x1364	; 0x1364 <Mcal_GPIO_READ>
			if(OV_count>OVF_MAX+OVF_old)
    1e26:	80 91 bf 01 	lds	r24, 0x01BF
    1e2a:	90 91 c0 01 	lds	r25, 0x01C0
    1e2e:	a0 91 c1 01 	lds	r26, 0x01C1
    1e32:	b0 91 c2 01 	lds	r27, 0x01C2
    1e36:	e8 16       	cp	r14, r24
    1e38:	f9 06       	cpc	r15, r25
    1e3a:	0a 07       	cpc	r16, r26
    1e3c:	1b 07       	cpc	r17, r27
    1e3e:	18 f0       	brcs	.+6      	; 0x1e46 <Ecual_Ultrasonic_Read+0x110>
	}
	if(Timeout==E_OK)
	{
		Timer_start=TCNT0;
		OVF_old=OV_count;
		while (State_read == GPIO_HIGH)
    1e40:	89 81       	ldd	r24, Y+1	; 0x01
    1e42:	81 30       	cpi	r24, 0x01	; 1
    1e44:	59 f3       	breq	.-42     	; 0x1e1c <Ecual_Ultrasonic_Read+0xe6>
		{
			Mcal_GPIO_READ(&Ut->Echo, &State_read);
			if(OV_count>OVF_MAX+OVF_old)
				break;
		}
		Mcal_GPIO_READ(&Ut->Echo, &State_read);
    1e46:	89 2d       	mov	r24, r9
    1e48:	98 2d       	mov	r25, r8
    1e4a:	be 01       	movw	r22, r28
    1e4c:	6f 5f       	subi	r22, 0xFF	; 255
    1e4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e50:	0e 94 b2 09 	call	0x1364	; 0x1364 <Mcal_GPIO_READ>
		Timer_end = TCNT0;
    1e54:	22 b7       	in	r18, 0x32	; 50
		Timer = ((Timer_end -Timer_start+ (uint32) (OV_count-OVF_old) * 256 )/2)/2;
    1e56:	80 91 bf 01 	lds	r24, 0x01BF
    1e5a:	90 91 c0 01 	lds	r25, 0x01C0
    1e5e:	a0 91 c1 01 	lds	r26, 0x01C1
    1e62:	b0 91 c2 01 	lds	r27, 0x01C2
    1e66:	8a 19       	sub	r24, r10
    1e68:	9b 09       	sbc	r25, r11
    1e6a:	ac 09       	sbc	r26, r12
    1e6c:	bd 09       	sbc	r27, r13
    1e6e:	66 27       	eor	r22, r22
    1e70:	78 2f       	mov	r23, r24
    1e72:	89 2f       	mov	r24, r25
    1e74:	9a 2f       	mov	r25, r26
    1e76:	65 19       	sub	r22, r5
    1e78:	71 09       	sbc	r23, r1
    1e7a:	81 09       	sbc	r24, r1
    1e7c:	91 09       	sbc	r25, r1
    1e7e:	62 0f       	add	r22, r18
    1e80:	71 1d       	adc	r23, r1
    1e82:	81 1d       	adc	r24, r1
    1e84:	91 1d       	adc	r25, r1
    1e86:	22 e0       	ldi	r18, 0x02	; 2
    1e88:	96 95       	lsr	r25
    1e8a:	87 95       	ror	r24
    1e8c:	77 95       	ror	r23
    1e8e:	67 95       	ror	r22
    1e90:	2a 95       	dec	r18
    1e92:	d1 f7       	brne	.-12     	; 0x1e88 <Ecual_Ultrasonic_Read+0x152>
		if(Timer>Ultrasonic_max)
			Timer=Ultrasonic_max;
		distance=((340*Timer)/((uint32)10000));
		*Result=distance;
    1e94:	66 3f       	cpi	r22, 0xF6	; 246
    1e96:	ed e2       	ldi	r30, 0x2D	; 45
    1e98:	7e 07       	cpc	r23, r30
    1e9a:	e0 e0       	ldi	r30, 0x00	; 0
    1e9c:	8e 07       	cpc	r24, r30
    1e9e:	e0 e0       	ldi	r30, 0x00	; 0
    1ea0:	9e 07       	cpc	r25, r30
    1ea2:	20 f0       	brcs	.+8      	; 0x1eac <Ecual_Ultrasonic_Read+0x176>
    1ea4:	65 ef       	ldi	r22, 0xF5	; 245
    1ea6:	7d e2       	ldi	r23, 0x2D	; 45
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	24 e5       	ldi	r18, 0x54	; 84
    1eae:	31 e0       	ldi	r19, 0x01	; 1
    1eb0:	40 e0       	ldi	r20, 0x00	; 0
    1eb2:	50 e0       	ldi	r21, 0x00	; 0
    1eb4:	0e 94 c2 18 	call	0x3184	; 0x3184 <__mulsi3>
    1eb8:	20 e1       	ldi	r18, 0x10	; 16
    1eba:	37 e2       	ldi	r19, 0x27	; 39
    1ebc:	40 e0       	ldi	r20, 0x00	; 0
    1ebe:	50 e0       	ldi	r21, 0x00	; 0
    1ec0:	0e 94 14 19 	call	0x3228	; 0x3228 <__udivmodsi4>
    1ec4:	f1 01       	movw	r30, r2
    1ec6:	31 83       	std	Z+1, r19	; 0x01
    1ec8:	20 83       	st	Z, r18
    1eca:	81 e0       	ldi	r24, 0x01	; 1
	}
	return Timeout;
}
    1ecc:	2a 96       	adiw	r28, 0x0a	; 10
    1ece:	0f b6       	in	r0, 0x3f	; 63
    1ed0:	f8 94       	cli
    1ed2:	de bf       	out	0x3e, r29	; 62
    1ed4:	0f be       	out	0x3f, r0	; 63
    1ed6:	cd bf       	out	0x3d, r28	; 61
    1ed8:	cf 91       	pop	r28
    1eda:	df 91       	pop	r29
    1edc:	1f 91       	pop	r17
    1ede:	0f 91       	pop	r16
    1ee0:	ff 90       	pop	r15
    1ee2:	ef 90       	pop	r14
    1ee4:	df 90       	pop	r13
    1ee6:	cf 90       	pop	r12
    1ee8:	bf 90       	pop	r11
    1eea:	af 90       	pop	r10
    1eec:	9f 90       	pop	r9
    1eee:	8f 90       	pop	r8
    1ef0:	7f 90       	pop	r7
    1ef2:	6f 90       	pop	r6
    1ef4:	5f 90       	pop	r5
    1ef6:	3f 90       	pop	r3
    1ef8:	2f 90       	pop	r2
    1efa:	08 95       	ret
			break;
		}
	}
	if(Timeout==E_OK)
	{
		Timer_start=TCNT0;
    1efc:	52 b6       	in	r5, 0x32	; 50
		OVF_old=OV_count;
    1efe:	a0 90 bf 01 	lds	r10, 0x01BF
    1f02:	b0 90 c0 01 	lds	r11, 0x01C0
    1f06:	c0 90 c1 01 	lds	r12, 0x01C1
    1f0a:	d0 90 c2 01 	lds	r13, 0x01C2
		while (State_read == GPIO_HIGH)
		{
			Mcal_GPIO_READ(&Ut->Echo, &State_read);
    1f0e:	3e 01       	movw	r6, r28
    1f10:	08 94       	sec
    1f12:	61 1c       	adc	r6, r1
    1f14:	71 1c       	adc	r7, r1
			if(OV_count>OVF_MAX+OVF_old)
    1f16:	8f e5       	ldi	r24, 0x5F	; 95
    1f18:	e8 2e       	mov	r14, r24
    1f1a:	f1 2c       	mov	r15, r1
    1f1c:	01 2d       	mov	r16, r1
    1f1e:	11 2d       	mov	r17, r1
    1f20:	ea 0c       	add	r14, r10
    1f22:	fb 1c       	adc	r15, r11
    1f24:	0c 1d       	adc	r16, r12
    1f26:	1d 1d       	adc	r17, r13
    1f28:	8b cf       	rjmp	.-234    	; 0x1e40 <Ecual_Ultrasonic_Read+0x10a>

00001f2a <Ecual_Ultrasonic_Init>:
{
	OV_count++;
}

void Ecual_Ultrasonic_Init(Ultrasonic_t *Ut)
{
    1f2a:	0f 93       	push	r16
    1f2c:	1f 93       	push	r17
    1f2e:	8c 01       	movw	r16, r24
	Mcal_GPIO_INIT(&Ut->Echo);
    1f30:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <Mcal_GPIO_INIT>
	Mcal_GPIO_INIT(&Ut->Trigger);
    1f34:	c8 01       	movw	r24, r16
    1f36:	01 96       	adiw	r24, 0x01	; 1
    1f38:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <Mcal_GPIO_INIT>
}
    1f3c:	1f 91       	pop	r17
    1f3e:	0f 91       	pop	r16
    1f40:	08 95       	ret

00001f42 <convert_int_to_string>:
        strncat(str,"  ",2);
        *(str+5)='\0';
    }
}
void convert_int_to_string(uint32 data,uint8 *str)
{
    1f42:	0f 93       	push	r16
    1f44:	1f 93       	push	r17
    1f46:	cf 93       	push	r28
    1f48:	df 93       	push	r29
    1f4a:	8b 01       	movw	r16, r22
    1f4c:	9c 01       	movw	r18, r24
    1f4e:	ea 01       	movw	r28, r20
    if(NULL==str)
    1f50:	41 15       	cp	r20, r1
    1f52:	51 05       	cpc	r21, r1
    1f54:	39 f1       	breq	.+78     	; 0x1fa4 <convert_int_to_string+0x62>
        return;
    else
    {
        memset(str,'\0',11);
    1f56:	8b e0       	ldi	r24, 0x0B	; 11
    1f58:	da 01       	movw	r26, r20
    1f5a:	1d 92       	st	X+, r1
    1f5c:	8a 95       	dec	r24
    1f5e:	e9 f7       	brne	.-6      	; 0x1f5a <convert_int_to_string+0x18>
        sprintf(str,"%x",data);
    1f60:	ed b7       	in	r30, 0x3d	; 61
    1f62:	fe b7       	in	r31, 0x3e	; 62
    1f64:	38 97       	sbiw	r30, 0x08	; 8
    1f66:	0f b6       	in	r0, 0x3f	; 63
    1f68:	f8 94       	cli
    1f6a:	fe bf       	out	0x3e, r31	; 62
    1f6c:	0f be       	out	0x3f, r0	; 63
    1f6e:	ed bf       	out	0x3d, r30	; 61
    1f70:	31 96       	adiw	r30, 0x01	; 1
    1f72:	ad b7       	in	r26, 0x3d	; 61
    1f74:	be b7       	in	r27, 0x3e	; 62
    1f76:	12 96       	adiw	r26, 0x02	; 2
    1f78:	5c 93       	st	X, r21
    1f7a:	4e 93       	st	-X, r20
    1f7c:	11 97       	sbiw	r26, 0x01	; 1
    1f7e:	80 e6       	ldi	r24, 0x60	; 96
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	93 83       	std	Z+3, r25	; 0x03
    1f84:	82 83       	std	Z+2, r24	; 0x02
    1f86:	04 83       	std	Z+4, r16	; 0x04
    1f88:	15 83       	std	Z+5, r17	; 0x05
    1f8a:	26 83       	std	Z+6, r18	; 0x06
    1f8c:	37 83       	std	Z+7, r19	; 0x07
    1f8e:	0e 94 a3 19 	call	0x3346	; 0x3346 <sprintf>
        *(str+10)='\0';
    1f92:	1a 86       	std	Y+10, r1	; 0x0a
    1f94:	ed b7       	in	r30, 0x3d	; 61
    1f96:	fe b7       	in	r31, 0x3e	; 62
    1f98:	38 96       	adiw	r30, 0x08	; 8
    1f9a:	0f b6       	in	r0, 0x3f	; 63
    1f9c:	f8 94       	cli
    1f9e:	fe bf       	out	0x3e, r31	; 62
    1fa0:	0f be       	out	0x3f, r0	; 63
    1fa2:	ed bf       	out	0x3d, r30	; 61
    }
}
    1fa4:	df 91       	pop	r29
    1fa6:	cf 91       	pop	r28
    1fa8:	1f 91       	pop	r17
    1faa:	0f 91       	pop	r16
    1fac:	08 95       	ret

00001fae <convert_short_to_string>:
        strncat(str,"     ",4);
        *(str+3)='\0';
    }
}
void convert_short_to_string(uint16 data,uint8 *str)
{
    1fae:	cf 93       	push	r28
    1fb0:	df 93       	push	r29
    1fb2:	9c 01       	movw	r18, r24
    1fb4:	eb 01       	movw	r28, r22
    if(NULL==str)
    1fb6:	61 15       	cp	r22, r1
    1fb8:	71 05       	cpc	r23, r1
    1fba:	39 f1       	breq	.+78     	; 0x200a <convert_short_to_string+0x5c>
        return;
    else
    {
        memset(str,'\0',6);
    1fbc:	86 e0       	ldi	r24, 0x06	; 6
    1fbe:	db 01       	movw	r26, r22
    1fc0:	1d 92       	st	X+, r1
    1fc2:	8a 95       	dec	r24
    1fc4:	e9 f7       	brne	.-6      	; 0x1fc0 <convert_short_to_string+0x12>
        sprintf(str,"%i",data);
    1fc6:	00 d0       	rcall	.+0      	; 0x1fc8 <convert_short_to_string+0x1a>
    1fc8:	00 d0       	rcall	.+0      	; 0x1fca <convert_short_to_string+0x1c>
    1fca:	00 d0       	rcall	.+0      	; 0x1fcc <convert_short_to_string+0x1e>
    1fcc:	ed b7       	in	r30, 0x3d	; 61
    1fce:	fe b7       	in	r31, 0x3e	; 62
    1fd0:	31 96       	adiw	r30, 0x01	; 1
    1fd2:	ad b7       	in	r26, 0x3d	; 61
    1fd4:	be b7       	in	r27, 0x3e	; 62
    1fd6:	12 96       	adiw	r26, 0x02	; 2
    1fd8:	7c 93       	st	X, r23
    1fda:	6e 93       	st	-X, r22
    1fdc:	11 97       	sbiw	r26, 0x01	; 1
    1fde:	83 e6       	ldi	r24, 0x63	; 99
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	93 83       	std	Z+3, r25	; 0x03
    1fe4:	82 83       	std	Z+2, r24	; 0x02
    1fe6:	35 83       	std	Z+5, r19	; 0x05
    1fe8:	24 83       	std	Z+4, r18	; 0x04
    1fea:	0e 94 a3 19 	call	0x3346	; 0x3346 <sprintf>
        strncat(str,"  ",2);
    1fee:	ed b7       	in	r30, 0x3d	; 61
    1ff0:	fe b7       	in	r31, 0x3e	; 62
    1ff2:	36 96       	adiw	r30, 0x06	; 6
    1ff4:	0f b6       	in	r0, 0x3f	; 63
    1ff6:	f8 94       	cli
    1ff8:	fe bf       	out	0x3e, r31	; 62
    1ffa:	0f be       	out	0x3f, r0	; 63
    1ffc:	ed bf       	out	0x3d, r30	; 61
    1ffe:	ce 01       	movw	r24, r28
    2000:	66 e6       	ldi	r22, 0x66	; 102
    2002:	70 e0       	ldi	r23, 0x00	; 0
    2004:	0e 94 88 19 	call	0x3310	; 0x3310 <strcat>
        *(str+5)='\0';
    2008:	1d 82       	std	Y+5, r1	; 0x05
    }
}
    200a:	df 91       	pop	r29
    200c:	cf 91       	pop	r28
    200e:	08 95       	ret

00002010 <convert_byte_to_string>:
	}
	return ret;
}

void convert_byte_to_string(uint8 data,uint8 *str)
{
    2010:	cf 93       	push	r28
    2012:	df 93       	push	r29
    2014:	28 2f       	mov	r18, r24
    2016:	eb 01       	movw	r28, r22
    if(NULL==str)
    2018:	61 15       	cp	r22, r1
    201a:	71 05       	cpc	r23, r1
    201c:	41 f1       	breq	.+80     	; 0x206e <convert_byte_to_string+0x5e>
        return;
    else
    {
        memset(str,'\0',4);
    201e:	18 82       	st	Y, r1
    2020:	19 82       	std	Y+1, r1	; 0x01
    2022:	1a 82       	std	Y+2, r1	; 0x02
    2024:	1b 82       	std	Y+3, r1	; 0x03
        sprintf(str,"%i",data);
    2026:	00 d0       	rcall	.+0      	; 0x2028 <convert_byte_to_string+0x18>
    2028:	00 d0       	rcall	.+0      	; 0x202a <convert_byte_to_string+0x1a>
    202a:	00 d0       	rcall	.+0      	; 0x202c <convert_byte_to_string+0x1c>
    202c:	ed b7       	in	r30, 0x3d	; 61
    202e:	fe b7       	in	r31, 0x3e	; 62
    2030:	31 96       	adiw	r30, 0x01	; 1
    2032:	ad b7       	in	r26, 0x3d	; 61
    2034:	be b7       	in	r27, 0x3e	; 62
    2036:	12 96       	adiw	r26, 0x02	; 2
    2038:	7c 93       	st	X, r23
    203a:	6e 93       	st	-X, r22
    203c:	11 97       	sbiw	r26, 0x01	; 1
    203e:	83 e6       	ldi	r24, 0x63	; 99
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	93 83       	std	Z+3, r25	; 0x03
    2044:	82 83       	std	Z+2, r24	; 0x02
    2046:	24 83       	std	Z+4, r18	; 0x04
    2048:	15 82       	std	Z+5, r1	; 0x05
    204a:	0e 94 a3 19 	call	0x3346	; 0x3346 <sprintf>
        strncat(str,"     ",4);
    204e:	8d b7       	in	r24, 0x3d	; 61
    2050:	9e b7       	in	r25, 0x3e	; 62
    2052:	06 96       	adiw	r24, 0x06	; 6
    2054:	0f b6       	in	r0, 0x3f	; 63
    2056:	f8 94       	cli
    2058:	9e bf       	out	0x3e, r25	; 62
    205a:	0f be       	out	0x3f, r0	; 63
    205c:	8d bf       	out	0x3d, r24	; 61
    205e:	ce 01       	movw	r24, r28
    2060:	69 e6       	ldi	r22, 0x69	; 105
    2062:	70 e0       	ldi	r23, 0x00	; 0
    2064:	44 e0       	ldi	r20, 0x04	; 4
    2066:	50 e0       	ldi	r21, 0x00	; 0
    2068:	0e 94 93 19 	call	0x3326	; 0x3326 <strncat>
        *(str+3)='\0';
    206c:	1b 82       	std	Y+3, r1	; 0x03
    }
}
    206e:	df 91       	pop	r29
    2070:	cf 91       	pop	r28
    2072:	08 95       	ret

00002074 <LCD_ENABLE_8BITS>:
	}
	return ret;
}

static Bool LCD_ENABLE_8BITS(LCD_8BIT_t *LCD)
{
    2074:	0f 93       	push	r16
    2076:	1f 93       	push	r17
	Bool ret = E_OK;
	if (NULL == LCD)
    2078:	00 97       	sbiw	r24, 0x00	; 0
    207a:	11 f4       	brne	.+4      	; 0x2080 <LCD_ENABLE_8BITS+0xc>
    207c:	80 e0       	ldi	r24, 0x00	; 0
    207e:	0e c0       	rjmp	.+28     	; 0x209c <LCD_ENABLE_8BITS+0x28>
		ret = E_NOK;
	else {
		ret=Mcal_GPIO_WRITE(&(LCD->LCD_E), GPIO_HIGH);
    2080:	8c 01       	movw	r16, r24
    2082:	0f 5f       	subi	r16, 0xFF	; 255
    2084:	1f 4f       	sbci	r17, 0xFF	; 255
    2086:	c8 01       	movw	r24, r16
    2088:	61 e0       	ldi	r22, 0x01	; 1
    208a:	0e 94 7f 09 	call	0x12fe	; 0x12fe <Mcal_GPIO_WRITE>
    208e:	8a e1       	ldi	r24, 0x1A	; 26
    2090:	8a 95       	dec	r24
    2092:	f1 f7       	brne	.-4      	; 0x2090 <LCD_ENABLE_8BITS+0x1c>
		_delay_us(5);
		ret=Mcal_GPIO_WRITE(&(LCD->LCD_E), GPIO_LOW);
    2094:	c8 01       	movw	r24, r16
    2096:	60 e0       	ldi	r22, 0x00	; 0
    2098:	0e 94 7f 09 	call	0x12fe	; 0x12fe <Mcal_GPIO_WRITE>
	}
	return ret;
}
    209c:	1f 91       	pop	r17
    209e:	0f 91       	pop	r16
    20a0:	08 95       	ret

000020a2 <LCD_8BIT_SEND_CMD>:
	ret = LCD_8BIT_SET_POS(LCD, row, col);
	ret = LCD_8BIT_SEND(LCD, data);
	return ret;
}
Bool LCD_8BIT_SEND_CMD(LCD_8BIT_t *LCD,uint8 Cmd)
{
    20a2:	ef 92       	push	r14
    20a4:	ff 92       	push	r15
    20a6:	0f 93       	push	r16
    20a8:	1f 93       	push	r17
    20aa:	cf 93       	push	r28
    20ac:	df 93       	push	r29
    20ae:	8c 01       	movw	r16, r24
    20b0:	f6 2e       	mov	r15, r22
	Bool ret = E_OK;
	if (NULL == LCD)
    20b2:	00 97       	sbiw	r24, 0x00	; 0
    20b4:	11 f4       	brne	.+4      	; 0x20ba <LCD_8BIT_SEND_CMD+0x18>
    20b6:	80 e0       	ldi	r24, 0x00	; 0
    20b8:	21 c0       	rjmp	.+66     	; 0x20fc <LCD_8BIT_SEND_CMD+0x5a>
		ret = E_NOK;
	else {
		ret = Mcal_GPIO_WRITE(&(LCD->LCD_RS), GPIO_LOW);
    20ba:	60 e0       	ldi	r22, 0x00	; 0
    20bc:	0e 94 7f 09 	call	0x12fe	; 0x12fe <Mcal_GPIO_WRITE>
		ret = Mcal_GPIO_WRITE(&(LCD->LCD_RW), GPIO_LOW);
    20c0:	c8 01       	movw	r24, r16
    20c2:	02 96       	adiw	r24, 0x02	; 2
    20c4:	60 e0       	ldi	r22, 0x00	; 0
    20c6:	0e 94 7f 09 	call	0x12fe	; 0x12fe <Mcal_GPIO_WRITE>
    20ca:	c0 e0       	ldi	r28, 0x00	; 0
    20cc:	d0 e0       	ldi	r29, 0x00	; 0
	if (NULL == LCD)
		ret = E_NOK;
	else {
		uint8 LCD_PINS = 0;
		for (LCD_PINS = 0; LCD_PINS <= LCD_8BIT_PINS-1; LCD_PINS++)
			ret = Mcal_GPIO_WRITE(&LCD->LCD_Data[LCD_PINS],
    20ce:	ef 2c       	mov	r14, r15
    20d0:	ff 24       	eor	r15, r15
    20d2:	b7 01       	movw	r22, r14
    20d4:	0c 2e       	mov	r0, r28
    20d6:	02 c0       	rjmp	.+4      	; 0x20dc <LCD_8BIT_SEND_CMD+0x3a>
    20d8:	75 95       	asr	r23
    20da:	67 95       	ror	r22
    20dc:	0a 94       	dec	r0
    20de:	e2 f7       	brpl	.-8      	; 0x20d8 <LCD_8BIT_SEND_CMD+0x36>
    20e0:	61 70       	andi	r22, 0x01	; 1
    20e2:	23 96       	adiw	r28, 0x03	; 3
    20e4:	c8 01       	movw	r24, r16
    20e6:	8c 0f       	add	r24, r28
    20e8:	9d 1f       	adc	r25, r29
    20ea:	0e 94 7f 09 	call	0x12fe	; 0x12fe <Mcal_GPIO_WRITE>
    20ee:	22 97       	sbiw	r28, 0x02	; 2
	Bool ret = E_OK;
	if (NULL == LCD)
		ret = E_NOK;
	else {
		uint8 LCD_PINS = 0;
		for (LCD_PINS = 0; LCD_PINS <= LCD_8BIT_PINS-1; LCD_PINS++)
    20f0:	c8 30       	cpi	r28, 0x08	; 8
    20f2:	d1 05       	cpc	r29, r1
    20f4:	71 f7       	brne	.-36     	; 0x20d2 <LCD_8BIT_SEND_CMD+0x30>
		ret = E_NOK;
	else {
		ret = Mcal_GPIO_WRITE(&(LCD->LCD_RS), GPIO_LOW);
		ret = Mcal_GPIO_WRITE(&(LCD->LCD_RW), GPIO_LOW);
		ret = LCD_SEND_8BITS(LCD, Cmd);
		ret = LCD_ENABLE_8BITS(LCD);
    20f6:	c8 01       	movw	r24, r16
    20f8:	0e 94 3a 10 	call	0x2074	; 0x2074 <LCD_ENABLE_8BITS>
	}
	return ret;
}
    20fc:	df 91       	pop	r29
    20fe:	cf 91       	pop	r28
    2100:	1f 91       	pop	r17
    2102:	0f 91       	pop	r16
    2104:	ff 90       	pop	r15
    2106:	ef 90       	pop	r14
    2108:	08 95       	ret

0000210a <LCD_8BIT_SET_POS>:
}

Bool LCD_8BIT_SET_POS(LCD_8BIT_t *LCD,uint8 row,uint8 col)
{
	Bool ret = E_OK;
	if (NULL == LCD)
    210a:	00 97       	sbiw	r24, 0x00	; 0
    210c:	b9 f0       	breq	.+46     	; 0x213c <LCD_8BIT_SET_POS+0x32>
		ret = E_NOK;
	else {
		switch (row) {
    210e:	62 30       	cpi	r22, 0x02	; 2
    2110:	61 f0       	breq	.+24     	; 0x212a <LCD_8BIT_SET_POS+0x20>
    2112:	63 30       	cpi	r22, 0x03	; 3
    2114:	18 f4       	brcc	.+6      	; 0x211c <LCD_8BIT_SET_POS+0x12>
    2116:	61 30       	cpi	r22, 0x01	; 1
    2118:	89 f4       	brne	.+34     	; 0x213c <LCD_8BIT_SET_POS+0x32>
    211a:	05 c0       	rjmp	.+10     	; 0x2126 <LCD_8BIT_SET_POS+0x1c>
    211c:	63 30       	cpi	r22, 0x03	; 3
    211e:	39 f0       	breq	.+14     	; 0x212e <LCD_8BIT_SET_POS+0x24>
    2120:	64 30       	cpi	r22, 0x04	; 4
    2122:	61 f4       	brne	.+24     	; 0x213c <LCD_8BIT_SET_POS+0x32>
    2124:	06 c0       	rjmp	.+12     	; 0x2132 <LCD_8BIT_SET_POS+0x28>
		case ROW1:
			ret = LCD_8BIT_SEND_CMD(LCD,
    2126:	40 58       	subi	r20, 0x80	; 128
    2128:	05 c0       	rjmp	.+10     	; 0x2134 <LCD_8BIT_SET_POS+0x2a>
					(LCD_SET_DDRAM_ADD | ROW1_ADDRESS) + col);
			break;
		case ROW2:
			ret = LCD_8BIT_SEND_CMD(LCD,
    212a:	40 54       	subi	r20, 0x40	; 64
    212c:	03 c0       	rjmp	.+6      	; 0x2134 <LCD_8BIT_SET_POS+0x2a>
					(LCD_SET_DDRAM_ADD | ROW2_ADDRESS) + col);
			break;
		case ROW3:
			ret = LCD_8BIT_SEND_CMD(LCD,
    212e:	4c 56       	subi	r20, 0x6C	; 108
    2130:	01 c0       	rjmp	.+2      	; 0x2134 <LCD_8BIT_SET_POS+0x2a>
					(LCD_SET_DDRAM_ADD | ROW3_ADDRESS) + col);
			break;
		case ROW4:
			ret = LCD_8BIT_SEND_CMD(LCD,
    2132:	4c 52       	subi	r20, 0x2C	; 44
    2134:	64 2f       	mov	r22, r20
    2136:	0e 94 51 10 	call	0x20a2	; 0x20a2 <LCD_8BIT_SEND_CMD>
    213a:	08 95       	ret
					(LCD_SET_DDRAM_ADD | ROW4_ADDRESS) + col);
			break;
    213c:	80 e0       	ldi	r24, 0x00	; 0
		default:
			ret = E_NOK;
		}
	}
	return ret;
}
    213e:	08 95       	ret

00002140 <LCD_8BIT_SEND>:
	}
	return ret;
}

Bool LCD_8BIT_SEND(LCD_8BIT_t *LCD,uint8 data)
{
    2140:	ef 92       	push	r14
    2142:	ff 92       	push	r15
    2144:	0f 93       	push	r16
    2146:	1f 93       	push	r17
    2148:	cf 93       	push	r28
    214a:	df 93       	push	r29
    214c:	8c 01       	movw	r16, r24
    214e:	f6 2e       	mov	r15, r22
	Bool ret = E_OK;
	if (NULL == LCD)
    2150:	00 97       	sbiw	r24, 0x00	; 0
    2152:	11 f4       	brne	.+4      	; 0x2158 <LCD_8BIT_SEND+0x18>
    2154:	80 e0       	ldi	r24, 0x00	; 0
    2156:	21 c0       	rjmp	.+66     	; 0x219a <LCD_8BIT_SEND+0x5a>
		ret = E_NOK;
	else {
		ret = Mcal_GPIO_WRITE(&(LCD->LCD_RS), GPIO_HIGH);
    2158:	61 e0       	ldi	r22, 0x01	; 1
    215a:	0e 94 7f 09 	call	0x12fe	; 0x12fe <Mcal_GPIO_WRITE>
		ret = Mcal_GPIO_WRITE(&(LCD->LCD_RW), GPIO_LOW);
    215e:	c8 01       	movw	r24, r16
    2160:	02 96       	adiw	r24, 0x02	; 2
    2162:	60 e0       	ldi	r22, 0x00	; 0
    2164:	0e 94 7f 09 	call	0x12fe	; 0x12fe <Mcal_GPIO_WRITE>
    2168:	c0 e0       	ldi	r28, 0x00	; 0
    216a:	d0 e0       	ldi	r29, 0x00	; 0
	if (NULL == LCD)
		ret = E_NOK;
	else {
		uint8 LCD_PINS = 0;
		for (LCD_PINS = 0; LCD_PINS <= LCD_8BIT_PINS-1; LCD_PINS++)
			ret = Mcal_GPIO_WRITE(&LCD->LCD_Data[LCD_PINS],
    216c:	ef 2c       	mov	r14, r15
    216e:	ff 24       	eor	r15, r15
    2170:	b7 01       	movw	r22, r14
    2172:	0c 2e       	mov	r0, r28
    2174:	02 c0       	rjmp	.+4      	; 0x217a <LCD_8BIT_SEND+0x3a>
    2176:	75 95       	asr	r23
    2178:	67 95       	ror	r22
    217a:	0a 94       	dec	r0
    217c:	e2 f7       	brpl	.-8      	; 0x2176 <LCD_8BIT_SEND+0x36>
    217e:	61 70       	andi	r22, 0x01	; 1
    2180:	23 96       	adiw	r28, 0x03	; 3
    2182:	c8 01       	movw	r24, r16
    2184:	8c 0f       	add	r24, r28
    2186:	9d 1f       	adc	r25, r29
    2188:	0e 94 7f 09 	call	0x12fe	; 0x12fe <Mcal_GPIO_WRITE>
    218c:	22 97       	sbiw	r28, 0x02	; 2
	Bool ret = E_OK;
	if (NULL == LCD)
		ret = E_NOK;
	else {
		uint8 LCD_PINS = 0;
		for (LCD_PINS = 0; LCD_PINS <= LCD_8BIT_PINS-1; LCD_PINS++)
    218e:	c8 30       	cpi	r28, 0x08	; 8
    2190:	d1 05       	cpc	r29, r1
    2192:	71 f7       	brne	.-36     	; 0x2170 <LCD_8BIT_SEND+0x30>
		ret = E_NOK;
	else {
		ret = Mcal_GPIO_WRITE(&(LCD->LCD_RS), GPIO_HIGH);
		ret = Mcal_GPIO_WRITE(&(LCD->LCD_RW), GPIO_LOW);
		ret = LCD_SEND_8BITS(LCD, data);
		ret = LCD_ENABLE_8BITS(LCD);
    2194:	c8 01       	movw	r24, r16
    2196:	0e 94 3a 10 	call	0x2074	; 0x2074 <LCD_ENABLE_8BITS>
	}
	return ret;
}
    219a:	df 91       	pop	r29
    219c:	cf 91       	pop	r28
    219e:	1f 91       	pop	r17
    21a0:	0f 91       	pop	r16
    21a2:	ff 90       	pop	r15
    21a4:	ef 90       	pop	r14
    21a6:	08 95       	ret

000021a8 <LCD_8BIT_SEND_STRING>:
		ret = LCD_ENABLE_8BITS(LCD);
	}
	return ret;
}
Bool LCD_8BIT_SEND_STRING(LCD_8BIT_t *LCD,uint8 *str)
{
    21a8:	ef 92       	push	r14
    21aa:	ff 92       	push	r15
    21ac:	1f 93       	push	r17
    21ae:	cf 93       	push	r28
    21b0:	df 93       	push	r29
    21b2:	ec 01       	movw	r28, r24
    21b4:	7b 01       	movw	r14, r22
	Bool ret = E_OK;
	if (NULL == LCD)
    21b6:	00 97       	sbiw	r24, 0x00	; 0
    21b8:	11 f4       	brne	.+4      	; 0x21be <LCD_8BIT_SEND_STRING+0x16>
    21ba:	80 e0       	ldi	r24, 0x00	; 0
    21bc:	0d c0       	rjmp	.+26     	; 0x21d8 <LCD_8BIT_SEND_STRING+0x30>
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	10 e0       	ldi	r17, 0x00	; 0
    21c2:	04 c0       	rjmp	.+8      	; 0x21cc <LCD_8BIT_SEND_STRING+0x24>
		ret = E_NOK;
	else {
		uint8 Char_pos = 0;
		while (*(str + Char_pos) != '\0') {
			ret = LCD_8BIT_SEND(LCD, *(str + Char_pos));
    21c4:	ce 01       	movw	r24, r28
    21c6:	0e 94 a0 10 	call	0x2140	; 0x2140 <LCD_8BIT_SEND>
			Char_pos++;
    21ca:	1f 5f       	subi	r17, 0xFF	; 255
	Bool ret = E_OK;
	if (NULL == LCD)
		ret = E_NOK;
	else {
		uint8 Char_pos = 0;
		while (*(str + Char_pos) != '\0') {
    21cc:	f7 01       	movw	r30, r14
    21ce:	e1 0f       	add	r30, r17
    21d0:	f1 1d       	adc	r31, r1
    21d2:	60 81       	ld	r22, Z
    21d4:	66 23       	and	r22, r22
    21d6:	b1 f7       	brne	.-20     	; 0x21c4 <LCD_8BIT_SEND_STRING+0x1c>
			ret = LCD_8BIT_SEND(LCD, *(str + Char_pos));
			Char_pos++;
		}
	}
	return ret;
}
    21d8:	df 91       	pop	r29
    21da:	cf 91       	pop	r28
    21dc:	1f 91       	pop	r17
    21de:	ff 90       	pop	r15
    21e0:	ef 90       	pop	r14
    21e2:	08 95       	ret

000021e4 <LCD_8BIT_SEND_STRING_POS>:

Bool LCD_8BIT_SEND_STRING_POS(LCD_8BIT_t *LCD,uint8 *str,uint8 row,uint8 col)
{
    21e4:	ef 92       	push	r14
    21e6:	ff 92       	push	r15
    21e8:	0f 93       	push	r16
    21ea:	1f 93       	push	r17
    21ec:	8c 01       	movw	r16, r24
    21ee:	7b 01       	movw	r14, r22
	Bool ret = E_OK;
	ret = LCD_8BIT_SET_POS(LCD, row, col);
    21f0:	64 2f       	mov	r22, r20
    21f2:	42 2f       	mov	r20, r18
    21f4:	0e 94 85 10 	call	0x210a	; 0x210a <LCD_8BIT_SET_POS>
	ret = LCD_8BIT_SEND_STRING(LCD, str);
    21f8:	c8 01       	movw	r24, r16
    21fa:	b7 01       	movw	r22, r14
    21fc:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <LCD_8BIT_SEND_STRING>
	return ret;
}
    2200:	1f 91       	pop	r17
    2202:	0f 91       	pop	r16
    2204:	ff 90       	pop	r15
    2206:	ef 90       	pop	r14
    2208:	08 95       	ret

0000220a <LCD_8BIT_SEND_POS>:
	}
	return ret;
}

Bool LCD_8BIT_SEND_POS(LCD_8BIT_t *LCD,uint8 data,uint8 row,uint8 col)
{
    220a:	ff 92       	push	r15
    220c:	0f 93       	push	r16
    220e:	1f 93       	push	r17
    2210:	8c 01       	movw	r16, r24
    2212:	f6 2e       	mov	r15, r22
	Bool ret = E_OK;
	ret = LCD_8BIT_SET_POS(LCD, row, col);
    2214:	64 2f       	mov	r22, r20
    2216:	42 2f       	mov	r20, r18
    2218:	0e 94 85 10 	call	0x210a	; 0x210a <LCD_8BIT_SET_POS>
	ret = LCD_8BIT_SEND(LCD, data);
    221c:	c8 01       	movw	r24, r16
    221e:	6f 2d       	mov	r22, r15
    2220:	0e 94 a0 10 	call	0x2140	; 0x2140 <LCD_8BIT_SEND>
	return ret;
}
    2224:	1f 91       	pop	r17
    2226:	0f 91       	pop	r16
    2228:	ff 90       	pop	r15
    222a:	08 95       	ret

0000222c <LCD_8bit_send_custom_character>:
		}
	}
	return ret;
}
Bool LCD_8bit_send_custom_character(LCD_8BIT_t *LCD,uint8 row,uint8 col,const uint8 data[],uint8 mem_pos)
{
    222c:	bf 92       	push	r11
    222e:	cf 92       	push	r12
    2230:	df 92       	push	r13
    2232:	ef 92       	push	r14
    2234:	ff 92       	push	r15
    2236:	0f 93       	push	r16
    2238:	1f 93       	push	r17
    223a:	cf 93       	push	r28
    223c:	df 93       	push	r29
    223e:	7c 01       	movw	r14, r24
    2240:	16 2f       	mov	r17, r22
    2242:	b4 2e       	mov	r11, r20
    2244:	69 01       	movw	r12, r18
	Bool ret = E_OK;
	if (NULL == LCD)
    2246:	00 97       	sbiw	r24, 0x00	; 0
    2248:	11 f4       	brne	.+4      	; 0x224e <LCD_8bit_send_custom_character+0x22>
    224a:	80 e0       	ldi	r24, 0x00	; 0
    224c:	1f c0       	rjmp	.+62     	; 0x228c <LCD_8bit_send_custom_character+0x60>
		ret = E_NOK;
	else {
		uint8 Byte_pos = 0;
		ret = LCD_8BIT_SEND_CMD(LCD, LCD_SET_CGRAM_ADD + 8 * (mem_pos));
    224e:	60 2f       	mov	r22, r16
    2250:	70 e0       	ldi	r23, 0x00	; 0
    2252:	68 5f       	subi	r22, 0xF8	; 248
    2254:	7f 4f       	sbci	r23, 0xFF	; 255
    2256:	83 e0       	ldi	r24, 0x03	; 3
    2258:	66 0f       	add	r22, r22
    225a:	77 1f       	adc	r23, r23
    225c:	8a 95       	dec	r24
    225e:	e1 f7       	brne	.-8      	; 0x2258 <LCD_8bit_send_custom_character+0x2c>
    2260:	c7 01       	movw	r24, r14
    2262:	0e 94 51 10 	call	0x20a2	; 0x20a2 <LCD_8BIT_SEND_CMD>
    2266:	c0 e0       	ldi	r28, 0x00	; 0
    2268:	d0 e0       	ldi	r29, 0x00	; 0
		for (Byte_pos = 0; Byte_pos <= 7; Byte_pos++)
			ret = LCD_8BIT_SEND(LCD, data[Byte_pos]);
    226a:	f6 01       	movw	r30, r12
    226c:	ec 0f       	add	r30, r28
    226e:	fd 1f       	adc	r31, r29
    2270:	c7 01       	movw	r24, r14
    2272:	60 81       	ld	r22, Z
    2274:	0e 94 a0 10 	call	0x2140	; 0x2140 <LCD_8BIT_SEND>
    2278:	21 96       	adiw	r28, 0x01	; 1
	if (NULL == LCD)
		ret = E_NOK;
	else {
		uint8 Byte_pos = 0;
		ret = LCD_8BIT_SEND_CMD(LCD, LCD_SET_CGRAM_ADD + 8 * (mem_pos));
		for (Byte_pos = 0; Byte_pos <= 7; Byte_pos++)
    227a:	c8 30       	cpi	r28, 0x08	; 8
    227c:	d1 05       	cpc	r29, r1
    227e:	a9 f7       	brne	.-22     	; 0x226a <LCD_8bit_send_custom_character+0x3e>
			ret = LCD_8BIT_SEND(LCD, data[Byte_pos]);
		ret = LCD_8BIT_SEND_POS(LCD, mem_pos, row, col);
    2280:	c7 01       	movw	r24, r14
    2282:	60 2f       	mov	r22, r16
    2284:	41 2f       	mov	r20, r17
    2286:	2b 2d       	mov	r18, r11
    2288:	0e 94 05 11 	call	0x220a	; 0x220a <LCD_8BIT_SEND_POS>
	}
	return ret;
}
    228c:	df 91       	pop	r29
    228e:	cf 91       	pop	r28
    2290:	1f 91       	pop	r17
    2292:	0f 91       	pop	r16
    2294:	ff 90       	pop	r15
    2296:	ef 90       	pop	r14
    2298:	df 90       	pop	r13
    229a:	cf 90       	pop	r12
    229c:	bf 90       	pop	r11
    229e:	08 95       	ret

000022a0 <LCD_SEND_4BITS>:
 *      Author: Seif pc
 */
#include "Ecual_lcd.h"

static Bool LCD_SEND_4BITS(LCD_4BIT_t *LCD,uint8 CMD)
{
    22a0:	0f 93       	push	r16
    22a2:	1f 93       	push	r17
    22a4:	cf 93       	push	r28
    22a6:	df 93       	push	r29
    22a8:	ec 01       	movw	r28, r24
	Bool ret=E_OK;
	if(NULL==LCD)
    22aa:	00 97       	sbiw	r24, 0x00	; 0
    22ac:	11 f4       	brne	.+4      	; 0x22b2 <LCD_SEND_4BITS+0x12>
    22ae:	80 e0       	ldi	r24, 0x00	; 0
    22b0:	1e c0       	rjmp	.+60     	; 0x22ee <LCD_SEND_4BITS+0x4e>
		ret=E_NOK;
	else
	{
		uint8 LCD_PINS=0;
		for(LCD_PINS=0;LCD_PINS<=LCD_4BIT_PINS-1;LCD_PINS++)
			ret=Mcal_GPIO_WRITE(&LCD->LCD_Data[LCD_PINS],((CMD>>LCD_PINS)&BIT_MASK));
    22b2:	06 2f       	mov	r16, r22
    22b4:	10 e0       	ldi	r17, 0x00	; 0
    22b6:	61 70       	andi	r22, 0x01	; 1
    22b8:	03 96       	adiw	r24, 0x03	; 3
    22ba:	0e 94 7f 09 	call	0x12fe	; 0x12fe <Mcal_GPIO_WRITE>
    22be:	15 95       	asr	r17
    22c0:	07 95       	ror	r16
    22c2:	60 2f       	mov	r22, r16
    22c4:	61 70       	andi	r22, 0x01	; 1
    22c6:	ce 01       	movw	r24, r28
    22c8:	04 96       	adiw	r24, 0x04	; 4
    22ca:	0e 94 7f 09 	call	0x12fe	; 0x12fe <Mcal_GPIO_WRITE>
    22ce:	15 95       	asr	r17
    22d0:	07 95       	ror	r16
    22d2:	60 2f       	mov	r22, r16
    22d4:	61 70       	andi	r22, 0x01	; 1
    22d6:	ce 01       	movw	r24, r28
    22d8:	05 96       	adiw	r24, 0x05	; 5
    22da:	0e 94 7f 09 	call	0x12fe	; 0x12fe <Mcal_GPIO_WRITE>
    22de:	15 95       	asr	r17
    22e0:	07 95       	ror	r16
    22e2:	01 70       	andi	r16, 0x01	; 1
    22e4:	ce 01       	movw	r24, r28
    22e6:	06 96       	adiw	r24, 0x06	; 6
    22e8:	60 2f       	mov	r22, r16
    22ea:	0e 94 7f 09 	call	0x12fe	; 0x12fe <Mcal_GPIO_WRITE>
	}
	return ret;
}
    22ee:	df 91       	pop	r29
    22f0:	cf 91       	pop	r28
    22f2:	1f 91       	pop	r17
    22f4:	0f 91       	pop	r16
    22f6:	08 95       	ret

000022f8 <LCD_ENABLE_4BITS>:
	}
	return ret;
}

static Bool LCD_ENABLE_4BITS(LCD_4BIT_t *LCD)
{
    22f8:	0f 93       	push	r16
    22fa:	1f 93       	push	r17
	Bool ret = E_OK;
	if (NULL == LCD)
    22fc:	00 97       	sbiw	r24, 0x00	; 0
    22fe:	11 f4       	brne	.+4      	; 0x2304 <LCD_ENABLE_4BITS+0xc>
    2300:	80 e0       	ldi	r24, 0x00	; 0
    2302:	0e c0       	rjmp	.+28     	; 0x2320 <LCD_ENABLE_4BITS+0x28>
		ret = E_NOK;
	else {
		ret=Mcal_GPIO_WRITE(&(LCD->LCD_E),GPIO_HIGH);
    2304:	8c 01       	movw	r16, r24
    2306:	0f 5f       	subi	r16, 0xFF	; 255
    2308:	1f 4f       	sbci	r17, 0xFF	; 255
    230a:	c8 01       	movw	r24, r16
    230c:	61 e0       	ldi	r22, 0x01	; 1
    230e:	0e 94 7f 09 	call	0x12fe	; 0x12fe <Mcal_GPIO_WRITE>
    2312:	8a e1       	ldi	r24, 0x1A	; 26
    2314:	8a 95       	dec	r24
    2316:	f1 f7       	brne	.-4      	; 0x2314 <LCD_ENABLE_4BITS+0x1c>
		_delay_us(5);
		ret=Mcal_GPIO_WRITE(&(LCD->LCD_E),GPIO_LOW);
    2318:	c8 01       	movw	r24, r16
    231a:	60 e0       	ldi	r22, 0x00	; 0
    231c:	0e 94 7f 09 	call	0x12fe	; 0x12fe <Mcal_GPIO_WRITE>
	}
	return ret;
}
    2320:	1f 91       	pop	r17
    2322:	0f 91       	pop	r16
    2324:	08 95       	ret

00002326 <LCD_4BIT_SEND_CMD>:
	}
	return ret;
}

Bool LCD_4BIT_SEND_CMD(LCD_4BIT_t *LCD,uint8 Cmd)
{
    2326:	1f 93       	push	r17
    2328:	cf 93       	push	r28
    232a:	df 93       	push	r29
    232c:	ec 01       	movw	r28, r24
    232e:	16 2f       	mov	r17, r22
	Bool ret = E_OK;
	if (NULL == LCD)
    2330:	00 97       	sbiw	r24, 0x00	; 0
    2332:	11 f4       	brne	.+4      	; 0x2338 <LCD_4BIT_SEND_CMD+0x12>
    2334:	80 e0       	ldi	r24, 0x00	; 0
    2336:	19 c0       	rjmp	.+50     	; 0x236a <LCD_4BIT_SEND_CMD+0x44>
		ret = E_NOK;
	else {
		ret=Mcal_GPIO_WRITE(&(LCD->LCD_RS),GPIO_LOW);
    2338:	60 e0       	ldi	r22, 0x00	; 0
    233a:	0e 94 7f 09 	call	0x12fe	; 0x12fe <Mcal_GPIO_WRITE>
		ret=Mcal_GPIO_WRITE(&(LCD->LCD_RW),GPIO_LOW);
    233e:	ce 01       	movw	r24, r28
    2340:	02 96       	adiw	r24, 0x02	; 2
    2342:	60 e0       	ldi	r22, 0x00	; 0
    2344:	0e 94 7f 09 	call	0x12fe	; 0x12fe <Mcal_GPIO_WRITE>
		ret=LCD_SEND_4BITS(LCD,Cmd>>LCD_4BIT_PINS);
    2348:	61 2f       	mov	r22, r17
    234a:	62 95       	swap	r22
    234c:	6f 70       	andi	r22, 0x0F	; 15
    234e:	ce 01       	movw	r24, r28
    2350:	0e 94 50 11 	call	0x22a0	; 0x22a0 <LCD_SEND_4BITS>
		ret=LCD_ENABLE_4BITS(LCD);
    2354:	ce 01       	movw	r24, r28
    2356:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <LCD_ENABLE_4BITS>
		ret=LCD_SEND_4BITS(LCD,Cmd&0x0F);
    235a:	1f 70       	andi	r17, 0x0F	; 15
    235c:	ce 01       	movw	r24, r28
    235e:	61 2f       	mov	r22, r17
    2360:	0e 94 50 11 	call	0x22a0	; 0x22a0 <LCD_SEND_4BITS>
		ret=LCD_ENABLE_4BITS(LCD);
    2364:	ce 01       	movw	r24, r28
    2366:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <LCD_ENABLE_4BITS>
	}
	return ret;
}
    236a:	df 91       	pop	r29
    236c:	cf 91       	pop	r28
    236e:	1f 91       	pop	r17
    2370:	08 95       	ret

00002372 <LCD_4BIT_SET_POS>:
}

Bool LCD_4BIT_SET_POS(LCD_4BIT_t *LCD,uint8 row,uint8 col)
{
	Bool ret = E_OK;
	if (NULL == LCD)
    2372:	00 97       	sbiw	r24, 0x00	; 0
    2374:	b9 f0       	breq	.+46     	; 0x23a4 <LCD_4BIT_SET_POS+0x32>
		ret = E_NOK;
	else {
		switch(row)
    2376:	62 30       	cpi	r22, 0x02	; 2
    2378:	61 f0       	breq	.+24     	; 0x2392 <LCD_4BIT_SET_POS+0x20>
    237a:	63 30       	cpi	r22, 0x03	; 3
    237c:	18 f4       	brcc	.+6      	; 0x2384 <LCD_4BIT_SET_POS+0x12>
    237e:	61 30       	cpi	r22, 0x01	; 1
    2380:	89 f4       	brne	.+34     	; 0x23a4 <LCD_4BIT_SET_POS+0x32>
    2382:	05 c0       	rjmp	.+10     	; 0x238e <LCD_4BIT_SET_POS+0x1c>
    2384:	63 30       	cpi	r22, 0x03	; 3
    2386:	39 f0       	breq	.+14     	; 0x2396 <LCD_4BIT_SET_POS+0x24>
    2388:	64 30       	cpi	r22, 0x04	; 4
    238a:	61 f4       	brne	.+24     	; 0x23a4 <LCD_4BIT_SET_POS+0x32>
    238c:	06 c0       	rjmp	.+12     	; 0x239a <LCD_4BIT_SET_POS+0x28>
		{
			case ROW1:
				ret=LCD_4BIT_SEND_CMD(LCD,(LCD_SET_DDRAM_ADD|ROW1_ADDRESS)+col);
    238e:	40 58       	subi	r20, 0x80	; 128
    2390:	05 c0       	rjmp	.+10     	; 0x239c <LCD_4BIT_SET_POS+0x2a>
				break;
			case ROW2:
				ret=LCD_4BIT_SEND_CMD(LCD,(LCD_SET_DDRAM_ADD|ROW2_ADDRESS)+col);
    2392:	40 54       	subi	r20, 0x40	; 64
    2394:	03 c0       	rjmp	.+6      	; 0x239c <LCD_4BIT_SET_POS+0x2a>
				break;
			case ROW3:
				ret=LCD_4BIT_SEND_CMD(LCD,(LCD_SET_DDRAM_ADD|ROW3_ADDRESS)+col);
    2396:	4c 56       	subi	r20, 0x6C	; 108
    2398:	01 c0       	rjmp	.+2      	; 0x239c <LCD_4BIT_SET_POS+0x2a>
				break;
			case ROW4:
				ret=LCD_4BIT_SEND_CMD(LCD,(LCD_SET_DDRAM_ADD|ROW4_ADDRESS)+col);
    239a:	4c 52       	subi	r20, 0x2C	; 44
    239c:	64 2f       	mov	r22, r20
    239e:	0e 94 93 11 	call	0x2326	; 0x2326 <LCD_4BIT_SEND_CMD>
    23a2:	08 95       	ret
				break;
    23a4:	80 e0       	ldi	r24, 0x00	; 0
			default:
				ret=E_NOK;
		}
	}
	return ret;
}
    23a6:	08 95       	ret

000023a8 <LCD_4BIT_SEND>:
	}
	return ret;
}

Bool LCD_4BIT_SEND(LCD_4BIT_t *LCD,uint8 data)
{
    23a8:	1f 93       	push	r17
    23aa:	cf 93       	push	r28
    23ac:	df 93       	push	r29
    23ae:	ec 01       	movw	r28, r24
    23b0:	16 2f       	mov	r17, r22
	Bool ret = E_OK;
	if (NULL == LCD)
    23b2:	00 97       	sbiw	r24, 0x00	; 0
    23b4:	11 f4       	brne	.+4      	; 0x23ba <LCD_4BIT_SEND+0x12>
    23b6:	80 e0       	ldi	r24, 0x00	; 0
    23b8:	19 c0       	rjmp	.+50     	; 0x23ec <LCD_4BIT_SEND+0x44>
		ret = E_NOK;
	else
	{
		ret=Mcal_GPIO_WRITE(&(LCD->LCD_RS),GPIO_HIGH);
    23ba:	61 e0       	ldi	r22, 0x01	; 1
    23bc:	0e 94 7f 09 	call	0x12fe	; 0x12fe <Mcal_GPIO_WRITE>
		ret=Mcal_GPIO_WRITE(&(LCD->LCD_RW),GPIO_LOW);
    23c0:	ce 01       	movw	r24, r28
    23c2:	02 96       	adiw	r24, 0x02	; 2
    23c4:	60 e0       	ldi	r22, 0x00	; 0
    23c6:	0e 94 7f 09 	call	0x12fe	; 0x12fe <Mcal_GPIO_WRITE>
		ret = LCD_SEND_4BITS(LCD, data >> LCD_4BIT_PINS);
    23ca:	61 2f       	mov	r22, r17
    23cc:	62 95       	swap	r22
    23ce:	6f 70       	andi	r22, 0x0F	; 15
    23d0:	ce 01       	movw	r24, r28
    23d2:	0e 94 50 11 	call	0x22a0	; 0x22a0 <LCD_SEND_4BITS>
		ret = LCD_ENABLE_4BITS(LCD);
    23d6:	ce 01       	movw	r24, r28
    23d8:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <LCD_ENABLE_4BITS>
		ret = LCD_SEND_4BITS(LCD, data & 0x0F);
    23dc:	1f 70       	andi	r17, 0x0F	; 15
    23de:	ce 01       	movw	r24, r28
    23e0:	61 2f       	mov	r22, r17
    23e2:	0e 94 50 11 	call	0x22a0	; 0x22a0 <LCD_SEND_4BITS>
		ret = LCD_ENABLE_4BITS(LCD);
    23e6:	ce 01       	movw	r24, r28
    23e8:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <LCD_ENABLE_4BITS>
	}
	return ret;
}
    23ec:	df 91       	pop	r29
    23ee:	cf 91       	pop	r28
    23f0:	1f 91       	pop	r17
    23f2:	08 95       	ret

000023f4 <LCD_4BIT_SEND_POS>:
	ret=LCD_4BIT_SEND_STRING(LCD,str);
	return ret;
}

Bool LCD_4BIT_SEND_POS(LCD_4BIT_t *LCD,uint8 data,uint8 row,uint8 col)
{
    23f4:	ff 92       	push	r15
    23f6:	0f 93       	push	r16
    23f8:	1f 93       	push	r17
    23fa:	8c 01       	movw	r16, r24
    23fc:	f6 2e       	mov	r15, r22
	Bool ret = E_OK;
	ret=LCD_4BIT_SET_POS(LCD,row,col);
    23fe:	64 2f       	mov	r22, r20
    2400:	42 2f       	mov	r20, r18
    2402:	0e 94 b9 11 	call	0x2372	; 0x2372 <LCD_4BIT_SET_POS>
	ret=LCD_4BIT_SEND(LCD,data);
    2406:	c8 01       	movw	r24, r16
    2408:	6f 2d       	mov	r22, r15
    240a:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <LCD_4BIT_SEND>
	return ret;
}
    240e:	1f 91       	pop	r17
    2410:	0f 91       	pop	r16
    2412:	ff 90       	pop	r15
    2414:	08 95       	ret

00002416 <LCD_4bit_send_custom_character>:

Bool LCD_4bit_send_custom_character(LCD_4BIT_t *LCD,uint8 row,uint8 col,const uint8 data[],uint8 mem_pos)
{
    2416:	bf 92       	push	r11
    2418:	cf 92       	push	r12
    241a:	df 92       	push	r13
    241c:	ef 92       	push	r14
    241e:	ff 92       	push	r15
    2420:	0f 93       	push	r16
    2422:	1f 93       	push	r17
    2424:	cf 93       	push	r28
    2426:	df 93       	push	r29
    2428:	7c 01       	movw	r14, r24
    242a:	16 2f       	mov	r17, r22
    242c:	b4 2e       	mov	r11, r20
    242e:	69 01       	movw	r12, r18
	Bool ret = E_OK;
	if (NULL == LCD)
    2430:	00 97       	sbiw	r24, 0x00	; 0
    2432:	11 f4       	brne	.+4      	; 0x2438 <LCD_4bit_send_custom_character+0x22>
    2434:	80 e0       	ldi	r24, 0x00	; 0
    2436:	1e c0       	rjmp	.+60     	; 0x2474 <LCD_4bit_send_custom_character+0x5e>
		ret = E_NOK;
	else {
		uint8 Byte_pos=0;
		ret=LCD_4BIT_SEND_CMD(LCD,LCD_SET_CGRAM_ADD+8*(mem_pos));
    2438:	60 2f       	mov	r22, r16
    243a:	70 e0       	ldi	r23, 0x00	; 0
    243c:	68 5f       	subi	r22, 0xF8	; 248
    243e:	7f 4f       	sbci	r23, 0xFF	; 255
    2440:	43 e0       	ldi	r20, 0x03	; 3
    2442:	66 0f       	add	r22, r22
    2444:	77 1f       	adc	r23, r23
    2446:	4a 95       	dec	r20
    2448:	e1 f7       	brne	.-8      	; 0x2442 <LCD_4bit_send_custom_character+0x2c>
    244a:	0e 94 93 11 	call	0x2326	; 0x2326 <LCD_4BIT_SEND_CMD>
    244e:	c0 e0       	ldi	r28, 0x00	; 0
    2450:	d0 e0       	ldi	r29, 0x00	; 0
		for(Byte_pos=0;Byte_pos<=7;Byte_pos++)
			ret=LCD_4BIT_SEND(LCD,data[Byte_pos]);
    2452:	f6 01       	movw	r30, r12
    2454:	ec 0f       	add	r30, r28
    2456:	fd 1f       	adc	r31, r29
    2458:	c7 01       	movw	r24, r14
    245a:	60 81       	ld	r22, Z
    245c:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <LCD_4BIT_SEND>
    2460:	21 96       	adiw	r28, 0x01	; 1
	if (NULL == LCD)
		ret = E_NOK;
	else {
		uint8 Byte_pos=0;
		ret=LCD_4BIT_SEND_CMD(LCD,LCD_SET_CGRAM_ADD+8*(mem_pos));
		for(Byte_pos=0;Byte_pos<=7;Byte_pos++)
    2462:	c8 30       	cpi	r28, 0x08	; 8
    2464:	d1 05       	cpc	r29, r1
    2466:	a9 f7       	brne	.-22     	; 0x2452 <LCD_4bit_send_custom_character+0x3c>
			ret=LCD_4BIT_SEND(LCD,data[Byte_pos]);
		ret=LCD_4BIT_SEND_POS(LCD,mem_pos,row,col);
    2468:	c7 01       	movw	r24, r14
    246a:	60 2f       	mov	r22, r16
    246c:	41 2f       	mov	r20, r17
    246e:	2b 2d       	mov	r18, r11
    2470:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_4BIT_SEND_POS>
	}
	return ret;
}
    2474:	df 91       	pop	r29
    2476:	cf 91       	pop	r28
    2478:	1f 91       	pop	r17
    247a:	0f 91       	pop	r16
    247c:	ff 90       	pop	r15
    247e:	ef 90       	pop	r14
    2480:	df 90       	pop	r13
    2482:	cf 90       	pop	r12
    2484:	bf 90       	pop	r11
    2486:	08 95       	ret

00002488 <LCD_4BIT_SEND_STRING>:
	}
	return ret;
}

Bool LCD_4BIT_SEND_STRING(LCD_4BIT_t *LCD,uint8 *str)
{
    2488:	ef 92       	push	r14
    248a:	ff 92       	push	r15
    248c:	1f 93       	push	r17
    248e:	cf 93       	push	r28
    2490:	df 93       	push	r29
    2492:	ec 01       	movw	r28, r24
    2494:	7b 01       	movw	r14, r22
	Bool ret = E_OK;
	if (NULL == LCD)
    2496:	00 97       	sbiw	r24, 0x00	; 0
    2498:	11 f4       	brne	.+4      	; 0x249e <LCD_4BIT_SEND_STRING+0x16>
    249a:	80 e0       	ldi	r24, 0x00	; 0
    249c:	0d c0       	rjmp	.+26     	; 0x24b8 <LCD_4BIT_SEND_STRING+0x30>
    249e:	81 e0       	ldi	r24, 0x01	; 1
    24a0:	10 e0       	ldi	r17, 0x00	; 0
    24a2:	04 c0       	rjmp	.+8      	; 0x24ac <LCD_4BIT_SEND_STRING+0x24>
		ret = E_NOK;
	else {
		uint8 Char_pos=0;
		while(*(str+Char_pos)!='\0')
		{
			ret=LCD_4BIT_SEND(LCD,*(str+Char_pos));
    24a4:	ce 01       	movw	r24, r28
    24a6:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <LCD_4BIT_SEND>
			Char_pos++;
    24aa:	1f 5f       	subi	r17, 0xFF	; 255
	Bool ret = E_OK;
	if (NULL == LCD)
		ret = E_NOK;
	else {
		uint8 Char_pos=0;
		while(*(str+Char_pos)!='\0')
    24ac:	f7 01       	movw	r30, r14
    24ae:	e1 0f       	add	r30, r17
    24b0:	f1 1d       	adc	r31, r1
    24b2:	60 81       	ld	r22, Z
    24b4:	66 23       	and	r22, r22
    24b6:	b1 f7       	brne	.-20     	; 0x24a4 <LCD_4BIT_SEND_STRING+0x1c>
			ret=LCD_4BIT_SEND(LCD,*(str+Char_pos));
			Char_pos++;
		}
	}
	return ret;
}
    24b8:	df 91       	pop	r29
    24ba:	cf 91       	pop	r28
    24bc:	1f 91       	pop	r17
    24be:	ff 90       	pop	r15
    24c0:	ef 90       	pop	r14
    24c2:	08 95       	ret

000024c4 <LCD_4BIT_SEND_STRING_POS>:
	}
	return E_stat;
}

Bool LCD_4BIT_SEND_STRING_POS(LCD_4BIT_t *LCD,uint8 *str,uint8 row,uint8 col)
{
    24c4:	ef 92       	push	r14
    24c6:	ff 92       	push	r15
    24c8:	0f 93       	push	r16
    24ca:	1f 93       	push	r17
    24cc:	8c 01       	movw	r16, r24
    24ce:	7b 01       	movw	r14, r22
	Bool ret = E_OK;
	ret=LCD_4BIT_SET_POS(LCD,row,col);
    24d0:	64 2f       	mov	r22, r20
    24d2:	42 2f       	mov	r20, r18
    24d4:	0e 94 b9 11 	call	0x2372	; 0x2372 <LCD_4BIT_SET_POS>
	ret=LCD_4BIT_SEND_STRING(LCD,str);
    24d8:	c8 01       	movw	r24, r16
    24da:	b7 01       	movw	r22, r14
    24dc:	0e 94 44 12 	call	0x2488	; 0x2488 <LCD_4BIT_SEND_STRING>
	return ret;
}
    24e0:	1f 91       	pop	r17
    24e2:	0f 91       	pop	r16
    24e4:	ff 90       	pop	r15
    24e6:	ef 90       	pop	r14
    24e8:	08 95       	ret

000024ea <LCD_8BIT_INIT>:
	}
	return ret;
}

Bool LCD_8BIT_INIT(LCD_8BIT_t *LCD)
{
    24ea:	af 92       	push	r10
    24ec:	bf 92       	push	r11
    24ee:	cf 92       	push	r12
    24f0:	df 92       	push	r13
    24f2:	ef 92       	push	r14
    24f4:	ff 92       	push	r15
    24f6:	0f 93       	push	r16
    24f8:	1f 93       	push	r17
    24fa:	cf 93       	push	r28
    24fc:	df 93       	push	r29
    24fe:	ec 01       	movw	r28, r24
	Bool ret = E_OK;
	if (NULL == LCD)
    2500:	00 97       	sbiw	r24, 0x00	; 0
    2502:	11 f4       	brne	.+4      	; 0x2508 <LCD_8BIT_INIT+0x1e>
    2504:	80 e0       	ldi	r24, 0x00	; 0
    2506:	6d c0       	rjmp	.+218    	; 0x25e2 <LCD_8BIT_INIT+0xf8>
		ret = E_NOK;
	else {
		uint8 LCD_PINS = 0;
		ret = Mcal_GPIO_INIT(&(LCD->LCD_E));
    2508:	01 96       	adiw	r24, 0x01	; 1
    250a:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <Mcal_GPIO_INIT>
		ret = Mcal_GPIO_INIT(&(LCD->LCD_RS));
    250e:	ce 01       	movw	r24, r28
    2510:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <Mcal_GPIO_INIT>
		ret = Mcal_GPIO_INIT(&(LCD->LCD_RW));
    2514:	ce 01       	movw	r24, r28
    2516:	02 96       	adiw	r24, 0x02	; 2
    2518:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <Mcal_GPIO_INIT>
		for (LCD_PINS = 0; LCD_PINS <= LCD_4BIT_PINS - 1; LCD_PINS++)
			ret = Mcal_GPIO_INIT(&LCD->LCD_Data[LCD_PINS]);
    251c:	8e 01       	movw	r16, r28
    251e:	0d 5f       	subi	r16, 0xFD	; 253
    2520:	1f 4f       	sbci	r17, 0xFF	; 255
    2522:	c8 01       	movw	r24, r16
    2524:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <Mcal_GPIO_INIT>
    2528:	74 e0       	ldi	r23, 0x04	; 4
    252a:	e7 2e       	mov	r14, r23
    252c:	f1 2c       	mov	r15, r1
    252e:	ec 0e       	add	r14, r28
    2530:	fd 1e       	adc	r15, r29
    2532:	c7 01       	movw	r24, r14
    2534:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <Mcal_GPIO_INIT>
    2538:	65 e0       	ldi	r22, 0x05	; 5
    253a:	c6 2e       	mov	r12, r22
    253c:	d1 2c       	mov	r13, r1
    253e:	cc 0e       	add	r12, r28
    2540:	dd 1e       	adc	r13, r29
    2542:	c6 01       	movw	r24, r12
    2544:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <Mcal_GPIO_INIT>
    2548:	56 e0       	ldi	r21, 0x06	; 6
    254a:	a5 2e       	mov	r10, r21
    254c:	b1 2c       	mov	r11, r1
    254e:	ac 0e       	add	r10, r28
    2550:	bd 1e       	adc	r11, r29
    2552:	c5 01       	movw	r24, r10
    2554:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <Mcal_GPIO_INIT>
		for (LCD_PINS = 0; LCD_PINS <= LCD_4BIT_PINS - 1; LCD_PINS++)
			ret = Mcal_GPIO_WRITE(&LCD->LCD_Data[LCD_PINS], GPIO_LOW);
    2558:	c8 01       	movw	r24, r16
    255a:	60 e0       	ldi	r22, 0x00	; 0
    255c:	0e 94 7f 09 	call	0x12fe	; 0x12fe <Mcal_GPIO_WRITE>
    2560:	c7 01       	movw	r24, r14
    2562:	60 e0       	ldi	r22, 0x00	; 0
    2564:	0e 94 7f 09 	call	0x12fe	; 0x12fe <Mcal_GPIO_WRITE>
    2568:	c6 01       	movw	r24, r12
    256a:	60 e0       	ldi	r22, 0x00	; 0
    256c:	0e 94 7f 09 	call	0x12fe	; 0x12fe <Mcal_GPIO_WRITE>
    2570:	c5 01       	movw	r24, r10
    2572:	60 e0       	ldi	r22, 0x00	; 0
    2574:	0e 94 7f 09 	call	0x12fe	; 0x12fe <Mcal_GPIO_WRITE>
    2578:	88 ec       	ldi	r24, 0xC8	; 200
    257a:	90 e0       	ldi	r25, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    257c:	20 e9       	ldi	r18, 0x90	; 144
    257e:	31 e0       	ldi	r19, 0x01	; 1
    2580:	f9 01       	movw	r30, r18
    2582:	31 97       	sbiw	r30, 0x01	; 1
    2584:	f1 f7       	brne	.-4      	; 0x2582 <LCD_8BIT_INIT+0x98>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2586:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2588:	d9 f7       	brne	.-10     	; 0x2580 <LCD_8BIT_INIT+0x96>
		_delay_ms(20);
		ret = LCD_8BIT_SEND_CMD(LCD, LCD_8BIT_TWO_LINE);
    258a:	ce 01       	movw	r24, r28
    258c:	68 e3       	ldi	r22, 0x38	; 56
    258e:	0e 94 51 10 	call	0x20a2	; 0x20a2 <LCD_8BIT_SEND_CMD>
    2592:	80 e2       	ldi	r24, 0x20	; 32
    2594:	9e e4       	ldi	r25, 0x4E	; 78
    2596:	01 97       	sbiw	r24, 0x01	; 1
    2598:	f1 f7       	brne	.-4      	; 0x2596 <LCD_8BIT_INIT+0xac>
		_delay_ms(5);
		ret = LCD_8BIT_SEND_CMD(LCD, LCD_8BIT_TWO_LINE);
    259a:	ce 01       	movw	r24, r28
    259c:	68 e3       	ldi	r22, 0x38	; 56
    259e:	0e 94 51 10 	call	0x20a2	; 0x20a2 <LCD_8BIT_SEND_CMD>
    25a2:	88 e5       	ldi	r24, 0x58	; 88
    25a4:	92 e0       	ldi	r25, 0x02	; 2
    25a6:	01 97       	sbiw	r24, 0x01	; 1
    25a8:	f1 f7       	brne	.-4      	; 0x25a6 <LCD_8BIT_INIT+0xbc>
		_delay_us(150);
		ret = LCD_8BIT_SEND_CMD(LCD, LCD_8BIT_TWO_LINE);
    25aa:	ce 01       	movw	r24, r28
    25ac:	68 e3       	ldi	r22, 0x38	; 56
    25ae:	0e 94 51 10 	call	0x20a2	; 0x20a2 <LCD_8BIT_SEND_CMD>

		ret = LCD_8BIT_SEND_CMD(LCD, LCD_CLEAR_DISPLAY);
    25b2:	ce 01       	movw	r24, r28
    25b4:	61 e0       	ldi	r22, 0x01	; 1
    25b6:	0e 94 51 10 	call	0x20a2	; 0x20a2 <LCD_8BIT_SEND_CMD>
		ret = LCD_8BIT_SEND_CMD(LCD, LCD_RETURN_HOME);
    25ba:	ce 01       	movw	r24, r28
    25bc:	62 e0       	ldi	r22, 0x02	; 2
    25be:	0e 94 51 10 	call	0x20a2	; 0x20a2 <LCD_8BIT_SEND_CMD>
		ret = LCD_8BIT_SEND_CMD(LCD, LCD_INCREMENT_SHIFT_OFF);
    25c2:	ce 01       	movw	r24, r28
    25c4:	66 e0       	ldi	r22, 0x06	; 6
    25c6:	0e 94 51 10 	call	0x20a2	; 0x20a2 <LCD_8BIT_SEND_CMD>
		ret = LCD_8BIT_SEND_CMD(LCD, LCD_DISPLAY_ON_CURSOR_OFF);
    25ca:	ce 01       	movw	r24, r28
    25cc:	6c e0       	ldi	r22, 0x0C	; 12
    25ce:	0e 94 51 10 	call	0x20a2	; 0x20a2 <LCD_8BIT_SEND_CMD>
		ret = LCD_8BIT_SEND_CMD(LCD, LCD_8BIT_TWO_LINE);
    25d2:	ce 01       	movw	r24, r28
    25d4:	68 e3       	ldi	r22, 0x38	; 56
    25d6:	0e 94 51 10 	call	0x20a2	; 0x20a2 <LCD_8BIT_SEND_CMD>
		ret = LCD_8BIT_SEND_CMD(LCD, LCD_SET_DDRAM_ADD);
    25da:	ce 01       	movw	r24, r28
    25dc:	60 e8       	ldi	r22, 0x80	; 128
    25de:	0e 94 51 10 	call	0x20a2	; 0x20a2 <LCD_8BIT_SEND_CMD>
	}
	return ret;
}
    25e2:	df 91       	pop	r29
    25e4:	cf 91       	pop	r28
    25e6:	1f 91       	pop	r17
    25e8:	0f 91       	pop	r16
    25ea:	ff 90       	pop	r15
    25ec:	ef 90       	pop	r14
    25ee:	df 90       	pop	r13
    25f0:	cf 90       	pop	r12
    25f2:	bf 90       	pop	r11
    25f4:	af 90       	pop	r10
    25f6:	08 95       	ret

000025f8 <LCD_4BIT_INIT>:
	}
	return ret;
}

Bool LCD_4BIT_INIT(LCD_4BIT_t *LCD)
{
    25f8:	af 92       	push	r10
    25fa:	bf 92       	push	r11
    25fc:	cf 92       	push	r12
    25fe:	df 92       	push	r13
    2600:	ef 92       	push	r14
    2602:	ff 92       	push	r15
    2604:	0f 93       	push	r16
    2606:	1f 93       	push	r17
    2608:	cf 93       	push	r28
    260a:	df 93       	push	r29
    260c:	ec 01       	movw	r28, r24
	Bool ret=E_OK;
	if(NULL==LCD)
    260e:	00 97       	sbiw	r24, 0x00	; 0
    2610:	11 f4       	brne	.+4      	; 0x2616 <LCD_4BIT_INIT+0x1e>
    2612:	80 e0       	ldi	r24, 0x00	; 0
    2614:	6d c0       	rjmp	.+218    	; 0x26f0 <LCD_4BIT_INIT+0xf8>
		ret=E_NOK;
	else
	{
		uint8 LCD_PINS=0;
		ret=Mcal_GPIO_INIT(&(LCD->LCD_E));
    2616:	01 96       	adiw	r24, 0x01	; 1
    2618:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <Mcal_GPIO_INIT>
		ret=Mcal_GPIO_INIT(&(LCD->LCD_RS));
    261c:	ce 01       	movw	r24, r28
    261e:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <Mcal_GPIO_INIT>
		ret=Mcal_GPIO_INIT(&(LCD->LCD_RW));
    2622:	ce 01       	movw	r24, r28
    2624:	02 96       	adiw	r24, 0x02	; 2
    2626:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <Mcal_GPIO_INIT>
		for(LCD_PINS=0;LCD_PINS<=LCD_4BIT_PINS-1;LCD_PINS++)
			ret=Mcal_GPIO_INIT(&LCD->LCD_Data[LCD_PINS]);
    262a:	8e 01       	movw	r16, r28
    262c:	0d 5f       	subi	r16, 0xFD	; 253
    262e:	1f 4f       	sbci	r17, 0xFF	; 255
    2630:	c8 01       	movw	r24, r16
    2632:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <Mcal_GPIO_INIT>
    2636:	a4 e0       	ldi	r26, 0x04	; 4
    2638:	ea 2e       	mov	r14, r26
    263a:	f1 2c       	mov	r15, r1
    263c:	ec 0e       	add	r14, r28
    263e:	fd 1e       	adc	r15, r29
    2640:	c7 01       	movw	r24, r14
    2642:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <Mcal_GPIO_INIT>
    2646:	f5 e0       	ldi	r31, 0x05	; 5
    2648:	cf 2e       	mov	r12, r31
    264a:	d1 2c       	mov	r13, r1
    264c:	cc 0e       	add	r12, r28
    264e:	dd 1e       	adc	r13, r29
    2650:	c6 01       	movw	r24, r12
    2652:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <Mcal_GPIO_INIT>
    2656:	e6 e0       	ldi	r30, 0x06	; 6
    2658:	ae 2e       	mov	r10, r30
    265a:	b1 2c       	mov	r11, r1
    265c:	ac 0e       	add	r10, r28
    265e:	bd 1e       	adc	r11, r29
    2660:	c5 01       	movw	r24, r10
    2662:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <Mcal_GPIO_INIT>
		for(LCD_PINS=0;LCD_PINS<=LCD_4BIT_PINS-1;LCD_PINS++)
			ret=Mcal_GPIO_WRITE(&LCD->LCD_Data[LCD_PINS],GPIO_LOW);
    2666:	c8 01       	movw	r24, r16
    2668:	60 e0       	ldi	r22, 0x00	; 0
    266a:	0e 94 7f 09 	call	0x12fe	; 0x12fe <Mcal_GPIO_WRITE>
    266e:	c7 01       	movw	r24, r14
    2670:	60 e0       	ldi	r22, 0x00	; 0
    2672:	0e 94 7f 09 	call	0x12fe	; 0x12fe <Mcal_GPIO_WRITE>
    2676:	c6 01       	movw	r24, r12
    2678:	60 e0       	ldi	r22, 0x00	; 0
    267a:	0e 94 7f 09 	call	0x12fe	; 0x12fe <Mcal_GPIO_WRITE>
    267e:	c5 01       	movw	r24, r10
    2680:	60 e0       	ldi	r22, 0x00	; 0
    2682:	0e 94 7f 09 	call	0x12fe	; 0x12fe <Mcal_GPIO_WRITE>
    2686:	88 ec       	ldi	r24, 0xC8	; 200
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	20 e9       	ldi	r18, 0x90	; 144
    268c:	31 e0       	ldi	r19, 0x01	; 1
    268e:	f9 01       	movw	r30, r18
    2690:	31 97       	sbiw	r30, 0x01	; 1
    2692:	f1 f7       	brne	.-4      	; 0x2690 <LCD_4BIT_INIT+0x98>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2694:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2696:	d9 f7       	brne	.-10     	; 0x268e <LCD_4BIT_INIT+0x96>
		_delay_ms(20);
		ret=LCD_4BIT_SEND_CMD(LCD,LCD_8BIT_TWO_LINE);
    2698:	ce 01       	movw	r24, r28
    269a:	68 e3       	ldi	r22, 0x38	; 56
    269c:	0e 94 93 11 	call	0x2326	; 0x2326 <LCD_4BIT_SEND_CMD>
    26a0:	80 e2       	ldi	r24, 0x20	; 32
    26a2:	9e e4       	ldi	r25, 0x4E	; 78
    26a4:	01 97       	sbiw	r24, 0x01	; 1
    26a6:	f1 f7       	brne	.-4      	; 0x26a4 <LCD_4BIT_INIT+0xac>
		_delay_ms(5);
		ret=LCD_4BIT_SEND_CMD(LCD,LCD_8BIT_TWO_LINE);
    26a8:	ce 01       	movw	r24, r28
    26aa:	68 e3       	ldi	r22, 0x38	; 56
    26ac:	0e 94 93 11 	call	0x2326	; 0x2326 <LCD_4BIT_SEND_CMD>
    26b0:	88 e5       	ldi	r24, 0x58	; 88
    26b2:	92 e0       	ldi	r25, 0x02	; 2
    26b4:	01 97       	sbiw	r24, 0x01	; 1
    26b6:	f1 f7       	brne	.-4      	; 0x26b4 <LCD_4BIT_INIT+0xbc>
		_delay_us(150);
		ret=LCD_4BIT_SEND_CMD(LCD,LCD_8BIT_TWO_LINE);
    26b8:	ce 01       	movw	r24, r28
    26ba:	68 e3       	ldi	r22, 0x38	; 56
    26bc:	0e 94 93 11 	call	0x2326	; 0x2326 <LCD_4BIT_SEND_CMD>

		ret=LCD_4BIT_SEND_CMD(LCD,LCD_CLEAR_DISPLAY);
    26c0:	ce 01       	movw	r24, r28
    26c2:	61 e0       	ldi	r22, 0x01	; 1
    26c4:	0e 94 93 11 	call	0x2326	; 0x2326 <LCD_4BIT_SEND_CMD>
		ret=LCD_4BIT_SEND_CMD(LCD,LCD_RETURN_HOME);
    26c8:	ce 01       	movw	r24, r28
    26ca:	62 e0       	ldi	r22, 0x02	; 2
    26cc:	0e 94 93 11 	call	0x2326	; 0x2326 <LCD_4BIT_SEND_CMD>
		ret=LCD_4BIT_SEND_CMD(LCD,LCD_INCREMENT_SHIFT_OFF);
    26d0:	ce 01       	movw	r24, r28
    26d2:	66 e0       	ldi	r22, 0x06	; 6
    26d4:	0e 94 93 11 	call	0x2326	; 0x2326 <LCD_4BIT_SEND_CMD>
		ret=LCD_4BIT_SEND_CMD(LCD,LCD_DISPLAY_ON_CURSOR_OFF);
    26d8:	ce 01       	movw	r24, r28
    26da:	6c e0       	ldi	r22, 0x0C	; 12
    26dc:	0e 94 93 11 	call	0x2326	; 0x2326 <LCD_4BIT_SEND_CMD>
		ret=LCD_4BIT_SEND_CMD(LCD,LCD_4BIT_TWO_LINE);
    26e0:	ce 01       	movw	r24, r28
    26e2:	68 e2       	ldi	r22, 0x28	; 40
    26e4:	0e 94 93 11 	call	0x2326	; 0x2326 <LCD_4BIT_SEND_CMD>
		ret=LCD_4BIT_SEND_CMD(LCD,LCD_SET_DDRAM_ADD);
    26e8:	ce 01       	movw	r24, r28
    26ea:	60 e8       	ldi	r22, 0x80	; 128
    26ec:	0e 94 93 11 	call	0x2326	; 0x2326 <LCD_4BIT_SEND_CMD>
	}
	return ret;
}
    26f0:	df 91       	pop	r29
    26f2:	cf 91       	pop	r28
    26f4:	1f 91       	pop	r17
    26f6:	0f 91       	pop	r16
    26f8:	ff 90       	pop	r15
    26fa:	ef 90       	pop	r14
    26fc:	df 90       	pop	r13
    26fe:	cf 90       	pop	r12
    2700:	bf 90       	pop	r11
    2702:	af 90       	pop	r10
    2704:	08 95       	ret

00002706 <LCD_PRINT_4BITS>:
		Counter++;
	}
}

Bool LCD_PRINT_4BITS(LCD_4BIT_t *LCD,uint8 row,uint8 col,uint8 *str,...)
{
    2706:	2f 92       	push	r2
    2708:	3f 92       	push	r3
    270a:	4f 92       	push	r4
    270c:	5f 92       	push	r5
    270e:	6f 92       	push	r6
    2710:	7f 92       	push	r7
    2712:	8f 92       	push	r8
    2714:	9f 92       	push	r9
    2716:	af 92       	push	r10
    2718:	bf 92       	push	r11
    271a:	cf 92       	push	r12
    271c:	df 92       	push	r13
    271e:	ef 92       	push	r14
    2720:	ff 92       	push	r15
    2722:	0f 93       	push	r16
    2724:	1f 93       	push	r17
    2726:	df 93       	push	r29
    2728:	cf 93       	push	r28
    272a:	cd b7       	in	r28, 0x3d	; 61
    272c:	de b7       	in	r29, 0x3e	; 62
    272e:	60 97       	sbiw	r28, 0x10	; 16
    2730:	0f b6       	in	r0, 0x3f	; 63
    2732:	f8 94       	cli
    2734:	de bf       	out	0x3e, r29	; 62
    2736:	0f be       	out	0x3f, r0	; 63
    2738:	cd bf       	out	0x3d, r28	; 61
    273a:	bb e2       	ldi	r27, 0x2B	; 43
    273c:	eb 2e       	mov	r14, r27
    273e:	f1 2c       	mov	r15, r1
    2740:	ec 0e       	add	r14, r28
    2742:	fd 1e       	adc	r15, r29
	Bool E_stat=E_OK;
	Bool flag=0;
	va_list valist;
	va_start(valist, str);
	uint8 Counter=0;
	E_stat=LCD_4BIT_SET_POS(LCD,row,col);
    2744:	8d a1       	ldd	r24, Y+37	; 0x25
    2746:	9e a1       	ldd	r25, Y+38	; 0x26
    2748:	6f a1       	ldd	r22, Y+39	; 0x27
    274a:	48 a5       	ldd	r20, Y+40	; 0x28
    274c:	0e 94 b9 11 	call	0x2372	; 0x2372 <LCD_4BIT_SET_POS>
    2750:	8e 87       	std	Y+14, r24	; 0x0e
    2752:	66 24       	eor	r6, r6
		Int_part/=10;
		LEN++;
	}
	*(Str+Counter)='\0';
	Counter=0;
	while(Float_part!=0&&Counter<6)
    2754:	ce 01       	movw	r24, r28
    2756:	07 96       	adiw	r24, 0x07	; 7
    2758:	98 8b       	std	Y+16, r25	; 0x10
    275a:	8f 87       	std	Y+15, r24	; 0x0f
    275c:	f7 c0       	rjmp	.+494    	; 0x294c <LCD_PRINT_4BITS+0x246>
	va_start(valist, str);
	uint8 Counter=0;
	E_stat=LCD_4BIT_SET_POS(LCD,row,col);
	while((*(str+Counter))&&(Counter<=MAX_CHARS))
	{
		if(Counter==16)
    275e:	90 e1       	ldi	r25, 0x10	; 16
    2760:	69 16       	cp	r6, r25
    2762:	39 f4       	brne	.+14     	; 0x2772 <LCD_PRINT_4BITS+0x6c>
			E_stat=LCD_4BIT_SET_POS(LCD,2,0);
    2764:	8d a1       	ldd	r24, Y+37	; 0x25
    2766:	9e a1       	ldd	r25, Y+38	; 0x26
    2768:	62 e0       	ldi	r22, 0x02	; 2
    276a:	40 e0       	ldi	r20, 0x00	; 0
    276c:	0e 94 b9 11 	call	0x2372	; 0x2372 <LCD_4BIT_SET_POS>
    2770:	8e 87       	std	Y+14, r24	; 0x0e
		if(*(str+Counter)!='%')
    2772:	d8 01       	movw	r26, r16
    2774:	6c 91       	ld	r22, X
    2776:	65 32       	cpi	r22, 0x25	; 37
    2778:	31 f0       	breq	.+12     	; 0x2786 <LCD_PRINT_4BITS+0x80>
			E_stat=LCD_4BIT_SEND(LCD,*(str+Counter));
    277a:	8d a1       	ldd	r24, Y+37	; 0x25
    277c:	9e a1       	ldd	r25, Y+38	; 0x26
    277e:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <LCD_4BIT_SEND>
    2782:	8e 87       	std	Y+14, r24	; 0x0e
    2784:	e2 c0       	rjmp	.+452    	; 0x294a <LCD_PRINT_4BITS+0x244>
		else if(*(str+Counter)=='%')
		{
			Counter++;
    2786:	63 94       	inc	r6
			flag=1;
			uint8 Str[11];
			if(*(str+Counter)=='d')
    2788:	e9 a5       	ldd	r30, Y+41	; 0x29
    278a:	fa a5       	ldd	r31, Y+42	; 0x2a
    278c:	e6 0d       	add	r30, r6
    278e:	f1 1d       	adc	r31, r1
    2790:	e0 81       	ld	r30, Z
    2792:	e4 36       	cpi	r30, 0x64	; 100
    2794:	61 f4       	brne	.+24     	; 0x27ae <LCD_PRINT_4BITS+0xa8>
			{
				int16 Arg=va_arg(valist,int);
    2796:	87 01       	movw	r16, r14
    2798:	0e 5f       	subi	r16, 0xFE	; 254
    279a:	1f 4f       	sbci	r17, 0xFF	; 255
				convert_short_to_string(Arg,Str);
    279c:	f7 01       	movw	r30, r14
    279e:	80 81       	ld	r24, Z
    27a0:	91 81       	ldd	r25, Z+1	; 0x01
    27a2:	be 01       	movw	r22, r28
    27a4:	6f 5f       	subi	r22, 0xFF	; 255
    27a6:	7f 4f       	sbci	r23, 0xFF	; 255
    27a8:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <convert_short_to_string>
    27ac:	1e c0       	rjmp	.+60     	; 0x27ea <LCD_PRINT_4BITS+0xe4>
				LCD_4BIT_SEND_STRING(LCD,Str);
			}
			else if(*(str+Counter)=='c')
    27ae:	e3 36       	cpi	r30, 0x63	; 99
    27b0:	59 f4       	brne	.+22     	; 0x27c8 <LCD_PRINT_4BITS+0xc2>
			{
				int8 Arg = va_arg(valist, int);
    27b2:	87 01       	movw	r16, r14
    27b4:	0e 5f       	subi	r16, 0xFE	; 254
    27b6:	1f 4f       	sbci	r17, 0xFF	; 255
				LCD_4BIT_SEND(LCD,Arg);
    27b8:	8d a1       	ldd	r24, Y+37	; 0x25
    27ba:	9e a1       	ldd	r25, Y+38	; 0x26
    27bc:	d7 01       	movw	r26, r14
    27be:	6c 91       	ld	r22, X
    27c0:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <LCD_4BIT_SEND>
    27c4:	78 01       	movw	r14, r16
    27c6:	c1 c0       	rjmp	.+386    	; 0x294a <LCD_PRINT_4BITS+0x244>
			}
			else if(*(str+Counter)=='l')
    27c8:	ec 36       	cpi	r30, 0x6C	; 108
    27ca:	b9 f4       	brne	.+46     	; 0x27fa <LCD_PRINT_4BITS+0xf4>
			{
				int32 Arg = va_arg(valist, int);
    27cc:	87 01       	movw	r16, r14
    27ce:	0e 5f       	subi	r16, 0xFE	; 254
    27d0:	1f 4f       	sbci	r17, 0xFF	; 255
				convert_int_to_string(Arg, Str);
    27d2:	f7 01       	movw	r30, r14
    27d4:	60 81       	ld	r22, Z
    27d6:	71 81       	ldd	r23, Z+1	; 0x01
    27d8:	88 27       	eor	r24, r24
    27da:	77 fd       	sbrc	r23, 7
    27dc:	80 95       	com	r24
    27de:	98 2f       	mov	r25, r24
    27e0:	ae 01       	movw	r20, r28
    27e2:	4f 5f       	subi	r20, 0xFF	; 255
    27e4:	5f 4f       	sbci	r21, 0xFF	; 255
    27e6:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <convert_int_to_string>
				LCD_4BIT_SEND_STRING(LCD, Str);
    27ea:	8d a1       	ldd	r24, Y+37	; 0x25
    27ec:	9e a1       	ldd	r25, Y+38	; 0x26
    27ee:	be 01       	movw	r22, r28
    27f0:	6f 5f       	subi	r22, 0xFF	; 255
    27f2:	7f 4f       	sbci	r23, 0xFF	; 255
    27f4:	0e 94 44 12 	call	0x2488	; 0x2488 <LCD_4BIT_SEND_STRING>
    27f8:	e5 cf       	rjmp	.-54     	; 0x27c4 <LCD_PRINT_4BITS+0xbe>
			}
			else if(*(str+Counter)=='f')
    27fa:	e6 36       	cpi	r30, 0x66	; 102
    27fc:	09 f0       	breq	.+2      	; 0x2800 <LCD_PRINT_4BITS+0xfa>
    27fe:	a5 c0       	rjmp	.+330    	; 0x294a <LCD_PRINT_4BITS+0x244>
			{
				Arg = va_arg(valist, double);
    2800:	c7 01       	movw	r24, r14
    2802:	04 96       	adiw	r24, 0x04	; 4
    2804:	9d 87       	std	Y+13, r25	; 0x0d
    2806:	8c 87       	std	Y+12, r24	; 0x0c
    2808:	d7 01       	movw	r26, r14
    280a:	8d 90       	ld	r8, X+
    280c:	9d 90       	ld	r9, X+
    280e:	ad 90       	ld	r10, X+
    2810:	bc 90       	ld	r11, X
    2812:	80 92 dc 01 	sts	0x01DC, r8
    2816:	90 92 dd 01 	sts	0x01DD, r9
    281a:	a0 92 de 01 	sts	0x01DE, r10
    281e:	b0 92 df 01 	sts	0x01DF, r11

static void float_string(float Num,int8 *Str)
{
	uint8 Counter=7;
	uint8 LEN=0;
	int32 Int_part=(int32)Num;
    2822:	c5 01       	movw	r24, r10
    2824:	b4 01       	movw	r22, r8
    2826:	0e 94 4b 03 	call	0x696	; 0x696 <__fixsfsi>
    282a:	1b 01       	movw	r2, r22
    282c:	2c 01       	movw	r4, r24
    282e:	7b 01       	movw	r14, r22
    2830:	8c 01       	movw	r16, r24
    2832:	77 24       	eor	r7, r7
    2834:	1e c0       	rjmp	.+60     	; 0x2872 <LCD_PRINT_4BITS+0x16c>
	int32 Float_part=((float)(Num)-(int32)Num)*1000000;
	while(Int_part!=0)
	{
		*(Str+Counter++)=Int_part%10+'0';
    2836:	e1 e0       	ldi	r30, 0x01	; 1
    2838:	f0 e0       	ldi	r31, 0x00	; 0
    283a:	ec 0f       	add	r30, r28
    283c:	fd 1f       	adc	r31, r29
    283e:	ce 0e       	add	r12, r30
    2840:	df 1e       	adc	r13, r31
    2842:	c8 01       	movw	r24, r16
    2844:	b7 01       	movw	r22, r14
    2846:	2a e0       	ldi	r18, 0x0A	; 10
    2848:	30 e0       	ldi	r19, 0x00	; 0
    284a:	40 e0       	ldi	r20, 0x00	; 0
    284c:	50 e0       	ldi	r21, 0x00	; 0
    284e:	0e 94 36 19 	call	0x326c	; 0x326c <__divmodsi4>
    2852:	60 5d       	subi	r22, 0xD0	; 208
    2854:	d6 01       	movw	r26, r12
    2856:	6c 93       	st	X, r22
		Int_part/=10;
    2858:	c8 01       	movw	r24, r16
    285a:	b7 01       	movw	r22, r14
    285c:	2a e0       	ldi	r18, 0x0A	; 10
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	40 e0       	ldi	r20, 0x00	; 0
    2862:	50 e0       	ldi	r21, 0x00	; 0
    2864:	0e 94 36 19 	call	0x326c	; 0x326c <__divmodsi4>
    2868:	c9 01       	movw	r24, r18
    286a:	da 01       	movw	r26, r20
    286c:	7c 01       	movw	r14, r24
    286e:	8d 01       	movw	r16, r26
		LEN++;
    2870:	73 94       	inc	r7
    2872:	b7 e0       	ldi	r27, 0x07	; 7
    2874:	7b 0e       	add	r7, r27
    2876:	c7 2c       	mov	r12, r7
    2878:	dd 24       	eor	r13, r13
    287a:	e9 ef       	ldi	r30, 0xF9	; 249
    287c:	7e 0e       	add	r7, r30
{
	uint8 Counter=7;
	uint8 LEN=0;
	int32 Int_part=(int32)Num;
	int32 Float_part=((float)(Num)-(int32)Num)*1000000;
	while(Int_part!=0)
    287e:	e1 14       	cp	r14, r1
    2880:	f1 04       	cpc	r15, r1
    2882:	01 05       	cpc	r16, r1
    2884:	11 05       	cpc	r17, r1
    2886:	b9 f6       	brne	.-82     	; 0x2836 <LCD_PRINT_4BITS+0x130>
static void float_string(float Num,int8 *Str)
{
	uint8 Counter=7;
	uint8 LEN=0;
	int32 Int_part=(int32)Num;
	int32 Float_part=((float)(Num)-(int32)Num)*1000000;
    2888:	c2 01       	movw	r24, r4
    288a:	b1 01       	movw	r22, r2
    288c:	0e 94 ed 02 	call	0x5da	; 0x5da <__floatsisf>
    2890:	9b 01       	movw	r18, r22
    2892:	ac 01       	movw	r20, r24
    2894:	c5 01       	movw	r24, r10
    2896:	b4 01       	movw	r22, r8
    2898:	0e 94 95 01 	call	0x32a	; 0x32a <__subsf3>
    289c:	20 e0       	ldi	r18, 0x00	; 0
    289e:	34 e2       	ldi	r19, 0x24	; 36
    28a0:	44 e7       	ldi	r20, 0x74	; 116
    28a2:	59 e4       	ldi	r21, 0x49	; 73
    28a4:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__mulsf3>
    28a8:	0e 94 4b 03 	call	0x696	; 0x696 <__fixsfsi>
    28ac:	7b 01       	movw	r14, r22
    28ae:	8c 01       	movw	r16, r24
	{
		*(Str+Counter++)=Int_part%10+'0';
		Int_part/=10;
		LEN++;
	}
	*(Str+Counter)='\0';
    28b0:	81 e0       	ldi	r24, 0x01	; 1
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	8c 0f       	add	r24, r28
    28b6:	9d 1f       	adc	r25, r29
    28b8:	c8 0e       	add	r12, r24
    28ba:	d9 1e       	adc	r13, r25
    28bc:	d6 01       	movw	r26, r12
    28be:	1c 92       	st	X, r1
    28c0:	5c 01       	movw	r10, r24
    28c2:	6c 01       	movw	r12, r24
    28c4:	19 c0       	rjmp	.+50     	; 0x28f8 <LCD_PRINT_4BITS+0x1f2>
	Counter=0;
	while(Float_part!=0&&Counter<6)
	{
		*(Str+Counter++)=Float_part%10+'0';
    28c6:	c8 01       	movw	r24, r16
    28c8:	b7 01       	movw	r22, r14
    28ca:	2a e0       	ldi	r18, 0x0A	; 10
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	40 e0       	ldi	r20, 0x00	; 0
    28d0:	50 e0       	ldi	r21, 0x00	; 0
    28d2:	0e 94 36 19 	call	0x326c	; 0x326c <__divmodsi4>
    28d6:	60 5d       	subi	r22, 0xD0	; 208
    28d8:	f6 01       	movw	r30, r12
    28da:	61 93       	st	Z+, r22
    28dc:	6f 01       	movw	r12, r30
		Float_part/=10;
    28de:	c8 01       	movw	r24, r16
    28e0:	b7 01       	movw	r22, r14
    28e2:	2a e0       	ldi	r18, 0x0A	; 10
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	40 e0       	ldi	r20, 0x00	; 0
    28e8:	50 e0       	ldi	r21, 0x00	; 0
    28ea:	0e 94 36 19 	call	0x326c	; 0x326c <__divmodsi4>
    28ee:	c9 01       	movw	r24, r18
    28f0:	da 01       	movw	r26, r20
    28f2:	7c 01       	movw	r14, r24
    28f4:	8d 01       	movw	r16, r26
		LEN++;
    28f6:	73 94       	inc	r7
		Int_part/=10;
		LEN++;
	}
	*(Str+Counter)='\0';
	Counter=0;
	while(Float_part!=0&&Counter<6)
    28f8:	e1 14       	cp	r14, r1
    28fa:	f1 04       	cpc	r15, r1
    28fc:	01 05       	cpc	r16, r1
    28fe:	11 05       	cpc	r17, r1
    2900:	29 f0       	breq	.+10     	; 0x290c <LCD_PRINT_4BITS+0x206>
    2902:	8f 85       	ldd	r24, Y+15	; 0x0f
    2904:	98 89       	ldd	r25, Y+16	; 0x10
    2906:	c8 16       	cp	r12, r24
    2908:	d9 06       	cpc	r13, r25
    290a:	e9 f6       	brne	.-70     	; 0x28c6 <LCD_PRINT_4BITS+0x1c0>
	{
		*(Str+Counter++)=Float_part%10+'0';
		Float_part/=10;
		LEN++;
	}
	*(Str+6)='.';
    290c:	9e e2       	ldi	r25, 0x2E	; 46
    290e:	9f 83       	std	Y+7, r25	; 0x07
	Counter=0;
	while(Counter<LEN/2)
    2910:	37 2d       	mov	r19, r7
    2912:	36 95       	lsr	r19
    2914:	e1 e0       	ldi	r30, 0x01	; 1
    2916:	f0 e0       	ldi	r31, 0x00	; 0
    2918:	ec 0f       	add	r30, r28
    291a:	fd 1f       	adc	r31, r29
    291c:	e7 0d       	add	r30, r7
    291e:	f1 1d       	adc	r31, r1
    2920:	20 e0       	ldi	r18, 0x00	; 0
    2922:	08 c0       	rjmp	.+16     	; 0x2934 <LCD_PRINT_4BITS+0x22e>
	{
		uint8 Temp=*(Str+Counter);
    2924:	d5 01       	movw	r26, r10
    2926:	9c 91       	ld	r25, X
		*(Str+Counter)=*(Str+LEN-Counter);
    2928:	80 81       	ld	r24, Z
    292a:	8d 93       	st	X+, r24
    292c:	5d 01       	movw	r10, r26
		*(Str+LEN-Counter)=Temp;
    292e:	90 83       	st	Z, r25
		Counter++;
    2930:	2f 5f       	subi	r18, 0xFF	; 255
    2932:	31 97       	sbiw	r30, 0x01	; 1
		Float_part/=10;
		LEN++;
	}
	*(Str+6)='.';
	Counter=0;
	while(Counter<LEN/2)
    2934:	23 17       	cp	r18, r19
    2936:	b0 f3       	brcs	.-20     	; 0x2924 <LCD_PRINT_4BITS+0x21e>
			}
			else if(*(str+Counter)=='f')
			{
				Arg = va_arg(valist, double);
				float_string(Arg,Str);
				LCD_4BIT_SEND_STRING(LCD, Str);
    2938:	8d a1       	ldd	r24, Y+37	; 0x25
    293a:	9e a1       	ldd	r25, Y+38	; 0x26
    293c:	be 01       	movw	r22, r28
    293e:	6f 5f       	subi	r22, 0xFF	; 255
    2940:	7f 4f       	sbci	r23, 0xFF	; 255
    2942:	0e 94 44 12 	call	0x2488	; 0x2488 <LCD_4BIT_SEND_STRING>
    2946:	ec 84       	ldd	r14, Y+12	; 0x0c
    2948:	fd 84       	ldd	r15, Y+13	; 0x0d
			}
		}
		else
			LCD_4BIT_SEND(LCD,*(str+Counter));
		Counter++;
    294a:	63 94       	inc	r6
	Bool flag=0;
	va_list valist;
	va_start(valist, str);
	uint8 Counter=0;
	E_stat=LCD_4BIT_SET_POS(LCD,row,col);
	while((*(str+Counter))&&(Counter<=MAX_CHARS))
    294c:	09 a5       	ldd	r16, Y+41	; 0x29
    294e:	1a a5       	ldd	r17, Y+42	; 0x2a
    2950:	06 0d       	add	r16, r6
    2952:	11 1d       	adc	r17, r1
    2954:	f8 01       	movw	r30, r16
    2956:	80 81       	ld	r24, Z
    2958:	88 23       	and	r24, r24
    295a:	21 f0       	breq	.+8      	; 0x2964 <LCD_PRINT_4BITS+0x25e>
    295c:	ff e1       	ldi	r31, 0x1F	; 31
    295e:	f6 15       	cp	r31, r6
    2960:	08 f0       	brcs	.+2      	; 0x2964 <LCD_PRINT_4BITS+0x25e>
    2962:	fd ce       	rjmp	.-518    	; 0x275e <LCD_PRINT_4BITS+0x58>
		else
			LCD_4BIT_SEND(LCD,*(str+Counter));
		Counter++;
	}
	return E_stat;
}
    2964:	8e 85       	ldd	r24, Y+14	; 0x0e
    2966:	60 96       	adiw	r28, 0x10	; 16
    2968:	0f b6       	in	r0, 0x3f	; 63
    296a:	f8 94       	cli
    296c:	de bf       	out	0x3e, r29	; 62
    296e:	0f be       	out	0x3f, r0	; 63
    2970:	cd bf       	out	0x3d, r28	; 61
    2972:	cf 91       	pop	r28
    2974:	df 91       	pop	r29
    2976:	1f 91       	pop	r17
    2978:	0f 91       	pop	r16
    297a:	ff 90       	pop	r15
    297c:	ef 90       	pop	r14
    297e:	df 90       	pop	r13
    2980:	cf 90       	pop	r12
    2982:	bf 90       	pop	r11
    2984:	af 90       	pop	r10
    2986:	9f 90       	pop	r9
    2988:	8f 90       	pop	r8
    298a:	7f 90       	pop	r7
    298c:	6f 90       	pop	r6
    298e:	5f 90       	pop	r5
    2990:	4f 90       	pop	r4
    2992:	3f 90       	pop	r3
    2994:	2f 90       	pop	r2
    2996:	08 95       	ret

00002998 <Convert_digs>:
	SPI_SET_SS();
	return ret;
}

static void Convert_digs(int32 Num,uint8 Arr[])
{
    2998:	bf 92       	push	r11
    299a:	cf 92       	push	r12
    299c:	df 92       	push	r13
    299e:	ef 92       	push	r14
    29a0:	ff 92       	push	r15
    29a2:	0f 93       	push	r16
    29a4:	1f 93       	push	r17
    29a6:	cf 93       	push	r28
    29a8:	df 93       	push	r29
    29aa:	6b 01       	movw	r12, r22
    29ac:	7c 01       	movw	r14, r24
    29ae:	ea 01       	movw	r28, r20
    29b0:	bb 24       	eor	r11, r11
    29b2:	1a c0       	rjmp	.+52     	; 0x29e8 <Convert_digs+0x50>
	int8 size=0;
	while(Num!=0)
	{
		Arr[size++]=Num%10;
    29b4:	8e 01       	movw	r16, r28
    29b6:	0b 0d       	add	r16, r11
    29b8:	11 1d       	adc	r17, r1
    29ba:	c7 01       	movw	r24, r14
    29bc:	b6 01       	movw	r22, r12
    29be:	2a e0       	ldi	r18, 0x0A	; 10
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	40 e0       	ldi	r20, 0x00	; 0
    29c4:	50 e0       	ldi	r21, 0x00	; 0
    29c6:	0e 94 36 19 	call	0x326c	; 0x326c <__divmodsi4>
    29ca:	f8 01       	movw	r30, r16
    29cc:	60 83       	st	Z, r22
    29ce:	b3 94       	inc	r11
		Num/=10;
    29d0:	c7 01       	movw	r24, r14
    29d2:	b6 01       	movw	r22, r12
    29d4:	2a e0       	ldi	r18, 0x0A	; 10
    29d6:	30 e0       	ldi	r19, 0x00	; 0
    29d8:	40 e0       	ldi	r20, 0x00	; 0
    29da:	50 e0       	ldi	r21, 0x00	; 0
    29dc:	0e 94 36 19 	call	0x326c	; 0x326c <__divmodsi4>
    29e0:	c9 01       	movw	r24, r18
    29e2:	da 01       	movw	r26, r20
    29e4:	6c 01       	movw	r12, r24
    29e6:	7d 01       	movw	r14, r26
}

static void Convert_digs(int32 Num,uint8 Arr[])
{
	int8 size=0;
	while(Num!=0)
    29e8:	c1 14       	cp	r12, r1
    29ea:	d1 04       	cpc	r13, r1
    29ec:	e1 04       	cpc	r14, r1
    29ee:	f1 04       	cpc	r15, r1
    29f0:	09 f7       	brne	.-62     	; 0x29b4 <Convert_digs+0x1c>
	{
		Arr[size++]=Num%10;
		Num/=10;
	}
}
    29f2:	df 91       	pop	r29
    29f4:	cf 91       	pop	r28
    29f6:	1f 91       	pop	r17
    29f8:	0f 91       	pop	r16
    29fa:	ff 90       	pop	r15
    29fc:	ef 90       	pop	r14
    29fe:	df 90       	pop	r13
    2a00:	cf 90       	pop	r12
    2a02:	bf 90       	pop	r11
    2a04:	08 95       	ret

00002a06 <no_digits>:
	Max7219_Send_DArr(DIGIT_1, MAX721DIG[0],2);
	Max7219_Send_DArr(DIGIT_0, MAX721DIG[0],2);
}

static uint8_t no_digits(int32_t data)
{
    2a06:	cf 93       	push	r28
    2a08:	df 93       	push	r29
    2a0a:	c0 e0       	ldi	r28, 0x00	; 0
    2a0c:	d0 e0       	ldi	r29, 0x00	; 0
    2a0e:	0b c0       	rjmp	.+22     	; 0x2a26 <no_digits+0x20>
	int len=0;
	while(data!=0)
	{
		data/=10;
    2a10:	2a e0       	ldi	r18, 0x0A	; 10
    2a12:	30 e0       	ldi	r19, 0x00	; 0
    2a14:	40 e0       	ldi	r20, 0x00	; 0
    2a16:	50 e0       	ldi	r21, 0x00	; 0
    2a18:	0e 94 36 19 	call	0x326c	; 0x326c <__divmodsi4>
    2a1c:	c9 01       	movw	r24, r18
    2a1e:	da 01       	movw	r26, r20
    2a20:	bc 01       	movw	r22, r24
    2a22:	cd 01       	movw	r24, r26
		len++;
    2a24:	21 96       	adiw	r28, 0x01	; 1
}

static uint8_t no_digits(int32_t data)
{
	int len=0;
	while(data!=0)
    2a26:	61 15       	cp	r22, r1
    2a28:	71 05       	cpc	r23, r1
    2a2a:	81 05       	cpc	r24, r1
    2a2c:	91 05       	cpc	r25, r1
    2a2e:	81 f7       	brne	.-32     	; 0x2a10 <no_digits+0xa>
	{
		data/=10;
		len++;
	}
	return len;
}
    2a30:	8c 2f       	mov	r24, r28
    2a32:	df 91       	pop	r29
    2a34:	cf 91       	pop	r28
    2a36:	08 95       	ret

00002a38 <MAX7219_SEND_Data>:
		Max7219_Send_DArr_Ddata(Counter, Arr, 2,&flag,&flag_2);
	}
}

Bool MAX7219_SEND_Data(uint8 Address,uint8 Data)
{
    2a38:	1f 93       	push	r17
    2a3a:	16 2f       	mov	r17, r22
	Bool ret=E_OK;
	SPI_CLEAR_SS();
    2a3c:	c4 98       	cbi	0x18, 4	; 24
	SPI_SEND_BYTE(Address);
    2a3e:	0e 94 48 0b 	call	0x1690	; 0x1690 <SPI_SEND_BYTE>
	SPI_SEND_BYTE(Data);
    2a42:	81 2f       	mov	r24, r17
    2a44:	0e 94 48 0b 	call	0x1690	; 0x1690 <SPI_SEND_BYTE>
	SPI_SET_SS();
    2a48:	c4 9a       	sbi	0x18, 4	; 24
	return ret;
}
    2a4a:	81 e0       	ldi	r24, 0x01	; 1
    2a4c:	1f 91       	pop	r17
    2a4e:	08 95       	ret

00002a50 <CLEAR_DISPLAY>:

static void CLEAR_DISPLAY()
{
	MAX7219_SEND_Data(DIGIT_7, MAX721DIG[0]);
    2a50:	88 e0       	ldi	r24, 0x08	; 8
    2a52:	6e e7       	ldi	r22, 0x7E	; 126
    2a54:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <MAX7219_SEND_Data>
	MAX7219_SEND_Data(DIGIT_6, MAX721DIG[0]);
    2a58:	87 e0       	ldi	r24, 0x07	; 7
    2a5a:	6e e7       	ldi	r22, 0x7E	; 126
    2a5c:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <MAX7219_SEND_Data>
	MAX7219_SEND_Data(DIGIT_5, MAX721DIG[0]);
    2a60:	86 e0       	ldi	r24, 0x06	; 6
    2a62:	6e e7       	ldi	r22, 0x7E	; 126
    2a64:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <MAX7219_SEND_Data>
	MAX7219_SEND_Data(DIGIT_4, MAX721DIG[0]);
    2a68:	85 e0       	ldi	r24, 0x05	; 5
    2a6a:	6e e7       	ldi	r22, 0x7E	; 126
    2a6c:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <MAX7219_SEND_Data>
	MAX7219_SEND_Data(DIGIT_3, MAX721DIG[0]);
    2a70:	84 e0       	ldi	r24, 0x04	; 4
    2a72:	6e e7       	ldi	r22, 0x7E	; 126
    2a74:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <MAX7219_SEND_Data>
	MAX7219_SEND_Data(DIGIT_2, MAX721DIG[0]);
    2a78:	83 e0       	ldi	r24, 0x03	; 3
    2a7a:	6e e7       	ldi	r22, 0x7E	; 126
    2a7c:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <MAX7219_SEND_Data>
	MAX7219_SEND_Data(DIGIT_1, MAX721DIG[0]);
    2a80:	82 e0       	ldi	r24, 0x02	; 2
    2a82:	6e e7       	ldi	r22, 0x7E	; 126
    2a84:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <MAX7219_SEND_Data>
	MAX7219_SEND_Data(DIGIT_0, MAX721DIG[0]);
    2a88:	81 e0       	ldi	r24, 0x01	; 1
    2a8a:	6e e7       	ldi	r22, 0x7E	; 126
    2a8c:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <MAX7219_SEND_Data>
}
    2a90:	08 95       	ret

00002a92 <MAX7219Disp_float>:
			}
		}
}

void MAX7219Disp_float(float Val,Bool Temp_flag)
{
    2a92:	9f 92       	push	r9
    2a94:	af 92       	push	r10
    2a96:	bf 92       	push	r11
    2a98:	cf 92       	push	r12
    2a9a:	df 92       	push	r13
    2a9c:	ef 92       	push	r14
    2a9e:	ff 92       	push	r15
    2aa0:	0f 93       	push	r16
    2aa2:	1f 93       	push	r17
    2aa4:	cf 93       	push	r28
    2aa6:	df 93       	push	r29
    2aa8:	94 2e       	mov	r9, r20
	int32 int_val=Val*1000;
    2aaa:	20 e0       	ldi	r18, 0x00	; 0
    2aac:	30 e0       	ldi	r19, 0x00	; 0
    2aae:	4a e7       	ldi	r20, 0x7A	; 122
    2ab0:	54 e4       	ldi	r21, 0x44	; 68
    2ab2:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__mulsf3>
    2ab6:	0e 94 4b 03 	call	0x696	; 0x696 <__fixsfsi>
    2aba:	7b 01       	movw	r14, r22
    2abc:	8c 01       	movw	r16, r24
    2abe:	5b 01       	movw	r10, r22
    2ac0:	68 01       	movw	r12, r16
	CLEAR_DISPLAY();
    2ac2:	0e 94 28 15 	call	0x2a50	; 0x2a50 <CLEAR_DISPLAY>
	uint8_t dig = no_digits(int_val);
    2ac6:	b7 01       	movw	r22, r14
    2ac8:	c8 01       	movw	r24, r16
    2aca:	0e 94 03 15 	call	0x2a06	; 0x2a06 <no_digits>
    2ace:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t Cnt = 0;
	for (Cnt = 0; Cnt <= dig - 1; Cnt++) {
    2ad0:	c8 2f       	mov	r28, r24
    2ad2:	d0 e0       	ldi	r29, 0x00	; 0
    2ad4:	37 c0       	rjmp	.+110    	; 0x2b44 <MAX7219Disp_float+0xb2>
		if(Cnt==0&&Temp_flag)
    2ad6:	11 23       	and	r17, r17
    2ad8:	29 f4       	brne	.+10     	; 0x2ae4 <MAX7219Disp_float+0x52>
    2ada:	99 20       	and	r9, r9
    2adc:	b1 f0       	breq	.+44     	; 0x2b0a <MAX7219Disp_float+0x78>
			MAX7219_SEND_Data(Cnt + 1, MAX721DIG[12]);
    2ade:	81 e0       	ldi	r24, 0x01	; 1
    2ae0:	6e e4       	ldi	r22, 0x4E	; 78
    2ae2:	23 c0       	rjmp	.+70     	; 0x2b2a <MAX7219Disp_float+0x98>
		else if(Cnt==3)
    2ae4:	13 30       	cpi	r17, 0x03	; 3
    2ae6:	89 f4       	brne	.+34     	; 0x2b0a <MAX7219Disp_float+0x78>
			MAX7219_SEND_Data(Cnt + 1, (MAX721DIG[(int_val % 10)]|0x80));
    2ae8:	b5 01       	movw	r22, r10
    2aea:	c6 01       	movw	r24, r12
    2aec:	2a e0       	ldi	r18, 0x0A	; 10
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	40 e0       	ldi	r20, 0x00	; 0
    2af2:	50 e0       	ldi	r21, 0x00	; 0
    2af4:	0e 94 36 19 	call	0x326c	; 0x326c <__divmodsi4>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	89 56       	subi	r24, 0x69	; 105
    2afe:	9e 4f       	sbci	r25, 0xFE	; 254
    2b00:	fc 01       	movw	r30, r24
    2b02:	60 81       	ld	r22, Z
    2b04:	60 68       	ori	r22, 0x80	; 128
    2b06:	84 e0       	ldi	r24, 0x04	; 4
    2b08:	10 c0       	rjmp	.+32     	; 0x2b2a <MAX7219Disp_float+0x98>
		else
			MAX7219_SEND_Data(Cnt + 1, MAX721DIG[int_val % 10]);
    2b0a:	b5 01       	movw	r22, r10
    2b0c:	c6 01       	movw	r24, r12
    2b0e:	2a e0       	ldi	r18, 0x0A	; 10
    2b10:	30 e0       	ldi	r19, 0x00	; 0
    2b12:	40 e0       	ldi	r20, 0x00	; 0
    2b14:	50 e0       	ldi	r21, 0x00	; 0
    2b16:	0e 94 36 19 	call	0x326c	; 0x326c <__divmodsi4>
    2b1a:	9b 01       	movw	r18, r22
    2b1c:	ac 01       	movw	r20, r24
    2b1e:	29 56       	subi	r18, 0x69	; 105
    2b20:	3e 4f       	sbci	r19, 0xFE	; 254
    2b22:	81 2f       	mov	r24, r17
    2b24:	8f 5f       	subi	r24, 0xFF	; 255
    2b26:	f9 01       	movw	r30, r18
    2b28:	60 81       	ld	r22, Z
    2b2a:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <MAX7219_SEND_Data>
		int_val /= 10;
    2b2e:	b5 01       	movw	r22, r10
    2b30:	c6 01       	movw	r24, r12
    2b32:	2a e0       	ldi	r18, 0x0A	; 10
    2b34:	30 e0       	ldi	r19, 0x00	; 0
    2b36:	40 e0       	ldi	r20, 0x00	; 0
    2b38:	50 e0       	ldi	r21, 0x00	; 0
    2b3a:	0e 94 36 19 	call	0x326c	; 0x326c <__divmodsi4>
    2b3e:	59 01       	movw	r10, r18
    2b40:	6a 01       	movw	r12, r20
{
	int32 int_val=Val*1000;
	CLEAR_DISPLAY();
	uint8_t dig = no_digits(int_val);
	uint8_t Cnt = 0;
	for (Cnt = 0; Cnt <= dig - 1; Cnt++) {
    2b42:	1f 5f       	subi	r17, 0xFF	; 255
    2b44:	81 2f       	mov	r24, r17
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	8c 17       	cp	r24, r28
    2b4a:	9d 07       	cpc	r25, r29
    2b4c:	24 f2       	brlt	.-120    	; 0x2ad6 <MAX7219Disp_float+0x44>
			MAX7219_SEND_Data(Cnt + 1, (MAX721DIG[(int_val % 10)]|0x80));
		else
			MAX7219_SEND_Data(Cnt + 1, MAX721DIG[int_val % 10]);
		int_val /= 10;
	}
}
    2b4e:	df 91       	pop	r29
    2b50:	cf 91       	pop	r28
    2b52:	1f 91       	pop	r17
    2b54:	0f 91       	pop	r16
    2b56:	ff 90       	pop	r15
    2b58:	ef 90       	pop	r14
    2b5a:	df 90       	pop	r13
    2b5c:	cf 90       	pop	r12
    2b5e:	bf 90       	pop	r11
    2b60:	af 90       	pop	r10
    2b62:	9f 90       	pop	r9
    2b64:	08 95       	ret

00002b66 <MAX7219Disp_string>:
	}
	return len;
}

void MAX7219Disp_string(char *str)
{
    2b66:	0f 93       	push	r16
    2b68:	1f 93       	push	r17
    2b6a:	cf 93       	push	r28
    2b6c:	df 93       	push	r29
    2b6e:	ec 01       	movw	r28, r24
		if(str!=NULL)
    2b70:	00 97       	sbiw	r24, 0x00	; 0
    2b72:	11 f1       	breq	.+68     	; 0x2bb8 <MAX7219Disp_string+0x52>
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	01 c0       	rjmp	.+2      	; 0x2b7a <MAX7219Disp_string+0x14>
	if(str!=NULL)
	{
		uint8 i=0;
		while(*(str+i)!='\0')
		{
			len++;
    2b78:	9f 5f       	subi	r25, 0xFF	; 255
{
	uint8 len=0;
	if(str!=NULL)
	{
		uint8 i=0;
		while(*(str+i)!='\0')
    2b7a:	fe 01       	movw	r30, r28
    2b7c:	e9 0f       	add	r30, r25
    2b7e:	f1 1d       	adc	r31, r1
    2b80:	80 81       	ld	r24, Z
    2b82:	88 23       	and	r24, r24
    2b84:	c9 f7       	brne	.-14     	; 0x2b78 <MAX7219Disp_string+0x12>
{
		if(str!=NULL)
		{
			uint8 i=0;
			uint8 len=str_len(str);
			len=len>8?8:len;
    2b86:	09 2f       	mov	r16, r25
    2b88:	99 30       	cpi	r25, 0x09	; 9
    2b8a:	08 f0       	brcs	.+2      	; 0x2b8e <MAX7219Disp_string+0x28>
    2b8c:	08 e0       	ldi	r16, 0x08	; 8
    2b8e:	10 e0       	ldi	r17, 0x00	; 0
    2b90:	0d c0       	rjmp	.+26     	; 0x2bac <MAX7219Disp_string+0x46>
			while(*(str+i)!='\0')
			{
				uint8 data;
				if(*(str+i)>='0'&&*(str+i)<='9')
    2b92:	e0 53       	subi	r30, 0x30	; 48
    2b94:	ea 30       	cpi	r30, 0x0A	; 10
    2b96:	08 f0       	brcs	.+2      	; 0x2b9a <MAX7219Disp_string+0x34>
    2b98:	eb e0       	ldi	r30, 0x0B	; 11
					data=*(str+i)-'0';
				else
					data=11;
				MAX7219_SEND_Data(len-i , MAX721DIG[data]);
    2b9a:	f0 e0       	ldi	r31, 0x00	; 0
    2b9c:	e9 56       	subi	r30, 0x69	; 105
    2b9e:	fe 4f       	sbci	r31, 0xFE	; 254
    2ba0:	80 2f       	mov	r24, r16
    2ba2:	81 1b       	sub	r24, r17
    2ba4:	60 81       	ld	r22, Z
    2ba6:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <MAX7219_SEND_Data>
				i++;
    2baa:	1f 5f       	subi	r17, 0xFF	; 255
		if(str!=NULL)
		{
			uint8 i=0;
			uint8 len=str_len(str);
			len=len>8?8:len;
			while(*(str+i)!='\0')
    2bac:	fe 01       	movw	r30, r28
    2bae:	e1 0f       	add	r30, r17
    2bb0:	f1 1d       	adc	r31, r1
    2bb2:	e0 81       	ld	r30, Z
    2bb4:	ee 23       	and	r30, r30
    2bb6:	69 f7       	brne	.-38     	; 0x2b92 <MAX7219Disp_string+0x2c>
					data=11;
				MAX7219_SEND_Data(len-i , MAX721DIG[data]);
				i++;
			}
		}
}
    2bb8:	df 91       	pop	r29
    2bba:	cf 91       	pop	r28
    2bbc:	1f 91       	pop	r17
    2bbe:	0f 91       	pop	r16
    2bc0:	08 95       	ret

00002bc2 <MAX7219Disp_Number>:
	return len;
}


void MAX7219Disp_Number(int32_t data)
{
    2bc2:	af 92       	push	r10
    2bc4:	bf 92       	push	r11
    2bc6:	cf 92       	push	r12
    2bc8:	df 92       	push	r13
    2bca:	ef 92       	push	r14
    2bcc:	ff 92       	push	r15
    2bce:	0f 93       	push	r16
    2bd0:	1f 93       	push	r17
    2bd2:	df 93       	push	r29
    2bd4:	cf 93       	push	r28
    2bd6:	0f 92       	push	r0
    2bd8:	cd b7       	in	r28, 0x3d	; 61
    2bda:	de b7       	in	r29, 0x3e	; 62
    2bdc:	7b 01       	movw	r14, r22
    2bde:	8c 01       	movw	r16, r24
		Bool neg_flag=0;
		if(data==0)
    2be0:	61 15       	cp	r22, r1
    2be2:	71 05       	cpc	r23, r1
    2be4:	81 05       	cpc	r24, r1
    2be6:	91 05       	cpc	r25, r1
    2be8:	19 f4       	brne	.+6      	; 0x2bf0 <MAX7219Disp_Number+0x2e>
			CLEAR_DISPLAY();
    2bea:	0e 94 28 15 	call	0x2a50	; 0x2a50 <CLEAR_DISPLAY>
    2bee:	46 c0       	rjmp	.+140    	; 0x2c7c <MAX7219Disp_Number+0xba>
		else if(data<0)
    2bf0:	97 ff       	sbrs	r25, 7
    2bf2:	35 c0       	rjmp	.+106    	; 0x2c5e <MAX7219Disp_Number+0x9c>
		{
			neg_flag=1;
			data*=-1;
    2bf4:	10 95       	com	r17
    2bf6:	00 95       	com	r16
    2bf8:	f0 94       	com	r15
    2bfa:	e0 94       	com	r14
    2bfc:	e1 1c       	adc	r14, r1
    2bfe:	f1 1c       	adc	r15, r1
    2c00:	01 1d       	adc	r16, r1
    2c02:	11 1d       	adc	r17, r1
    2c04:	81 e0       	ldi	r24, 0x01	; 1
    2c06:	89 83       	std	Y+1, r24	; 0x01
    2c08:	2b c0       	rjmp	.+86     	; 0x2c60 <MAX7219Disp_Number+0x9e>
		{
			CLEAR_DISPLAY();
			uint8_t dig = no_digits(data);
			uint8_t Cnt = 0;
			if (neg_flag == 1) {
				MAX7219_SEND_Data(dig + 1, MAX721DIG[11]);
    2c0a:	8c 2d       	mov	r24, r12
    2c0c:	8f 5f       	subi	r24, 0xFF	; 255
    2c0e:	61 e0       	ldi	r22, 0x01	; 1
    2c10:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <MAX7219_SEND_Data>
    2c14:	2f c0       	rjmp	.+94     	; 0x2c74 <MAX7219Disp_Number+0xb2>
			}
			for (Cnt = 0; Cnt <= dig - 1; Cnt++) {
				MAX7219_SEND_Data(Cnt + 1, MAX721DIG[data % 10]);
    2c16:	d3 94       	inc	r13
    2c18:	c8 01       	movw	r24, r16
    2c1a:	b7 01       	movw	r22, r14
    2c1c:	2a e0       	ldi	r18, 0x0A	; 10
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	40 e0       	ldi	r20, 0x00	; 0
    2c22:	50 e0       	ldi	r21, 0x00	; 0
    2c24:	0e 94 36 19 	call	0x326c	; 0x326c <__divmodsi4>
    2c28:	9b 01       	movw	r18, r22
    2c2a:	ac 01       	movw	r20, r24
    2c2c:	29 56       	subi	r18, 0x69	; 105
    2c2e:	3e 4f       	sbci	r19, 0xFE	; 254
    2c30:	8d 2d       	mov	r24, r13
    2c32:	f9 01       	movw	r30, r18
    2c34:	60 81       	ld	r22, Z
    2c36:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <MAX7219_SEND_Data>
				data /= 10;
    2c3a:	c8 01       	movw	r24, r16
    2c3c:	b7 01       	movw	r22, r14
    2c3e:	2a e0       	ldi	r18, 0x0A	; 10
    2c40:	30 e0       	ldi	r19, 0x00	; 0
    2c42:	40 e0       	ldi	r20, 0x00	; 0
    2c44:	50 e0       	ldi	r21, 0x00	; 0
    2c46:	0e 94 36 19 	call	0x326c	; 0x326c <__divmodsi4>
    2c4a:	c9 01       	movw	r24, r18
    2c4c:	da 01       	movw	r26, r20
    2c4e:	7c 01       	movw	r14, r24
    2c50:	8d 01       	movw	r16, r26
			uint8_t dig = no_digits(data);
			uint8_t Cnt = 0;
			if (neg_flag == 1) {
				MAX7219_SEND_Data(dig + 1, MAX721DIG[11]);
			}
			for (Cnt = 0; Cnt <= dig - 1; Cnt++) {
    2c52:	8d 2d       	mov	r24, r13
    2c54:	90 e0       	ldi	r25, 0x00	; 0
    2c56:	8a 15       	cp	r24, r10
    2c58:	9b 05       	cpc	r25, r11
    2c5a:	ec f2       	brlt	.-70     	; 0x2c16 <MAX7219Disp_Number+0x54>
    2c5c:	0f c0       	rjmp	.+30     	; 0x2c7c <MAX7219Disp_Number+0xba>
				MAX7219_SEND_Data(Cnt + 1, MAX721DIG[data % 10]);
				data /= 10;
			}
		}
}
    2c5e:	19 82       	std	Y+1, r1	; 0x01
			neg_flag=1;
			data*=-1;
		}
		if(data!=0)
		{
			CLEAR_DISPLAY();
    2c60:	0e 94 28 15 	call	0x2a50	; 0x2a50 <CLEAR_DISPLAY>
			uint8_t dig = no_digits(data);
    2c64:	c8 01       	movw	r24, r16
    2c66:	b7 01       	movw	r22, r14
    2c68:	0e 94 03 15 	call	0x2a06	; 0x2a06 <no_digits>
    2c6c:	c8 2e       	mov	r12, r24
			uint8_t Cnt = 0;
			if (neg_flag == 1) {
    2c6e:	f9 81       	ldd	r31, Y+1	; 0x01
    2c70:	f1 30       	cpi	r31, 0x01	; 1
    2c72:	59 f2       	breq	.-106    	; 0x2c0a <MAX7219Disp_Number+0x48>
    2c74:	dd 24       	eor	r13, r13
				MAX7219_SEND_Data(dig + 1, MAX721DIG[11]);
			}
			for (Cnt = 0; Cnt <= dig - 1; Cnt++) {
    2c76:	ac 2c       	mov	r10, r12
    2c78:	bb 24       	eor	r11, r11
    2c7a:	eb cf       	rjmp	.-42     	; 0x2c52 <MAX7219Disp_Number+0x90>
				MAX7219_SEND_Data(Cnt + 1, MAX721DIG[data % 10]);
				data /= 10;
			}
		}
}
    2c7c:	0f 90       	pop	r0
    2c7e:	cf 91       	pop	r28
    2c80:	df 91       	pop	r29
    2c82:	1f 91       	pop	r17
    2c84:	0f 91       	pop	r16
    2c86:	ff 90       	pop	r15
    2c88:	ef 90       	pop	r14
    2c8a:	df 90       	pop	r13
    2c8c:	cf 90       	pop	r12
    2c8e:	bf 90       	pop	r11
    2c90:	af 90       	pop	r10
    2c92:	08 95       	ret

00002c94 <MAX7219_INIT>:
static uint8 str_len(char *str);

Bool MAX7219_INIT()
{
	Bool ret=E_OK;
	MAX7219_SEND_Data(DECODE_MODE,EXTERNAL_DECODER);
    2c94:	89 e0       	ldi	r24, 0x09	; 9
    2c96:	60 e0       	ldi	r22, 0x00	; 0
    2c98:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <MAX7219_SEND_Data>
	MAX7219_SEND_Data(INTENSITY_REG,INTENSITY_LEVEL7);
    2c9c:	8a e0       	ldi	r24, 0x0A	; 10
    2c9e:	67 e0       	ldi	r22, 0x07	; 7
    2ca0:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <MAX7219_SEND_Data>
	MAX7219_SEND_Data(SCAN_LIM_REG,NO_DIGITS-1);
    2ca4:	8b e0       	ldi	r24, 0x0B	; 11
    2ca6:	67 e0       	ldi	r22, 0x07	; 7
    2ca8:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <MAX7219_SEND_Data>
	MAX7219_SEND_Data(SHUTDOWN_REG,POWER_ON);
    2cac:	8c e0       	ldi	r24, 0x0C	; 12
    2cae:	61 e0       	ldi	r22, 0x01	; 1
    2cb0:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <MAX7219_SEND_Data>
	MAX7219_SEND_Data(DISPLAY_TEST_REG,NORMAL_OP);
    2cb4:	8f e0       	ldi	r24, 0x0F	; 15
    2cb6:	60 e0       	ldi	r22, 0x00	; 0
    2cb8:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <MAX7219_SEND_Data>
	CLEAR_DISPLAY();
    2cbc:	0e 94 28 15 	call	0x2a50	; 0x2a50 <CLEAR_DISPLAY>
	return ret;
}
    2cc0:	81 e0       	ldi	r24, 0x01	; 1
    2cc2:	08 95       	ret

00002cc4 <Max7219_Send_DArr>:
	Max7219_Send_DArr(DISPLAY_TEST_REG, NORMAL_OP,2);
	return ret;
}

static Bool Max7219_Send_DArr(uint8 Address,uint8 Data,uint8 size)
{
    2cc4:	ff 92       	push	r15
    2cc6:	0f 93       	push	r16
    2cc8:	1f 93       	push	r17
    2cca:	cf 93       	push	r28
    2ccc:	df 93       	push	r29
    2cce:	f8 2e       	mov	r15, r24
    2cd0:	06 2f       	mov	r16, r22
	Bool ret=E_OK;
	uint8 Seg_no=0;
	SPI_CLEAR_SS();
    2cd2:	c4 98       	cbi	0x18, 4	; 24
    2cd4:	10 e0       	ldi	r17, 0x00	; 0
	for(Seg_no=0;Seg_no<=size-1;Seg_no++)
    2cd6:	c4 2f       	mov	r28, r20
    2cd8:	d0 e0       	ldi	r29, 0x00	; 0
    2cda:	07 c0       	rjmp	.+14     	; 0x2cea <Max7219_Send_DArr+0x26>
	{
		SPI_SEND_BYTE(Address);
    2cdc:	8f 2d       	mov	r24, r15
    2cde:	0e 94 48 0b 	call	0x1690	; 0x1690 <SPI_SEND_BYTE>
		SPI_SEND_BYTE(Data);
    2ce2:	80 2f       	mov	r24, r16
    2ce4:	0e 94 48 0b 	call	0x1690	; 0x1690 <SPI_SEND_BYTE>
static Bool Max7219_Send_DArr(uint8 Address,uint8 Data,uint8 size)
{
	Bool ret=E_OK;
	uint8 Seg_no=0;
	SPI_CLEAR_SS();
	for(Seg_no=0;Seg_no<=size-1;Seg_no++)
    2ce8:	1f 5f       	subi	r17, 0xFF	; 255
    2cea:	81 2f       	mov	r24, r17
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	8c 17       	cp	r24, r28
    2cf0:	9d 07       	cpc	r25, r29
    2cf2:	a4 f3       	brlt	.-24     	; 0x2cdc <Max7219_Send_DArr+0x18>
	{
		SPI_SEND_BYTE(Address);
		SPI_SEND_BYTE(Data);
	}
	SPI_SET_SS();
    2cf4:	c4 9a       	sbi	0x18, 4	; 24
	return ret;
}
    2cf6:	81 e0       	ldi	r24, 0x01	; 1
    2cf8:	df 91       	pop	r29
    2cfa:	cf 91       	pop	r28
    2cfc:	1f 91       	pop	r17
    2cfe:	0f 91       	pop	r16
    2d00:	ff 90       	pop	r15
    2d02:	08 95       	ret

00002d04 <MAX7219_INIT_ARR>:
}

Bool MAX7219_INIT_ARR()
{
	Bool ret = E_OK;
	Max7219_Send_DArr(DECODE_MODE, EXTERNAL_DECODER,2);
    2d04:	89 e0       	ldi	r24, 0x09	; 9
    2d06:	60 e0       	ldi	r22, 0x00	; 0
    2d08:	42 e0       	ldi	r20, 0x02	; 2
    2d0a:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <Max7219_Send_DArr>
	Max7219_Send_DArr(INTENSITY_REG, INTENSITY_LEVEL7,2);
    2d0e:	8a e0       	ldi	r24, 0x0A	; 10
    2d10:	67 e0       	ldi	r22, 0x07	; 7
    2d12:	42 e0       	ldi	r20, 0x02	; 2
    2d14:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <Max7219_Send_DArr>
	Max7219_Send_DArr(SCAN_LIM_REG, NO_DIGITS - 1,2);
    2d18:	8b e0       	ldi	r24, 0x0B	; 11
    2d1a:	67 e0       	ldi	r22, 0x07	; 7
    2d1c:	42 e0       	ldi	r20, 0x02	; 2
    2d1e:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <Max7219_Send_DArr>
	Max7219_Send_DArr(SHUTDOWN_REG, POWER_ON,2);
    2d22:	8c e0       	ldi	r24, 0x0C	; 12
    2d24:	61 e0       	ldi	r22, 0x01	; 1
    2d26:	42 e0       	ldi	r20, 0x02	; 2
    2d28:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <Max7219_Send_DArr>
	Max7219_Send_DArr(DISPLAY_TEST_REG, NORMAL_OP,2);
    2d2c:	8f e0       	ldi	r24, 0x0F	; 15
    2d2e:	60 e0       	ldi	r22, 0x00	; 0
    2d30:	42 e0       	ldi	r20, 0x02	; 2
    2d32:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <Max7219_Send_DArr>
	return ret;
}
    2d36:	81 e0       	ldi	r24, 0x01	; 1
    2d38:	08 95       	ret

00002d3a <Max7219_Send_DArr_Ddata>:
	SPI_SET_SS();
	return ret;
}

Bool Max7219_Send_DArr_Ddata(uint8 Address,uint8 Data[],uint8 size,Bool *temp_flag,Bool *temp_flag_2)
{
    2d3a:	6f 92       	push	r6
    2d3c:	7f 92       	push	r7
    2d3e:	8f 92       	push	r8
    2d40:	9f 92       	push	r9
    2d42:	af 92       	push	r10
    2d44:	bf 92       	push	r11
    2d46:	cf 92       	push	r12
    2d48:	df 92       	push	r13
    2d4a:	ef 92       	push	r14
    2d4c:	ff 92       	push	r15
    2d4e:	0f 93       	push	r16
    2d50:	1f 93       	push	r17
    2d52:	cf 93       	push	r28
    2d54:	df 93       	push	r29
    2d56:	e8 2e       	mov	r14, r24
    2d58:	3b 01       	movw	r6, r22
    2d5a:	49 01       	movw	r8, r18
    2d5c:	58 01       	movw	r10, r16
	Bool ret = E_OK;
	uint8 Seg_no = 0;
	SPI_CLEAR_SS();
    2d5e:	c4 98       	cbi	0x18, 4	; 24
    2d60:	ff 24       	eor	r15, r15
	for (Seg_no = 0; Seg_no <= size - 1; Seg_no++) {
    2d62:	c4 2e       	mov	r12, r20
    2d64:	dd 24       	eor	r13, r13
		 SPI_SEND_BYTE(Address);
		if(*temp_flag==1&&Seg_no==size-1)
    2d66:	e6 01       	movw	r28, r12
    2d68:	21 97       	sbiw	r28, 0x01	; 1
    2d6a:	2b c0       	rjmp	.+86     	; 0x2dc2 <Max7219_Send_DArr_Ddata+0x88>
{
	Bool ret = E_OK;
	uint8 Seg_no = 0;
	SPI_CLEAR_SS();
	for (Seg_no = 0; Seg_no <= size - 1; Seg_no++) {
		 SPI_SEND_BYTE(Address);
    2d6c:	8e 2d       	mov	r24, r14
    2d6e:	0e 94 48 0b 	call	0x1690	; 0x1690 <SPI_SEND_BYTE>
		if(*temp_flag==1&&Seg_no==size-1)
    2d72:	f4 01       	movw	r30, r8
    2d74:	80 81       	ld	r24, Z
    2d76:	81 30       	cpi	r24, 0x01	; 1
    2d78:	71 f4       	brne	.+28     	; 0x2d96 <Max7219_Send_DArr_Ddata+0x5c>
    2d7a:	0c 17       	cp	r16, r28
    2d7c:	1d 07       	cpc	r17, r29
    2d7e:	59 f4       	brne	.+22     	; 0x2d96 <Max7219_Send_DArr_Ddata+0x5c>
		{
			*temp_flag=0;
    2d80:	10 82       	st	Z, r1
			 SPI_SEND_BYTE(MAX721DIG[Data[Seg_no]]|0x80);
    2d82:	f3 01       	movw	r30, r6
    2d84:	ec 0f       	add	r30, r28
    2d86:	fd 1f       	adc	r31, r29
    2d88:	e0 81       	ld	r30, Z
    2d8a:	f0 e0       	ldi	r31, 0x00	; 0
    2d8c:	e9 56       	subi	r30, 0x69	; 105
    2d8e:	fe 4f       	sbci	r31, 0xFE	; 254
    2d90:	80 81       	ld	r24, Z
    2d92:	80 68       	ori	r24, 0x80	; 128
    2d94:	13 c0       	rjmp	.+38     	; 0x2dbc <Max7219_Send_DArr_Ddata+0x82>
		}
		else if(*temp_flag_2==1&&Seg_no==1)
    2d96:	f5 01       	movw	r30, r10
    2d98:	80 81       	ld	r24, Z
    2d9a:	81 30       	cpi	r24, 0x01	; 1
    2d9c:	39 f4       	brne	.+14     	; 0x2dac <Max7219_Send_DArr_Ddata+0x72>
    2d9e:	f1 e0       	ldi	r31, 0x01	; 1
    2da0:	ff 16       	cp	r15, r31
    2da2:	21 f4       	brne	.+8      	; 0x2dac <Max7219_Send_DArr_Ddata+0x72>
		{
			*temp_flag_2 = 0;
    2da4:	f5 01       	movw	r30, r10
    2da6:	10 82       	st	Z, r1
			 SPI_SEND_BYTE(MAX721DIG[12]);
    2da8:	8e e4       	ldi	r24, 0x4E	; 78
    2daa:	08 c0       	rjmp	.+16     	; 0x2dbc <Max7219_Send_DArr_Ddata+0x82>
		}
		else
			 SPI_SEND_BYTE(MAX721DIG[Data[Seg_no]]);
    2dac:	f3 01       	movw	r30, r6
    2dae:	ef 0d       	add	r30, r15
    2db0:	f1 1d       	adc	r31, r1
    2db2:	e0 81       	ld	r30, Z
    2db4:	f0 e0       	ldi	r31, 0x00	; 0
    2db6:	e9 56       	subi	r30, 0x69	; 105
    2db8:	fe 4f       	sbci	r31, 0xFE	; 254
    2dba:	80 81       	ld	r24, Z
    2dbc:	0e 94 48 0b 	call	0x1690	; 0x1690 <SPI_SEND_BYTE>
Bool Max7219_Send_DArr_Ddata(uint8 Address,uint8 Data[],uint8 size,Bool *temp_flag,Bool *temp_flag_2)
{
	Bool ret = E_OK;
	uint8 Seg_no = 0;
	SPI_CLEAR_SS();
	for (Seg_no = 0; Seg_no <= size - 1; Seg_no++) {
    2dc0:	f3 94       	inc	r15
    2dc2:	0f 2d       	mov	r16, r15
    2dc4:	10 e0       	ldi	r17, 0x00	; 0
    2dc6:	0c 15       	cp	r16, r12
    2dc8:	1d 05       	cpc	r17, r13
    2dca:	84 f2       	brlt	.-96     	; 0x2d6c <Max7219_Send_DArr_Ddata+0x32>
			 SPI_SEND_BYTE(MAX721DIG[12]);
		}
		else
			 SPI_SEND_BYTE(MAX721DIG[Data[Seg_no]]);
	}
	SPI_SET_SS();
    2dcc:	c4 9a       	sbi	0x18, 4	; 24
	return ret;
}
    2dce:	81 e0       	ldi	r24, 0x01	; 1
    2dd0:	df 91       	pop	r29
    2dd2:	cf 91       	pop	r28
    2dd4:	1f 91       	pop	r17
    2dd6:	0f 91       	pop	r16
    2dd8:	ff 90       	pop	r15
    2dda:	ef 90       	pop	r14
    2ddc:	df 90       	pop	r13
    2dde:	cf 90       	pop	r12
    2de0:	bf 90       	pop	r11
    2de2:	af 90       	pop	r10
    2de4:	9f 90       	pop	r9
    2de6:	8f 90       	pop	r8
    2de8:	7f 90       	pop	r7
    2dea:	6f 90       	pop	r6
    2dec:	08 95       	ret

00002dee <MAX7219Disp_float_num>:
		Num/=10;
	}
}

void MAX7219Disp_float_num(float Val,Bool Temp_flag,uint32 Num)
{
    2dee:	7f 92       	push	r7
    2df0:	8f 92       	push	r8
    2df2:	9f 92       	push	r9
    2df4:	af 92       	push	r10
    2df6:	bf 92       	push	r11
    2df8:	cf 92       	push	r12
    2dfa:	df 92       	push	r13
    2dfc:	ef 92       	push	r14
    2dfe:	ff 92       	push	r15
    2e00:	0f 93       	push	r16
    2e02:	1f 93       	push	r17
    2e04:	df 93       	push	r29
    2e06:	cf 93       	push	r28
    2e08:	00 d0       	rcall	.+0      	; 0x2e0a <MAX7219Disp_float_num+0x1c>
    2e0a:	00 d0       	rcall	.+0      	; 0x2e0c <MAX7219Disp_float_num+0x1e>
    2e0c:	0f 92       	push	r0
    2e0e:	cd b7       	in	r28, 0x3d	; 61
    2e10:	de b7       	in	r29, 0x3e	; 62
    2e12:	6b 01       	movw	r12, r22
    2e14:	7c 01       	movw	r14, r24
    2e16:	c9 01       	movw	r24, r18
    2e18:	b8 01       	movw	r22, r16
	Bool flag=0,flag_2=0;
    2e1a:	19 82       	std	Y+1, r1	; 0x01
    2e1c:	1a 82       	std	Y+2, r1	; 0x02
	int8 Counter=DIGIT_5;
	uint8 Arr[2];
	int32 int_val=Val*1000;

	Convert_digs(Num,Data_arr);
    2e1e:	48 ea       	ldi	r20, 0xA8	; 168
    2e20:	51 e0       	ldi	r21, 0x01	; 1
    2e22:	0e 94 cc 14 	call	0x2998	; 0x2998 <Convert_digs>
	Convert_digs(int_val,Data_arr_2);
    2e26:	c7 01       	movw	r24, r14
    2e28:	b6 01       	movw	r22, r12
    2e2a:	20 e0       	ldi	r18, 0x00	; 0
    2e2c:	30 e0       	ldi	r19, 0x00	; 0
    2e2e:	4a e7       	ldi	r20, 0x7A	; 122
    2e30:	54 e4       	ldi	r21, 0x44	; 68
    2e32:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__mulsf3>
    2e36:	0e 94 4b 03 	call	0x696	; 0x696 <__fixsfsi>
    2e3a:	4e ea       	ldi	r20, 0xAE	; 174
    2e3c:	51 e0       	ldi	r21, 0x01	; 1
    2e3e:	0e 94 cc 14 	call	0x2998	; 0x2998 <Convert_digs>
	MAX7219_SEND_Data(DIGIT_0, MAX721DIG[0]);
}

static void CLEAR_DISPLAY_Arr()
{
	Max7219_Send_DArr(DIGIT_7, MAX721DIG[0],2);
    2e42:	88 e0       	ldi	r24, 0x08	; 8
    2e44:	6e e7       	ldi	r22, 0x7E	; 126
    2e46:	42 e0       	ldi	r20, 0x02	; 2
    2e48:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <Max7219_Send_DArr>
	Max7219_Send_DArr(DIGIT_6, MAX721DIG[0],2);
    2e4c:	87 e0       	ldi	r24, 0x07	; 7
    2e4e:	6e e7       	ldi	r22, 0x7E	; 126
    2e50:	42 e0       	ldi	r20, 0x02	; 2
    2e52:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <Max7219_Send_DArr>
	Max7219_Send_DArr(DIGIT_5, MAX721DIG[0],2);
    2e56:	86 e0       	ldi	r24, 0x06	; 6
    2e58:	6e e7       	ldi	r22, 0x7E	; 126
    2e5a:	42 e0       	ldi	r20, 0x02	; 2
    2e5c:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <Max7219_Send_DArr>
	Max7219_Send_DArr(DIGIT_4, MAX721DIG[0],2);
    2e60:	85 e0       	ldi	r24, 0x05	; 5
    2e62:	6e e7       	ldi	r22, 0x7E	; 126
    2e64:	42 e0       	ldi	r20, 0x02	; 2
    2e66:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <Max7219_Send_DArr>
	Max7219_Send_DArr(DIGIT_3, MAX721DIG[0],2);
    2e6a:	84 e0       	ldi	r24, 0x04	; 4
    2e6c:	6e e7       	ldi	r22, 0x7E	; 126
    2e6e:	42 e0       	ldi	r20, 0x02	; 2
    2e70:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <Max7219_Send_DArr>
	Max7219_Send_DArr(DIGIT_2, MAX721DIG[0],2);
    2e74:	83 e0       	ldi	r24, 0x03	; 3
    2e76:	6e e7       	ldi	r22, 0x7E	; 126
    2e78:	42 e0       	ldi	r20, 0x02	; 2
    2e7a:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <Max7219_Send_DArr>
	Max7219_Send_DArr(DIGIT_1, MAX721DIG[0],2);
    2e7e:	82 e0       	ldi	r24, 0x02	; 2
    2e80:	6e e7       	ldi	r22, 0x7E	; 126
    2e82:	42 e0       	ldi	r20, 0x02	; 2
    2e84:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <Max7219_Send_DArr>
	Max7219_Send_DArr(DIGIT_0, MAX721DIG[0],2);
    2e88:	81 e0       	ldi	r24, 0x01	; 1
    2e8a:	6e e7       	ldi	r22, 0x7E	; 126
    2e8c:	42 e0       	ldi	r20, 0x02	; 2
    2e8e:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <Max7219_Send_DArr>
    2e92:	96 e0       	ldi	r25, 0x06	; 6
    2e94:	ee 24       	eor	r14, r14
    2e96:	ff 24       	eor	r15, r15
		Arr[0] = Data_arr[DIGIT_5-Counter];
		Arr[1] = Data_arr_2[DIGIT_5-Counter];
		if(Counter==DIGIT_2)
			flag=1;
		if(Counter==DIGIT_5)
			flag_2=1;
    2e98:	77 24       	eor	r7, r7
    2e9a:	73 94       	inc	r7
		Max7219_Send_DArr_Ddata(Counter, Arr, 2,&flag,&flag_2);
    2e9c:	23 e0       	ldi	r18, 0x03	; 3
    2e9e:	82 2e       	mov	r8, r18
    2ea0:	91 2c       	mov	r9, r1
    2ea2:	8c 0e       	add	r8, r28
    2ea4:	9d 1e       	adc	r9, r29
    2ea6:	82 e0       	ldi	r24, 0x02	; 2
    2ea8:	a8 2e       	mov	r10, r24
    2eaa:	b1 2c       	mov	r11, r1
    2eac:	ac 0e       	add	r10, r28
    2eae:	bd 1e       	adc	r11, r29
    2eb0:	6e 01       	movw	r12, r28
    2eb2:	08 94       	sec
    2eb4:	c1 1c       	adc	r12, r1
    2eb6:	d1 1c       	adc	r13, r1
	Convert_digs(Num,Data_arr);
	Convert_digs(int_val,Data_arr_2);
	CLEAR_DISPLAY_Arr();
	for(Counter=DIGIT_5;Counter>=1;Counter--)
	{
		Arr[0] = Data_arr[DIGIT_5-Counter];
    2eb8:	f7 01       	movw	r30, r14
    2eba:	e8 55       	subi	r30, 0x58	; 88
    2ebc:	fe 4f       	sbci	r31, 0xFE	; 254
    2ebe:	80 81       	ld	r24, Z
		Arr[1] = Data_arr_2[DIGIT_5-Counter];
    2ec0:	f7 01       	movw	r30, r14
    2ec2:	e2 55       	subi	r30, 0x52	; 82
    2ec4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ec6:	e0 81       	ld	r30, Z
		if(Counter==DIGIT_2)
    2ec8:	93 30       	cpi	r25, 0x03	; 3
    2eca:	11 f4       	brne	.+4      	; 0x2ed0 <MAX7219Disp_float_num+0xe2>
			flag=1;
    2ecc:	79 82       	std	Y+1, r7	; 0x01
    2ece:	03 c0       	rjmp	.+6      	; 0x2ed6 <MAX7219Disp_float_num+0xe8>
		if(Counter==DIGIT_5)
    2ed0:	96 30       	cpi	r25, 0x06	; 6
    2ed2:	09 f4       	brne	.+2      	; 0x2ed6 <MAX7219Disp_float_num+0xe8>
			flag_2=1;
    2ed4:	7a 82       	std	Y+2, r7	; 0x02
	Convert_digs(int_val,Data_arr_2);
	CLEAR_DISPLAY_Arr();
	for(Counter=DIGIT_5;Counter>=1;Counter--)
	{
		Arr[0] = Data_arr[DIGIT_5-Counter];
		Arr[1] = Data_arr_2[DIGIT_5-Counter];
    2ed6:	ec 83       	std	Y+4, r30	; 0x04
	Convert_digs(Num,Data_arr);
	Convert_digs(int_val,Data_arr_2);
	CLEAR_DISPLAY_Arr();
	for(Counter=DIGIT_5;Counter>=1;Counter--)
	{
		Arr[0] = Data_arr[DIGIT_5-Counter];
    2ed8:	8b 83       	std	Y+3, r24	; 0x03
		Arr[1] = Data_arr_2[DIGIT_5-Counter];
		if(Counter==DIGIT_2)
			flag=1;
		if(Counter==DIGIT_5)
			flag_2=1;
		Max7219_Send_DArr_Ddata(Counter, Arr, 2,&flag,&flag_2);
    2eda:	89 2f       	mov	r24, r25
    2edc:	b4 01       	movw	r22, r8
    2ede:	42 e0       	ldi	r20, 0x02	; 2
    2ee0:	96 01       	movw	r18, r12
    2ee2:	85 01       	movw	r16, r10
    2ee4:	9d 83       	std	Y+5, r25	; 0x05
    2ee6:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <Max7219_Send_DArr_Ddata>
	int32 int_val=Val*1000;

	Convert_digs(Num,Data_arr);
	Convert_digs(int_val,Data_arr_2);
	CLEAR_DISPLAY_Arr();
	for(Counter=DIGIT_5;Counter>=1;Counter--)
    2eea:	9d 81       	ldd	r25, Y+5	; 0x05
    2eec:	91 50       	subi	r25, 0x01	; 1
    2eee:	08 94       	sec
    2ef0:	e1 1c       	adc	r14, r1
    2ef2:	f1 1c       	adc	r15, r1
    2ef4:	99 23       	and	r25, r25
    2ef6:	01 f7       	brne	.-64     	; 0x2eb8 <MAX7219Disp_float_num+0xca>
			flag=1;
		if(Counter==DIGIT_5)
			flag_2=1;
		Max7219_Send_DArr_Ddata(Counter, Arr, 2,&flag,&flag_2);
	}
}
    2ef8:	0f 90       	pop	r0
    2efa:	0f 90       	pop	r0
    2efc:	0f 90       	pop	r0
    2efe:	0f 90       	pop	r0
    2f00:	0f 90       	pop	r0
    2f02:	cf 91       	pop	r28
    2f04:	df 91       	pop	r29
    2f06:	1f 91       	pop	r17
    2f08:	0f 91       	pop	r16
    2f0a:	ff 90       	pop	r15
    2f0c:	ef 90       	pop	r14
    2f0e:	df 90       	pop	r13
    2f10:	cf 90       	pop	r12
    2f12:	bf 90       	pop	r11
    2f14:	af 90       	pop	r10
    2f16:	9f 90       	pop	r9
    2f18:	8f 90       	pop	r8
    2f1a:	7f 90       	pop	r7
    2f1c:	08 95       	ret

00002f1e <ECUAL_DS1307_Read_Time>:
	}
	return Err_status;
}

uint8 ECUAL_DS1307_Read_Time(uint8 *Buffer)
{
    2f1e:	0f 93       	push	r16
    2f20:	1f 93       	push	r17
    2f22:	df 93       	push	r29
    2f24:	cf 93       	push	r28
    2f26:	00 d0       	rcall	.+0      	; 0x2f28 <ECUAL_DS1307_Read_Time+0xa>
    2f28:	0f 92       	push	r0
    2f2a:	cd b7       	in	r28, 0x3d	; 61
    2f2c:	de b7       	in	r29, 0x3e	; 62
    2f2e:	8c 01       	movw	r16, r24
	uint8 E_Stat=E_OK;
	if(Buffer==NULL)
    2f30:	00 97       	sbiw	r24, 0x00	; 0
    2f32:	11 f4       	brne	.+4      	; 0x2f38 <ECUAL_DS1307_Read_Time+0x1a>
    2f34:	80 e0       	ldi	r24, 0x00	; 0
    2f36:	3e c0       	rjmp	.+124    	; 0x2fb4 <ECUAL_DS1307_Read_Time+0x96>
		uint8 Hrs;
		uint8 Mins;
		uint8 Secs;
		uint8 Time_24_flag=0x00;
		uint8 Temp_Buffer[3];
		Mcal_I2C_read_buffer(RTC_DS1307_ADDRESS,RTC_DS1307_Seconds_REG,Temp_Buffer,3);
    2f38:	80 ed       	ldi	r24, 0xD0	; 208
    2f3a:	60 e0       	ldi	r22, 0x00	; 0
    2f3c:	ae 01       	movw	r20, r28
    2f3e:	4f 5f       	subi	r20, 0xFF	; 255
    2f40:	5f 4f       	sbci	r21, 0xFF	; 255
    2f42:	23 e0       	ldi	r18, 0x03	; 3
    2f44:	0e 94 63 08 	call	0x10c6	; 0x10c6 <Mcal_I2C_read_buffer>
		Secs=Temp_Buffer[0];
    2f48:	39 81       	ldd	r19, Y+1	; 0x01
		Mins=Temp_Buffer[1];
    2f4a:	2a 81       	ldd	r18, Y+2	; 0x02
		Hrs=Temp_Buffer[2];
    2f4c:	9b 81       	ldd	r25, Y+3	; 0x03
		if(Hrs&(TIME_12_HRS_MODE<<TIME_HRS_MODE_SEL_POS))
    2f4e:	96 fd       	sbrc	r25, 6
    2f50:	02 c0       	rjmp	.+4      	; 0x2f56 <ECUAL_DS1307_Read_Time+0x38>
    2f52:	40 e0       	ldi	r20, 0x00	; 0
    2f54:	07 c0       	rjmp	.+14     	; 0x2f64 <ECUAL_DS1307_Read_Time+0x46>
		{
			Time_24_flag|=(1<<0);
			Hrs&=~(TIME_12_HRS_MODE<<TIME_HRS_MODE_SEL_POS);
    2f56:	9f 7b       	andi	r25, 0xBF	; 191
			if(Hrs&(TIME_PM<<TIME_AM_PM_SEL_POS))
    2f58:	95 fd       	sbrc	r25, 5
    2f5a:	02 c0       	rjmp	.+4      	; 0x2f60 <ECUAL_DS1307_Read_Time+0x42>
    2f5c:	41 e0       	ldi	r20, 0x01	; 1
    2f5e:	02 c0       	rjmp	.+4      	; 0x2f64 <ECUAL_DS1307_Read_Time+0x46>
			{
				Hrs&=~(TIME_PM<<TIME_AM_PM_SEL_POS);
    2f60:	9f 7d       	andi	r25, 0xDF	; 223
    2f62:	43 e0       	ldi	r20, 0x03	; 3
				Time_24_flag|=(1<<1);
			}
		}
		Buffer[Pos++]=(Hrs>>4)+'0';
    2f64:	89 2f       	mov	r24, r25
    2f66:	82 95       	swap	r24
    2f68:	8f 70       	andi	r24, 0x0F	; 15
    2f6a:	80 5d       	subi	r24, 0xD0	; 208
    2f6c:	f8 01       	movw	r30, r16
    2f6e:	80 83       	st	Z, r24
		Buffer[Pos++]=(Hrs&0x0F)+'0';
    2f70:	9f 70       	andi	r25, 0x0F	; 15
    2f72:	90 5d       	subi	r25, 0xD0	; 208
    2f74:	91 83       	std	Z+1, r25	; 0x01
		Buffer[Pos++]=':';
    2f76:	9a e3       	ldi	r25, 0x3A	; 58
    2f78:	92 83       	std	Z+2, r25	; 0x02
		Buffer[Pos++]=(Mins>>4)+'0';
    2f7a:	82 2f       	mov	r24, r18
    2f7c:	82 95       	swap	r24
    2f7e:	8f 70       	andi	r24, 0x0F	; 15
    2f80:	80 5d       	subi	r24, 0xD0	; 208
    2f82:	83 83       	std	Z+3, r24	; 0x03
		Buffer[Pos++]=(Mins&0x0F)+'0';
    2f84:	2f 70       	andi	r18, 0x0F	; 15
    2f86:	20 5d       	subi	r18, 0xD0	; 208
    2f88:	24 83       	std	Z+4, r18	; 0x04
		Buffer[Pos++]=':';
    2f8a:	95 83       	std	Z+5, r25	; 0x05
		Buffer[Pos++] = (Secs >>4) + '0';
    2f8c:	83 2f       	mov	r24, r19
    2f8e:	82 95       	swap	r24
    2f90:	8f 70       	andi	r24, 0x0F	; 15
    2f92:	80 5d       	subi	r24, 0xD0	; 208
    2f94:	86 83       	std	Z+6, r24	; 0x06
		Buffer[Pos++] = (Secs&0x0F) + '0';
    2f96:	3f 70       	andi	r19, 0x0F	; 15
    2f98:	30 5d       	subi	r19, 0xD0	; 208
    2f9a:	37 83       	std	Z+7, r19	; 0x07
		if(Time_24_flag&0x01)
    2f9c:	40 ff       	sbrs	r20, 0
    2f9e:	09 c0       	rjmp	.+18     	; 0x2fb2 <ECUAL_DS1307_Read_Time+0x94>
		{
			if(Time_24_flag&0x02)
    2fa0:	41 ff       	sbrs	r20, 1
    2fa2:	02 c0       	rjmp	.+4      	; 0x2fa8 <ECUAL_DS1307_Read_Time+0x8a>
			{
				Buffer[Pos++] = 'P';
    2fa4:	80 e5       	ldi	r24, 0x50	; 80
    2fa6:	01 c0       	rjmp	.+2      	; 0x2faa <ECUAL_DS1307_Read_Time+0x8c>
				Buffer[Pos++] = 'M';
			}
			else{
				Buffer[Pos++] = 'A';
    2fa8:	81 e4       	ldi	r24, 0x41	; 65
    2faa:	f8 01       	movw	r30, r16
    2fac:	80 87       	std	Z+8, r24	; 0x08
				Buffer[Pos++] = 'M';
    2fae:	8d e4       	ldi	r24, 0x4D	; 77
    2fb0:	81 87       	std	Z+9, r24	; 0x09
    2fb2:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
	}
	return E_Stat;
}
    2fb4:	0f 90       	pop	r0
    2fb6:	0f 90       	pop	r0
    2fb8:	0f 90       	pop	r0
    2fba:	cf 91       	pop	r28
    2fbc:	df 91       	pop	r29
    2fbe:	1f 91       	pop	r17
    2fc0:	0f 91       	pop	r16
    2fc2:	08 95       	ret

00002fc4 <ECUAL_DS1307_Set_date>:
	}
	return Err_status;
}

uint8 ECUAL_DS1307_Set_date(uint8 Year,uint8 Mnth,uint8 Date,uint8 Day)
{
    2fc4:	df 93       	push	r29
    2fc6:	cf 93       	push	r28
    2fc8:	00 d0       	rcall	.+0      	; 0x2fca <ECUAL_DS1307_Set_date+0x6>
    2fca:	00 d0       	rcall	.+0      	; 0x2fcc <ECUAL_DS1307_Set_date+0x8>
    2fcc:	cd b7       	in	r28, 0x3d	; 61
    2fce:	de b7       	in	r29, 0x3e	; 62
    2fd0:	e8 2f       	mov	r30, r24
    2fd2:	56 2f       	mov	r21, r22
	uint8 Err_status = E_OK;
	if (Mnth >12 || Day > 31 || Date > 7 || Year > 99)
    2fd4:	6d 30       	cpi	r22, 0x0D	; 13
    2fd6:	98 f5       	brcc	.+102    	; 0x303e <ECUAL_DS1307_Set_date+0x7a>
    2fd8:	20 32       	cpi	r18, 0x20	; 32
    2fda:	88 f5       	brcc	.+98     	; 0x303e <ECUAL_DS1307_Set_date+0x7a>
    2fdc:	48 30       	cpi	r20, 0x08	; 8
    2fde:	78 f5       	brcc	.+94     	; 0x303e <ECUAL_DS1307_Set_date+0x7a>
    2fe0:	84 36       	cpi	r24, 0x64	; 100
    2fe2:	68 f5       	brcc	.+90     	; 0x303e <ECUAL_DS1307_Set_date+0x7a>
		Err_status = E_NOK;
	else {
		uint8 Buffer[4];
		Buffer[0] = Day;
    2fe4:	29 83       	std	Y+1, r18	; 0x01
		Buffer[1] = ((Date / 10) << 4) | (Date % 10);
    2fe6:	84 2f       	mov	r24, r20
    2fe8:	6a e0       	ldi	r22, 0x0A	; 10
    2fea:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <__udivmodqi4>
    2fee:	9a 83       	std	Y+2, r25	; 0x02
		Buffer[2] = ((Mnth / 10) << 4) | (Mnth % 10);
    2ff0:	85 2f       	mov	r24, r21
    2ff2:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <__udivmodqi4>
    2ff6:	28 2f       	mov	r18, r24
    2ff8:	30 e0       	ldi	r19, 0x00	; 0
    2ffa:	94 e0       	ldi	r25, 0x04	; 4
    2ffc:	22 0f       	add	r18, r18
    2ffe:	33 1f       	adc	r19, r19
    3000:	9a 95       	dec	r25
    3002:	e1 f7       	brne	.-8      	; 0x2ffc <ECUAL_DS1307_Set_date+0x38>
    3004:	85 2f       	mov	r24, r21
    3006:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <__udivmodqi4>
    300a:	92 2b       	or	r25, r18
    300c:	9b 83       	std	Y+3, r25	; 0x03
		Buffer[3] = ((Year / 10) << 4) | (Year % 10);
    300e:	8e 2f       	mov	r24, r30
    3010:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <__udivmodqi4>
    3014:	28 2f       	mov	r18, r24
    3016:	30 e0       	ldi	r19, 0x00	; 0
    3018:	84 e0       	ldi	r24, 0x04	; 4
    301a:	22 0f       	add	r18, r18
    301c:	33 1f       	adc	r19, r19
    301e:	8a 95       	dec	r24
    3020:	e1 f7       	brne	.-8      	; 0x301a <ECUAL_DS1307_Set_date+0x56>
    3022:	8e 2f       	mov	r24, r30
    3024:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <__udivmodqi4>
    3028:	92 2b       	or	r25, r18
    302a:	9c 83       	std	Y+4, r25	; 0x04
		Err_status = Mcal_I2C_write_buffer(RTC_DS1307_ADDRESS,
    302c:	80 ed       	ldi	r24, 0xD0	; 208
    302e:	63 e0       	ldi	r22, 0x03	; 3
    3030:	ae 01       	movw	r20, r28
    3032:	4f 5f       	subi	r20, 0xFF	; 255
    3034:	5f 4f       	sbci	r21, 0xFF	; 255
    3036:	24 e0       	ldi	r18, 0x04	; 4
    3038:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <Mcal_I2C_write_buffer>
    303c:	01 c0       	rjmp	.+2      	; 0x3040 <ECUAL_DS1307_Set_date+0x7c>
    303e:	80 e0       	ldi	r24, 0x00	; 0
		RTC_DS1307_Day_REG, Buffer, 4);
	}
	return Err_status;
}
    3040:	0f 90       	pop	r0
    3042:	0f 90       	pop	r0
    3044:	0f 90       	pop	r0
    3046:	0f 90       	pop	r0
    3048:	cf 91       	pop	r28
    304a:	df 91       	pop	r29
    304c:	08 95       	ret

0000304e <ECUAL_DS1307_Set_Time>:
	};
	Err_status=Mcal_I2C_init(&I2C);
	return Err_status;
}
uint8 ECUAL_DS1307_Set_Time(uint8 Time_Mode,uint8 AM_PM, uint8 Hrs,uint8 mins,uint8 secs)
{
    304e:	0f 93       	push	r16
    3050:	df 93       	push	r29
    3052:	cf 93       	push	r28
    3054:	00 d0       	rcall	.+0      	; 0x3056 <ECUAL_DS1307_Set_Time+0x8>
    3056:	0f 92       	push	r0
    3058:	cd b7       	in	r28, 0x3d	; 61
    305a:	de b7       	in	r29, 0x3e	; 62
    305c:	e8 2f       	mov	r30, r24
    305e:	f6 2f       	mov	r31, r22
    3060:	52 2f       	mov	r21, r18
	uint8 Err_status = E_OK;
	if ( Hrs > 23 || mins > 59 || secs > 59)
    3062:	48 31       	cpi	r20, 0x18	; 24
    3064:	08 f0       	brcs	.+2      	; 0x3068 <ECUAL_DS1307_Set_Time+0x1a>
    3066:	47 c0       	rjmp	.+142    	; 0x30f6 <ECUAL_DS1307_Set_Time+0xa8>
    3068:	2c 33       	cpi	r18, 0x3C	; 60
    306a:	08 f0       	brcs	.+2      	; 0x306e <ECUAL_DS1307_Set_Time+0x20>
    306c:	44 c0       	rjmp	.+136    	; 0x30f6 <ECUAL_DS1307_Set_Time+0xa8>
    306e:	0c 33       	cpi	r16, 0x3C	; 60
    3070:	08 f0       	brcs	.+2      	; 0x3074 <ECUAL_DS1307_Set_Time+0x26>
    3072:	41 c0       	rjmp	.+130    	; 0x30f6 <ECUAL_DS1307_Set_Time+0xa8>
		Err_status = E_NOK;
	else {
		uint8 Buffer[3];
		Buffer[0] = ((secs / 10) << 4) | (secs % 10);
		Buffer[1] = ((mins / 10) << 4) | (mins % 10);
		Buffer[2] = ((Hrs / 10) << 4) | (Hrs % 10);
    3074:	84 2f       	mov	r24, r20
    3076:	6a e0       	ldi	r22, 0x0A	; 10
    3078:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <__udivmodqi4>
    307c:	28 2f       	mov	r18, r24
    307e:	30 e0       	ldi	r19, 0x00	; 0
    3080:	a4 e0       	ldi	r26, 0x04	; 4
    3082:	22 0f       	add	r18, r18
    3084:	33 1f       	adc	r19, r19
    3086:	aa 95       	dec	r26
    3088:	e1 f7       	brne	.-8      	; 0x3082 <ECUAL_DS1307_Set_Time+0x34>
    308a:	84 2f       	mov	r24, r20
    308c:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <__udivmodqi4>
    3090:	92 2b       	or	r25, r18
    3092:	9b 83       	std	Y+3, r25	; 0x03
		switch (Time_Mode) {
    3094:	e1 30       	cpi	r30, 0x01	; 1
    3096:	39 f4       	brne	.+14     	; 0x30a6 <ECUAL_DS1307_Set_Time+0x58>
		case TIME_12_HRS_MODE:
			Buffer[2] |= (TIME_12_HRS_MODE << TIME_HRS_MODE_SEL_POS);
    3098:	89 2f       	mov	r24, r25
    309a:	80 64       	ori	r24, 0x40	; 64
    309c:	8b 83       	std	Y+3, r24	; 0x03
			switch (AM_PM) {
    309e:	f1 30       	cpi	r31, 0x01	; 1
    30a0:	11 f4       	brne	.+4      	; 0x30a6 <ECUAL_DS1307_Set_Time+0x58>
			case TIME_AM:
				break;
			case TIME_PM:
				Buffer[2] |= (TIME_PM << TIME_AM_PM_SEL_POS);
    30a2:	90 66       	ori	r25, 0x60	; 96
    30a4:	9b 83       	std	Y+3, r25	; 0x03
	if ( Hrs > 23 || mins > 59 || secs > 59)
		Err_status = E_NOK;
	else {
		uint8 Buffer[3];
		Buffer[0] = ((secs / 10) << 4) | (secs % 10);
		Buffer[1] = ((mins / 10) << 4) | (mins % 10);
    30a6:	85 2f       	mov	r24, r21
    30a8:	6a e0       	ldi	r22, 0x0A	; 10
    30aa:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <__udivmodqi4>
    30ae:	28 2f       	mov	r18, r24
    30b0:	30 e0       	ldi	r19, 0x00	; 0
    30b2:	74 e0       	ldi	r23, 0x04	; 4
    30b4:	22 0f       	add	r18, r18
    30b6:	33 1f       	adc	r19, r19
    30b8:	7a 95       	dec	r23
    30ba:	e1 f7       	brne	.-8      	; 0x30b4 <ECUAL_DS1307_Set_Time+0x66>
    30bc:	85 2f       	mov	r24, r21
    30be:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <__udivmodqi4>
    30c2:	92 2b       	or	r25, r18
    30c4:	9a 83       	std	Y+2, r25	; 0x02
	uint8 Err_status = E_OK;
	if ( Hrs > 23 || mins > 59 || secs > 59)
		Err_status = E_NOK;
	else {
		uint8 Buffer[3];
		Buffer[0] = ((secs / 10) << 4) | (secs % 10);
    30c6:	80 2f       	mov	r24, r16
    30c8:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <__udivmodqi4>
    30cc:	28 2f       	mov	r18, r24
    30ce:	30 e0       	ldi	r19, 0x00	; 0
    30d0:	44 e0       	ldi	r20, 0x04	; 4
    30d2:	22 0f       	add	r18, r18
    30d4:	33 1f       	adc	r19, r19
    30d6:	4a 95       	dec	r20
    30d8:	e1 f7       	brne	.-8      	; 0x30d2 <ECUAL_DS1307_Set_Time+0x84>
    30da:	80 2f       	mov	r24, r16
    30dc:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <__udivmodqi4>
    30e0:	92 2b       	or	r25, r18
    30e2:	99 83       	std	Y+1, r25	; 0x01
			}
			break;
		case TIME_24_HRS_MODE:
			break;
		}
		Err_status = Mcal_I2C_write_buffer(RTC_DS1307_ADDRESS,
    30e4:	80 ed       	ldi	r24, 0xD0	; 208
    30e6:	60 e0       	ldi	r22, 0x00	; 0
    30e8:	ae 01       	movw	r20, r28
    30ea:	4f 5f       	subi	r20, 0xFF	; 255
    30ec:	5f 4f       	sbci	r21, 0xFF	; 255
    30ee:	23 e0       	ldi	r18, 0x03	; 3
    30f0:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <Mcal_I2C_write_buffer>
    30f4:	01 c0       	rjmp	.+2      	; 0x30f8 <ECUAL_DS1307_Set_Time+0xaa>
    30f6:	80 e0       	ldi	r24, 0x00	; 0
		RTC_DS1307_Seconds_REG, Buffer, 3);
	}
	return Err_status;
}
    30f8:	0f 90       	pop	r0
    30fa:	0f 90       	pop	r0
    30fc:	0f 90       	pop	r0
    30fe:	cf 91       	pop	r28
    3100:	df 91       	pop	r29
    3102:	0f 91       	pop	r16
    3104:	08 95       	ret

00003106 <ECUAL_DS1307_Init>:
 *      Author: Seif pc
 */
#include "Ecual_rtc.h"

uint8 ECUAL_DS1307_Init()
{
    3106:	df 93       	push	r29
    3108:	cf 93       	push	r28
    310a:	cd b7       	in	r28, 0x3d	; 61
    310c:	de b7       	in	r29, 0x3e	; 62
    310e:	27 97       	sbiw	r28, 0x07	; 7
    3110:	0f b6       	in	r0, 0x3f	; 63
    3112:	f8 94       	cli
    3114:	de bf       	out	0x3e, r29	; 62
    3116:	0f be       	out	0x3f, r0	; 63
    3118:	cd bf       	out	0x3d, r28	; 61
	uint8 Err_status=E_OK;
	I2C_CONFIG_t I2C={
			.Prescaler_Freq=TWPS_PRESCALER_64,
			.SCL_FREQ=I2C_STANDARD_MODE,
	};
    311a:	fe 01       	movw	r30, r28
    311c:	31 96       	adiw	r30, 0x01	; 1
    311e:	87 e0       	ldi	r24, 0x07	; 7
    3120:	df 01       	movw	r26, r30
    3122:	1d 92       	st	X+, r1
    3124:	8a 95       	dec	r24
    3126:	e9 f7       	brne	.-6      	; 0x3122 <ECUAL_DS1307_Init+0x1c>
    3128:	80 ea       	ldi	r24, 0xA0	; 160
    312a:	96 e8       	ldi	r25, 0x86	; 134
    312c:	a1 e0       	ldi	r26, 0x01	; 1
    312e:	b0 e0       	ldi	r27, 0x00	; 0
    3130:	89 83       	std	Y+1, r24	; 0x01
    3132:	9a 83       	std	Y+2, r25	; 0x02
    3134:	ab 83       	std	Y+3, r26	; 0x03
    3136:	bc 83       	std	Y+4, r27	; 0x04
    3138:	8d 81       	ldd	r24, Y+5	; 0x05
    313a:	83 60       	ori	r24, 0x03	; 3
    313c:	8d 83       	std	Y+5, r24	; 0x05
	Err_status=Mcal_I2C_init(&I2C);
    313e:	cf 01       	movw	r24, r30
    3140:	0e 94 44 07 	call	0xe88	; 0xe88 <Mcal_I2C_init>
	return Err_status;
}
    3144:	27 96       	adiw	r28, 0x07	; 7
    3146:	0f b6       	in	r0, 0x3f	; 63
    3148:	f8 94       	cli
    314a:	de bf       	out	0x3e, r29	; 62
    314c:	0f be       	out	0x3f, r0	; 63
    314e:	cd bf       	out	0x3d, r28	; 61
    3150:	cf 91       	pop	r28
    3152:	df 91       	pop	r29
    3154:	08 95       	ret

00003156 <main_init>:
}

void main_init()
{

}
    3156:	08 95       	ret

00003158 <main>:


uint8 Data='x';

int main()
{
    3158:	1f 93       	push	r17
	DDRD=(1<<PD0);
    315a:	81 e0       	ldi	r24, 0x01	; 1
    315c:	81 bb       	out	0x11, r24	; 17
	BitBanged_Usart_init(&Usart);
    315e:	8f e8       	ldi	r24, 0x8F	; 143
    3160:	91 e0       	ldi	r25, 0x01	; 1
    3162:	0e 94 b5 06 	call	0xd6a	; 0xd6a <BitBanged_Usart_init>
	while(1)
	{
		BitBanged_Usart_RX(&Usart,&Data);
		if(Data=='b')
		{
			PORTD^=(1<<PD0);
    3166:	11 e0       	ldi	r17, 0x01	; 1
{
	DDRD=(1<<PD0);
	BitBanged_Usart_init(&Usart);
	while(1)
	{
		BitBanged_Usart_RX(&Usart,&Data);
    3168:	8f e8       	ldi	r24, 0x8F	; 143
    316a:	91 e0       	ldi	r25, 0x01	; 1
    316c:	66 e9       	ldi	r22, 0x96	; 150
    316e:	71 e0       	ldi	r23, 0x01	; 1
    3170:	0e 94 47 05 	call	0xa8e	; 0xa8e <BitBanged_Usart_RX>
		if(Data=='b')
    3174:	80 91 96 01 	lds	r24, 0x0196
    3178:	82 36       	cpi	r24, 0x62	; 98
    317a:	b1 f7       	brne	.-20     	; 0x3168 <main+0x10>
		{
			PORTD^=(1<<PD0);
    317c:	82 b3       	in	r24, 0x12	; 18
    317e:	81 27       	eor	r24, r17
    3180:	82 bb       	out	0x12, r24	; 18
    3182:	f2 cf       	rjmp	.-28     	; 0x3168 <main+0x10>

00003184 <__mulsi3>:
    3184:	62 9f       	mul	r22, r18
    3186:	d0 01       	movw	r26, r0
    3188:	73 9f       	mul	r23, r19
    318a:	f0 01       	movw	r30, r0
    318c:	82 9f       	mul	r24, r18
    318e:	e0 0d       	add	r30, r0
    3190:	f1 1d       	adc	r31, r1
    3192:	64 9f       	mul	r22, r20
    3194:	e0 0d       	add	r30, r0
    3196:	f1 1d       	adc	r31, r1
    3198:	92 9f       	mul	r25, r18
    319a:	f0 0d       	add	r31, r0
    319c:	83 9f       	mul	r24, r19
    319e:	f0 0d       	add	r31, r0
    31a0:	74 9f       	mul	r23, r20
    31a2:	f0 0d       	add	r31, r0
    31a4:	65 9f       	mul	r22, r21
    31a6:	f0 0d       	add	r31, r0
    31a8:	99 27       	eor	r25, r25
    31aa:	72 9f       	mul	r23, r18
    31ac:	b0 0d       	add	r27, r0
    31ae:	e1 1d       	adc	r30, r1
    31b0:	f9 1f       	adc	r31, r25
    31b2:	63 9f       	mul	r22, r19
    31b4:	b0 0d       	add	r27, r0
    31b6:	e1 1d       	adc	r30, r1
    31b8:	f9 1f       	adc	r31, r25
    31ba:	bd 01       	movw	r22, r26
    31bc:	cf 01       	movw	r24, r30
    31be:	11 24       	eor	r1, r1
    31c0:	08 95       	ret

000031c2 <__udivmodqi4>:
    31c2:	99 1b       	sub	r25, r25
    31c4:	79 e0       	ldi	r23, 0x09	; 9
    31c6:	04 c0       	rjmp	.+8      	; 0x31d0 <__udivmodqi4_ep>

000031c8 <__udivmodqi4_loop>:
    31c8:	99 1f       	adc	r25, r25
    31ca:	96 17       	cp	r25, r22
    31cc:	08 f0       	brcs	.+2      	; 0x31d0 <__udivmodqi4_ep>
    31ce:	96 1b       	sub	r25, r22

000031d0 <__udivmodqi4_ep>:
    31d0:	88 1f       	adc	r24, r24
    31d2:	7a 95       	dec	r23
    31d4:	c9 f7       	brne	.-14     	; 0x31c8 <__udivmodqi4_loop>
    31d6:	80 95       	com	r24
    31d8:	08 95       	ret

000031da <__udivmodhi4>:
    31da:	aa 1b       	sub	r26, r26
    31dc:	bb 1b       	sub	r27, r27
    31de:	51 e1       	ldi	r21, 0x11	; 17
    31e0:	07 c0       	rjmp	.+14     	; 0x31f0 <__udivmodhi4_ep>

000031e2 <__udivmodhi4_loop>:
    31e2:	aa 1f       	adc	r26, r26
    31e4:	bb 1f       	adc	r27, r27
    31e6:	a6 17       	cp	r26, r22
    31e8:	b7 07       	cpc	r27, r23
    31ea:	10 f0       	brcs	.+4      	; 0x31f0 <__udivmodhi4_ep>
    31ec:	a6 1b       	sub	r26, r22
    31ee:	b7 0b       	sbc	r27, r23

000031f0 <__udivmodhi4_ep>:
    31f0:	88 1f       	adc	r24, r24
    31f2:	99 1f       	adc	r25, r25
    31f4:	5a 95       	dec	r21
    31f6:	a9 f7       	brne	.-22     	; 0x31e2 <__udivmodhi4_loop>
    31f8:	80 95       	com	r24
    31fa:	90 95       	com	r25
    31fc:	bc 01       	movw	r22, r24
    31fe:	cd 01       	movw	r24, r26
    3200:	08 95       	ret

00003202 <__divmodhi4>:
    3202:	97 fb       	bst	r25, 7
    3204:	09 2e       	mov	r0, r25
    3206:	07 26       	eor	r0, r23
    3208:	0a d0       	rcall	.+20     	; 0x321e <__divmodhi4_neg1>
    320a:	77 fd       	sbrc	r23, 7
    320c:	04 d0       	rcall	.+8      	; 0x3216 <__divmodhi4_neg2>
    320e:	e5 df       	rcall	.-54     	; 0x31da <__udivmodhi4>
    3210:	06 d0       	rcall	.+12     	; 0x321e <__divmodhi4_neg1>
    3212:	00 20       	and	r0, r0
    3214:	1a f4       	brpl	.+6      	; 0x321c <__divmodhi4_exit>

00003216 <__divmodhi4_neg2>:
    3216:	70 95       	com	r23
    3218:	61 95       	neg	r22
    321a:	7f 4f       	sbci	r23, 0xFF	; 255

0000321c <__divmodhi4_exit>:
    321c:	08 95       	ret

0000321e <__divmodhi4_neg1>:
    321e:	f6 f7       	brtc	.-4      	; 0x321c <__divmodhi4_exit>
    3220:	90 95       	com	r25
    3222:	81 95       	neg	r24
    3224:	9f 4f       	sbci	r25, 0xFF	; 255
    3226:	08 95       	ret

00003228 <__udivmodsi4>:
    3228:	a1 e2       	ldi	r26, 0x21	; 33
    322a:	1a 2e       	mov	r1, r26
    322c:	aa 1b       	sub	r26, r26
    322e:	bb 1b       	sub	r27, r27
    3230:	fd 01       	movw	r30, r26
    3232:	0d c0       	rjmp	.+26     	; 0x324e <__udivmodsi4_ep>

00003234 <__udivmodsi4_loop>:
    3234:	aa 1f       	adc	r26, r26
    3236:	bb 1f       	adc	r27, r27
    3238:	ee 1f       	adc	r30, r30
    323a:	ff 1f       	adc	r31, r31
    323c:	a2 17       	cp	r26, r18
    323e:	b3 07       	cpc	r27, r19
    3240:	e4 07       	cpc	r30, r20
    3242:	f5 07       	cpc	r31, r21
    3244:	20 f0       	brcs	.+8      	; 0x324e <__udivmodsi4_ep>
    3246:	a2 1b       	sub	r26, r18
    3248:	b3 0b       	sbc	r27, r19
    324a:	e4 0b       	sbc	r30, r20
    324c:	f5 0b       	sbc	r31, r21

0000324e <__udivmodsi4_ep>:
    324e:	66 1f       	adc	r22, r22
    3250:	77 1f       	adc	r23, r23
    3252:	88 1f       	adc	r24, r24
    3254:	99 1f       	adc	r25, r25
    3256:	1a 94       	dec	r1
    3258:	69 f7       	brne	.-38     	; 0x3234 <__udivmodsi4_loop>
    325a:	60 95       	com	r22
    325c:	70 95       	com	r23
    325e:	80 95       	com	r24
    3260:	90 95       	com	r25
    3262:	9b 01       	movw	r18, r22
    3264:	ac 01       	movw	r20, r24
    3266:	bd 01       	movw	r22, r26
    3268:	cf 01       	movw	r24, r30
    326a:	08 95       	ret

0000326c <__divmodsi4>:
    326c:	97 fb       	bst	r25, 7
    326e:	09 2e       	mov	r0, r25
    3270:	05 26       	eor	r0, r21
    3272:	0e d0       	rcall	.+28     	; 0x3290 <__divmodsi4_neg1>
    3274:	57 fd       	sbrc	r21, 7
    3276:	04 d0       	rcall	.+8      	; 0x3280 <__divmodsi4_neg2>
    3278:	d7 df       	rcall	.-82     	; 0x3228 <__udivmodsi4>
    327a:	0a d0       	rcall	.+20     	; 0x3290 <__divmodsi4_neg1>
    327c:	00 1c       	adc	r0, r0
    327e:	38 f4       	brcc	.+14     	; 0x328e <__divmodsi4_exit>

00003280 <__divmodsi4_neg2>:
    3280:	50 95       	com	r21
    3282:	40 95       	com	r20
    3284:	30 95       	com	r19
    3286:	21 95       	neg	r18
    3288:	3f 4f       	sbci	r19, 0xFF	; 255
    328a:	4f 4f       	sbci	r20, 0xFF	; 255
    328c:	5f 4f       	sbci	r21, 0xFF	; 255

0000328e <__divmodsi4_exit>:
    328e:	08 95       	ret

00003290 <__divmodsi4_neg1>:
    3290:	f6 f7       	brtc	.-4      	; 0x328e <__divmodsi4_exit>
    3292:	90 95       	com	r25
    3294:	80 95       	com	r24
    3296:	70 95       	com	r23
    3298:	61 95       	neg	r22
    329a:	7f 4f       	sbci	r23, 0xFF	; 255
    329c:	8f 4f       	sbci	r24, 0xFF	; 255
    329e:	9f 4f       	sbci	r25, 0xFF	; 255
    32a0:	08 95       	ret

000032a2 <__prologue_saves__>:
    32a2:	2f 92       	push	r2
    32a4:	3f 92       	push	r3
    32a6:	4f 92       	push	r4
    32a8:	5f 92       	push	r5
    32aa:	6f 92       	push	r6
    32ac:	7f 92       	push	r7
    32ae:	8f 92       	push	r8
    32b0:	9f 92       	push	r9
    32b2:	af 92       	push	r10
    32b4:	bf 92       	push	r11
    32b6:	cf 92       	push	r12
    32b8:	df 92       	push	r13
    32ba:	ef 92       	push	r14
    32bc:	ff 92       	push	r15
    32be:	0f 93       	push	r16
    32c0:	1f 93       	push	r17
    32c2:	cf 93       	push	r28
    32c4:	df 93       	push	r29
    32c6:	cd b7       	in	r28, 0x3d	; 61
    32c8:	de b7       	in	r29, 0x3e	; 62
    32ca:	ca 1b       	sub	r28, r26
    32cc:	db 0b       	sbc	r29, r27
    32ce:	0f b6       	in	r0, 0x3f	; 63
    32d0:	f8 94       	cli
    32d2:	de bf       	out	0x3e, r29	; 62
    32d4:	0f be       	out	0x3f, r0	; 63
    32d6:	cd bf       	out	0x3d, r28	; 61
    32d8:	09 94       	ijmp

000032da <__epilogue_restores__>:
    32da:	2a 88       	ldd	r2, Y+18	; 0x12
    32dc:	39 88       	ldd	r3, Y+17	; 0x11
    32de:	48 88       	ldd	r4, Y+16	; 0x10
    32e0:	5f 84       	ldd	r5, Y+15	; 0x0f
    32e2:	6e 84       	ldd	r6, Y+14	; 0x0e
    32e4:	7d 84       	ldd	r7, Y+13	; 0x0d
    32e6:	8c 84       	ldd	r8, Y+12	; 0x0c
    32e8:	9b 84       	ldd	r9, Y+11	; 0x0b
    32ea:	aa 84       	ldd	r10, Y+10	; 0x0a
    32ec:	b9 84       	ldd	r11, Y+9	; 0x09
    32ee:	c8 84       	ldd	r12, Y+8	; 0x08
    32f0:	df 80       	ldd	r13, Y+7	; 0x07
    32f2:	ee 80       	ldd	r14, Y+6	; 0x06
    32f4:	fd 80       	ldd	r15, Y+5	; 0x05
    32f6:	0c 81       	ldd	r16, Y+4	; 0x04
    32f8:	1b 81       	ldd	r17, Y+3	; 0x03
    32fa:	aa 81       	ldd	r26, Y+2	; 0x02
    32fc:	b9 81       	ldd	r27, Y+1	; 0x01
    32fe:	ce 0f       	add	r28, r30
    3300:	d1 1d       	adc	r29, r1
    3302:	0f b6       	in	r0, 0x3f	; 63
    3304:	f8 94       	cli
    3306:	de bf       	out	0x3e, r29	; 62
    3308:	0f be       	out	0x3f, r0	; 63
    330a:	cd bf       	out	0x3d, r28	; 61
    330c:	ed 01       	movw	r28, r26
    330e:	08 95       	ret

00003310 <strcat>:
    3310:	fb 01       	movw	r30, r22
    3312:	dc 01       	movw	r26, r24
    3314:	0d 90       	ld	r0, X+
    3316:	00 20       	and	r0, r0
    3318:	e9 f7       	brne	.-6      	; 0x3314 <strcat+0x4>
    331a:	11 97       	sbiw	r26, 0x01	; 1
    331c:	01 90       	ld	r0, Z+
    331e:	0d 92       	st	X+, r0
    3320:	00 20       	and	r0, r0
    3322:	e1 f7       	brne	.-8      	; 0x331c <strcat+0xc>
    3324:	08 95       	ret

00003326 <strncat>:
    3326:	fb 01       	movw	r30, r22
    3328:	dc 01       	movw	r26, r24
    332a:	0d 90       	ld	r0, X+
    332c:	00 20       	and	r0, r0
    332e:	e9 f7       	brne	.-6      	; 0x332a <strncat+0x4>
    3330:	11 97       	sbiw	r26, 0x01	; 1
    3332:	41 50       	subi	r20, 0x01	; 1
    3334:	50 40       	sbci	r21, 0x00	; 0
    3336:	28 f0       	brcs	.+10     	; 0x3342 <strncat+0x1c>
    3338:	01 90       	ld	r0, Z+
    333a:	00 20       	and	r0, r0
    333c:	0d 92       	st	X+, r0
    333e:	c9 f7       	brne	.-14     	; 0x3332 <strncat+0xc>
    3340:	08 95       	ret
    3342:	1c 92       	st	X, r1
    3344:	08 95       	ret

00003346 <sprintf>:
    3346:	ae e0       	ldi	r26, 0x0E	; 14
    3348:	b0 e0       	ldi	r27, 0x00	; 0
    334a:	e9 ea       	ldi	r30, 0xA9	; 169
    334c:	f9 e1       	ldi	r31, 0x19	; 25
    334e:	0c 94 5f 19 	jmp	0x32be	; 0x32be <__prologue_saves__+0x1c>
    3352:	0d 89       	ldd	r16, Y+21	; 0x15
    3354:	1e 89       	ldd	r17, Y+22	; 0x16
    3356:	86 e0       	ldi	r24, 0x06	; 6
    3358:	8c 83       	std	Y+4, r24	; 0x04
    335a:	1a 83       	std	Y+2, r17	; 0x02
    335c:	09 83       	std	Y+1, r16	; 0x01
    335e:	8f ef       	ldi	r24, 0xFF	; 255
    3360:	9f e7       	ldi	r25, 0x7F	; 127
    3362:	9e 83       	std	Y+6, r25	; 0x06
    3364:	8d 83       	std	Y+5, r24	; 0x05
    3366:	9e 01       	movw	r18, r28
    3368:	27 5e       	subi	r18, 0xE7	; 231
    336a:	3f 4f       	sbci	r19, 0xFF	; 255
    336c:	ce 01       	movw	r24, r28
    336e:	01 96       	adiw	r24, 0x01	; 1
    3370:	6f 89       	ldd	r22, Y+23	; 0x17
    3372:	78 8d       	ldd	r23, Y+24	; 0x18
    3374:	a9 01       	movw	r20, r18
    3376:	0e 94 c7 19 	call	0x338e	; 0x338e <vfprintf>
    337a:	2f 81       	ldd	r18, Y+7	; 0x07
    337c:	38 85       	ldd	r19, Y+8	; 0x08
    337e:	02 0f       	add	r16, r18
    3380:	13 1f       	adc	r17, r19
    3382:	f8 01       	movw	r30, r16
    3384:	10 82       	st	Z, r1
    3386:	2e 96       	adiw	r28, 0x0e	; 14
    3388:	e4 e0       	ldi	r30, 0x04	; 4
    338a:	0c 94 7b 19 	jmp	0x32f6	; 0x32f6 <__epilogue_restores__+0x1c>

0000338e <vfprintf>:
    338e:	ab e0       	ldi	r26, 0x0B	; 11
    3390:	b0 e0       	ldi	r27, 0x00	; 0
    3392:	ed ec       	ldi	r30, 0xCD	; 205
    3394:	f9 e1       	ldi	r31, 0x19	; 25
    3396:	0c 94 51 19 	jmp	0x32a2	; 0x32a2 <__prologue_saves__>
    339a:	3c 01       	movw	r6, r24
    339c:	2b 01       	movw	r4, r22
    339e:	5a 01       	movw	r10, r20
    33a0:	fc 01       	movw	r30, r24
    33a2:	17 82       	std	Z+7, r1	; 0x07
    33a4:	16 82       	std	Z+6, r1	; 0x06
    33a6:	83 81       	ldd	r24, Z+3	; 0x03
    33a8:	81 fd       	sbrc	r24, 1
    33aa:	03 c0       	rjmp	.+6      	; 0x33b2 <vfprintf+0x24>
    33ac:	6f ef       	ldi	r22, 0xFF	; 255
    33ae:	7f ef       	ldi	r23, 0xFF	; 255
    33b0:	c6 c1       	rjmp	.+908    	; 0x373e <vfprintf+0x3b0>
    33b2:	9a e0       	ldi	r25, 0x0A	; 10
    33b4:	89 2e       	mov	r8, r25
    33b6:	1e 01       	movw	r2, r28
    33b8:	08 94       	sec
    33ba:	21 1c       	adc	r2, r1
    33bc:	31 1c       	adc	r3, r1
    33be:	f3 01       	movw	r30, r6
    33c0:	23 81       	ldd	r18, Z+3	; 0x03
    33c2:	f2 01       	movw	r30, r4
    33c4:	23 fd       	sbrc	r18, 3
    33c6:	85 91       	lpm	r24, Z+
    33c8:	23 ff       	sbrs	r18, 3
    33ca:	81 91       	ld	r24, Z+
    33cc:	2f 01       	movw	r4, r30
    33ce:	88 23       	and	r24, r24
    33d0:	09 f4       	brne	.+2      	; 0x33d4 <vfprintf+0x46>
    33d2:	b2 c1       	rjmp	.+868    	; 0x3738 <vfprintf+0x3aa>
    33d4:	85 32       	cpi	r24, 0x25	; 37
    33d6:	39 f4       	brne	.+14     	; 0x33e6 <vfprintf+0x58>
    33d8:	23 fd       	sbrc	r18, 3
    33da:	85 91       	lpm	r24, Z+
    33dc:	23 ff       	sbrs	r18, 3
    33de:	81 91       	ld	r24, Z+
    33e0:	2f 01       	movw	r4, r30
    33e2:	85 32       	cpi	r24, 0x25	; 37
    33e4:	29 f4       	brne	.+10     	; 0x33f0 <vfprintf+0x62>
    33e6:	90 e0       	ldi	r25, 0x00	; 0
    33e8:	b3 01       	movw	r22, r6
    33ea:	0e 94 ba 1b 	call	0x3774	; 0x3774 <fputc>
    33ee:	e7 cf       	rjmp	.-50     	; 0x33be <vfprintf+0x30>
    33f0:	98 2f       	mov	r25, r24
    33f2:	ff 24       	eor	r15, r15
    33f4:	ee 24       	eor	r14, r14
    33f6:	99 24       	eor	r9, r9
    33f8:	ff e1       	ldi	r31, 0x1F	; 31
    33fa:	ff 15       	cp	r31, r15
    33fc:	d0 f0       	brcs	.+52     	; 0x3432 <vfprintf+0xa4>
    33fe:	9b 32       	cpi	r25, 0x2B	; 43
    3400:	69 f0       	breq	.+26     	; 0x341c <vfprintf+0x8e>
    3402:	9c 32       	cpi	r25, 0x2C	; 44
    3404:	28 f4       	brcc	.+10     	; 0x3410 <vfprintf+0x82>
    3406:	90 32       	cpi	r25, 0x20	; 32
    3408:	59 f0       	breq	.+22     	; 0x3420 <vfprintf+0x92>
    340a:	93 32       	cpi	r25, 0x23	; 35
    340c:	91 f4       	brne	.+36     	; 0x3432 <vfprintf+0xa4>
    340e:	0e c0       	rjmp	.+28     	; 0x342c <vfprintf+0x9e>
    3410:	9d 32       	cpi	r25, 0x2D	; 45
    3412:	49 f0       	breq	.+18     	; 0x3426 <vfprintf+0x98>
    3414:	90 33       	cpi	r25, 0x30	; 48
    3416:	69 f4       	brne	.+26     	; 0x3432 <vfprintf+0xa4>
    3418:	41 e0       	ldi	r20, 0x01	; 1
    341a:	24 c0       	rjmp	.+72     	; 0x3464 <vfprintf+0xd6>
    341c:	52 e0       	ldi	r21, 0x02	; 2
    341e:	f5 2a       	or	r15, r21
    3420:	84 e0       	ldi	r24, 0x04	; 4
    3422:	f8 2a       	or	r15, r24
    3424:	28 c0       	rjmp	.+80     	; 0x3476 <vfprintf+0xe8>
    3426:	98 e0       	ldi	r25, 0x08	; 8
    3428:	f9 2a       	or	r15, r25
    342a:	25 c0       	rjmp	.+74     	; 0x3476 <vfprintf+0xe8>
    342c:	e0 e1       	ldi	r30, 0x10	; 16
    342e:	fe 2a       	or	r15, r30
    3430:	22 c0       	rjmp	.+68     	; 0x3476 <vfprintf+0xe8>
    3432:	f7 fc       	sbrc	r15, 7
    3434:	29 c0       	rjmp	.+82     	; 0x3488 <vfprintf+0xfa>
    3436:	89 2f       	mov	r24, r25
    3438:	80 53       	subi	r24, 0x30	; 48
    343a:	8a 30       	cpi	r24, 0x0A	; 10
    343c:	70 f4       	brcc	.+28     	; 0x345a <vfprintf+0xcc>
    343e:	f6 fe       	sbrs	r15, 6
    3440:	05 c0       	rjmp	.+10     	; 0x344c <vfprintf+0xbe>
    3442:	98 9c       	mul	r9, r8
    3444:	90 2c       	mov	r9, r0
    3446:	11 24       	eor	r1, r1
    3448:	98 0e       	add	r9, r24
    344a:	15 c0       	rjmp	.+42     	; 0x3476 <vfprintf+0xe8>
    344c:	e8 9c       	mul	r14, r8
    344e:	e0 2c       	mov	r14, r0
    3450:	11 24       	eor	r1, r1
    3452:	e8 0e       	add	r14, r24
    3454:	f0 e2       	ldi	r31, 0x20	; 32
    3456:	ff 2a       	or	r15, r31
    3458:	0e c0       	rjmp	.+28     	; 0x3476 <vfprintf+0xe8>
    345a:	9e 32       	cpi	r25, 0x2E	; 46
    345c:	29 f4       	brne	.+10     	; 0x3468 <vfprintf+0xda>
    345e:	f6 fc       	sbrc	r15, 6
    3460:	6b c1       	rjmp	.+726    	; 0x3738 <vfprintf+0x3aa>
    3462:	40 e4       	ldi	r20, 0x40	; 64
    3464:	f4 2a       	or	r15, r20
    3466:	07 c0       	rjmp	.+14     	; 0x3476 <vfprintf+0xe8>
    3468:	9c 36       	cpi	r25, 0x6C	; 108
    346a:	19 f4       	brne	.+6      	; 0x3472 <vfprintf+0xe4>
    346c:	50 e8       	ldi	r21, 0x80	; 128
    346e:	f5 2a       	or	r15, r21
    3470:	02 c0       	rjmp	.+4      	; 0x3476 <vfprintf+0xe8>
    3472:	98 36       	cpi	r25, 0x68	; 104
    3474:	49 f4       	brne	.+18     	; 0x3488 <vfprintf+0xfa>
    3476:	f2 01       	movw	r30, r4
    3478:	23 fd       	sbrc	r18, 3
    347a:	95 91       	lpm	r25, Z+
    347c:	23 ff       	sbrs	r18, 3
    347e:	91 91       	ld	r25, Z+
    3480:	2f 01       	movw	r4, r30
    3482:	99 23       	and	r25, r25
    3484:	09 f0       	breq	.+2      	; 0x3488 <vfprintf+0xfa>
    3486:	b8 cf       	rjmp	.-144    	; 0x33f8 <vfprintf+0x6a>
    3488:	89 2f       	mov	r24, r25
    348a:	85 54       	subi	r24, 0x45	; 69
    348c:	83 30       	cpi	r24, 0x03	; 3
    348e:	18 f0       	brcs	.+6      	; 0x3496 <vfprintf+0x108>
    3490:	80 52       	subi	r24, 0x20	; 32
    3492:	83 30       	cpi	r24, 0x03	; 3
    3494:	38 f4       	brcc	.+14     	; 0x34a4 <vfprintf+0x116>
    3496:	44 e0       	ldi	r20, 0x04	; 4
    3498:	50 e0       	ldi	r21, 0x00	; 0
    349a:	a4 0e       	add	r10, r20
    349c:	b5 1e       	adc	r11, r21
    349e:	5f e3       	ldi	r21, 0x3F	; 63
    34a0:	59 83       	std	Y+1, r21	; 0x01
    34a2:	0f c0       	rjmp	.+30     	; 0x34c2 <vfprintf+0x134>
    34a4:	93 36       	cpi	r25, 0x63	; 99
    34a6:	31 f0       	breq	.+12     	; 0x34b4 <vfprintf+0x126>
    34a8:	93 37       	cpi	r25, 0x73	; 115
    34aa:	79 f0       	breq	.+30     	; 0x34ca <vfprintf+0x13c>
    34ac:	93 35       	cpi	r25, 0x53	; 83
    34ae:	09 f0       	breq	.+2      	; 0x34b2 <vfprintf+0x124>
    34b0:	56 c0       	rjmp	.+172    	; 0x355e <vfprintf+0x1d0>
    34b2:	20 c0       	rjmp	.+64     	; 0x34f4 <vfprintf+0x166>
    34b4:	f5 01       	movw	r30, r10
    34b6:	80 81       	ld	r24, Z
    34b8:	89 83       	std	Y+1, r24	; 0x01
    34ba:	42 e0       	ldi	r20, 0x02	; 2
    34bc:	50 e0       	ldi	r21, 0x00	; 0
    34be:	a4 0e       	add	r10, r20
    34c0:	b5 1e       	adc	r11, r21
    34c2:	61 01       	movw	r12, r2
    34c4:	01 e0       	ldi	r16, 0x01	; 1
    34c6:	10 e0       	ldi	r17, 0x00	; 0
    34c8:	12 c0       	rjmp	.+36     	; 0x34ee <vfprintf+0x160>
    34ca:	f5 01       	movw	r30, r10
    34cc:	c0 80       	ld	r12, Z
    34ce:	d1 80       	ldd	r13, Z+1	; 0x01
    34d0:	f6 fc       	sbrc	r15, 6
    34d2:	03 c0       	rjmp	.+6      	; 0x34da <vfprintf+0x14c>
    34d4:	6f ef       	ldi	r22, 0xFF	; 255
    34d6:	7f ef       	ldi	r23, 0xFF	; 255
    34d8:	02 c0       	rjmp	.+4      	; 0x34de <vfprintf+0x150>
    34da:	69 2d       	mov	r22, r9
    34dc:	70 e0       	ldi	r23, 0x00	; 0
    34de:	42 e0       	ldi	r20, 0x02	; 2
    34e0:	50 e0       	ldi	r21, 0x00	; 0
    34e2:	a4 0e       	add	r10, r20
    34e4:	b5 1e       	adc	r11, r21
    34e6:	c6 01       	movw	r24, r12
    34e8:	0e 94 af 1b 	call	0x375e	; 0x375e <strnlen>
    34ec:	8c 01       	movw	r16, r24
    34ee:	5f e7       	ldi	r21, 0x7F	; 127
    34f0:	f5 22       	and	r15, r21
    34f2:	14 c0       	rjmp	.+40     	; 0x351c <vfprintf+0x18e>
    34f4:	f5 01       	movw	r30, r10
    34f6:	c0 80       	ld	r12, Z
    34f8:	d1 80       	ldd	r13, Z+1	; 0x01
    34fa:	f6 fc       	sbrc	r15, 6
    34fc:	03 c0       	rjmp	.+6      	; 0x3504 <vfprintf+0x176>
    34fe:	6f ef       	ldi	r22, 0xFF	; 255
    3500:	7f ef       	ldi	r23, 0xFF	; 255
    3502:	02 c0       	rjmp	.+4      	; 0x3508 <vfprintf+0x17a>
    3504:	69 2d       	mov	r22, r9
    3506:	70 e0       	ldi	r23, 0x00	; 0
    3508:	42 e0       	ldi	r20, 0x02	; 2
    350a:	50 e0       	ldi	r21, 0x00	; 0
    350c:	a4 0e       	add	r10, r20
    350e:	b5 1e       	adc	r11, r21
    3510:	c6 01       	movw	r24, r12
    3512:	0e 94 a4 1b 	call	0x3748	; 0x3748 <strnlen_P>
    3516:	8c 01       	movw	r16, r24
    3518:	50 e8       	ldi	r21, 0x80	; 128
    351a:	f5 2a       	or	r15, r21
    351c:	f3 fe       	sbrs	r15, 3
    351e:	07 c0       	rjmp	.+14     	; 0x352e <vfprintf+0x1a0>
    3520:	1a c0       	rjmp	.+52     	; 0x3556 <vfprintf+0x1c8>
    3522:	80 e2       	ldi	r24, 0x20	; 32
    3524:	90 e0       	ldi	r25, 0x00	; 0
    3526:	b3 01       	movw	r22, r6
    3528:	0e 94 ba 1b 	call	0x3774	; 0x3774 <fputc>
    352c:	ea 94       	dec	r14
    352e:	8e 2d       	mov	r24, r14
    3530:	90 e0       	ldi	r25, 0x00	; 0
    3532:	08 17       	cp	r16, r24
    3534:	19 07       	cpc	r17, r25
    3536:	a8 f3       	brcs	.-22     	; 0x3522 <vfprintf+0x194>
    3538:	0e c0       	rjmp	.+28     	; 0x3556 <vfprintf+0x1c8>
    353a:	f6 01       	movw	r30, r12
    353c:	f7 fc       	sbrc	r15, 7
    353e:	85 91       	lpm	r24, Z+
    3540:	f7 fe       	sbrs	r15, 7
    3542:	81 91       	ld	r24, Z+
    3544:	6f 01       	movw	r12, r30
    3546:	90 e0       	ldi	r25, 0x00	; 0
    3548:	b3 01       	movw	r22, r6
    354a:	0e 94 ba 1b 	call	0x3774	; 0x3774 <fputc>
    354e:	e1 10       	cpse	r14, r1
    3550:	ea 94       	dec	r14
    3552:	01 50       	subi	r16, 0x01	; 1
    3554:	10 40       	sbci	r17, 0x00	; 0
    3556:	01 15       	cp	r16, r1
    3558:	11 05       	cpc	r17, r1
    355a:	79 f7       	brne	.-34     	; 0x353a <vfprintf+0x1ac>
    355c:	ea c0       	rjmp	.+468    	; 0x3732 <vfprintf+0x3a4>
    355e:	94 36       	cpi	r25, 0x64	; 100
    3560:	11 f0       	breq	.+4      	; 0x3566 <vfprintf+0x1d8>
    3562:	99 36       	cpi	r25, 0x69	; 105
    3564:	69 f5       	brne	.+90     	; 0x35c0 <vfprintf+0x232>
    3566:	f7 fe       	sbrs	r15, 7
    3568:	08 c0       	rjmp	.+16     	; 0x357a <vfprintf+0x1ec>
    356a:	f5 01       	movw	r30, r10
    356c:	20 81       	ld	r18, Z
    356e:	31 81       	ldd	r19, Z+1	; 0x01
    3570:	42 81       	ldd	r20, Z+2	; 0x02
    3572:	53 81       	ldd	r21, Z+3	; 0x03
    3574:	84 e0       	ldi	r24, 0x04	; 4
    3576:	90 e0       	ldi	r25, 0x00	; 0
    3578:	0a c0       	rjmp	.+20     	; 0x358e <vfprintf+0x200>
    357a:	f5 01       	movw	r30, r10
    357c:	80 81       	ld	r24, Z
    357e:	91 81       	ldd	r25, Z+1	; 0x01
    3580:	9c 01       	movw	r18, r24
    3582:	44 27       	eor	r20, r20
    3584:	37 fd       	sbrc	r19, 7
    3586:	40 95       	com	r20
    3588:	54 2f       	mov	r21, r20
    358a:	82 e0       	ldi	r24, 0x02	; 2
    358c:	90 e0       	ldi	r25, 0x00	; 0
    358e:	a8 0e       	add	r10, r24
    3590:	b9 1e       	adc	r11, r25
    3592:	9f e6       	ldi	r25, 0x6F	; 111
    3594:	f9 22       	and	r15, r25
    3596:	57 ff       	sbrs	r21, 7
    3598:	09 c0       	rjmp	.+18     	; 0x35ac <vfprintf+0x21e>
    359a:	50 95       	com	r21
    359c:	40 95       	com	r20
    359e:	30 95       	com	r19
    35a0:	21 95       	neg	r18
    35a2:	3f 4f       	sbci	r19, 0xFF	; 255
    35a4:	4f 4f       	sbci	r20, 0xFF	; 255
    35a6:	5f 4f       	sbci	r21, 0xFF	; 255
    35a8:	e0 e8       	ldi	r30, 0x80	; 128
    35aa:	fe 2a       	or	r15, r30
    35ac:	ca 01       	movw	r24, r20
    35ae:	b9 01       	movw	r22, r18
    35b0:	a1 01       	movw	r20, r2
    35b2:	2a e0       	ldi	r18, 0x0A	; 10
    35b4:	30 e0       	ldi	r19, 0x00	; 0
    35b6:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <__ultoa_invert>
    35ba:	d8 2e       	mov	r13, r24
    35bc:	d2 18       	sub	r13, r2
    35be:	40 c0       	rjmp	.+128    	; 0x3640 <vfprintf+0x2b2>
    35c0:	95 37       	cpi	r25, 0x75	; 117
    35c2:	29 f4       	brne	.+10     	; 0x35ce <vfprintf+0x240>
    35c4:	1f 2d       	mov	r17, r15
    35c6:	1f 7e       	andi	r17, 0xEF	; 239
    35c8:	2a e0       	ldi	r18, 0x0A	; 10
    35ca:	30 e0       	ldi	r19, 0x00	; 0
    35cc:	1d c0       	rjmp	.+58     	; 0x3608 <vfprintf+0x27a>
    35ce:	1f 2d       	mov	r17, r15
    35d0:	19 7f       	andi	r17, 0xF9	; 249
    35d2:	9f 36       	cpi	r25, 0x6F	; 111
    35d4:	61 f0       	breq	.+24     	; 0x35ee <vfprintf+0x260>
    35d6:	90 37       	cpi	r25, 0x70	; 112
    35d8:	20 f4       	brcc	.+8      	; 0x35e2 <vfprintf+0x254>
    35da:	98 35       	cpi	r25, 0x58	; 88
    35dc:	09 f0       	breq	.+2      	; 0x35e0 <vfprintf+0x252>
    35de:	ac c0       	rjmp	.+344    	; 0x3738 <vfprintf+0x3aa>
    35e0:	0f c0       	rjmp	.+30     	; 0x3600 <vfprintf+0x272>
    35e2:	90 37       	cpi	r25, 0x70	; 112
    35e4:	39 f0       	breq	.+14     	; 0x35f4 <vfprintf+0x266>
    35e6:	98 37       	cpi	r25, 0x78	; 120
    35e8:	09 f0       	breq	.+2      	; 0x35ec <vfprintf+0x25e>
    35ea:	a6 c0       	rjmp	.+332    	; 0x3738 <vfprintf+0x3aa>
    35ec:	04 c0       	rjmp	.+8      	; 0x35f6 <vfprintf+0x268>
    35ee:	28 e0       	ldi	r18, 0x08	; 8
    35f0:	30 e0       	ldi	r19, 0x00	; 0
    35f2:	0a c0       	rjmp	.+20     	; 0x3608 <vfprintf+0x27a>
    35f4:	10 61       	ori	r17, 0x10	; 16
    35f6:	14 fd       	sbrc	r17, 4
    35f8:	14 60       	ori	r17, 0x04	; 4
    35fa:	20 e1       	ldi	r18, 0x10	; 16
    35fc:	30 e0       	ldi	r19, 0x00	; 0
    35fe:	04 c0       	rjmp	.+8      	; 0x3608 <vfprintf+0x27a>
    3600:	14 fd       	sbrc	r17, 4
    3602:	16 60       	ori	r17, 0x06	; 6
    3604:	20 e1       	ldi	r18, 0x10	; 16
    3606:	32 e0       	ldi	r19, 0x02	; 2
    3608:	17 ff       	sbrs	r17, 7
    360a:	08 c0       	rjmp	.+16     	; 0x361c <vfprintf+0x28e>
    360c:	f5 01       	movw	r30, r10
    360e:	60 81       	ld	r22, Z
    3610:	71 81       	ldd	r23, Z+1	; 0x01
    3612:	82 81       	ldd	r24, Z+2	; 0x02
    3614:	93 81       	ldd	r25, Z+3	; 0x03
    3616:	44 e0       	ldi	r20, 0x04	; 4
    3618:	50 e0       	ldi	r21, 0x00	; 0
    361a:	08 c0       	rjmp	.+16     	; 0x362c <vfprintf+0x29e>
    361c:	f5 01       	movw	r30, r10
    361e:	80 81       	ld	r24, Z
    3620:	91 81       	ldd	r25, Z+1	; 0x01
    3622:	bc 01       	movw	r22, r24
    3624:	80 e0       	ldi	r24, 0x00	; 0
    3626:	90 e0       	ldi	r25, 0x00	; 0
    3628:	42 e0       	ldi	r20, 0x02	; 2
    362a:	50 e0       	ldi	r21, 0x00	; 0
    362c:	a4 0e       	add	r10, r20
    362e:	b5 1e       	adc	r11, r21
    3630:	a1 01       	movw	r20, r2
    3632:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <__ultoa_invert>
    3636:	d8 2e       	mov	r13, r24
    3638:	d2 18       	sub	r13, r2
    363a:	8f e7       	ldi	r24, 0x7F	; 127
    363c:	f8 2e       	mov	r15, r24
    363e:	f1 22       	and	r15, r17
    3640:	f6 fe       	sbrs	r15, 6
    3642:	0b c0       	rjmp	.+22     	; 0x365a <vfprintf+0x2cc>
    3644:	5e ef       	ldi	r21, 0xFE	; 254
    3646:	f5 22       	and	r15, r21
    3648:	d9 14       	cp	r13, r9
    364a:	38 f4       	brcc	.+14     	; 0x365a <vfprintf+0x2cc>
    364c:	f4 fe       	sbrs	r15, 4
    364e:	07 c0       	rjmp	.+14     	; 0x365e <vfprintf+0x2d0>
    3650:	f2 fc       	sbrc	r15, 2
    3652:	05 c0       	rjmp	.+10     	; 0x365e <vfprintf+0x2d0>
    3654:	8f ee       	ldi	r24, 0xEF	; 239
    3656:	f8 22       	and	r15, r24
    3658:	02 c0       	rjmp	.+4      	; 0x365e <vfprintf+0x2d0>
    365a:	1d 2d       	mov	r17, r13
    365c:	01 c0       	rjmp	.+2      	; 0x3660 <vfprintf+0x2d2>
    365e:	19 2d       	mov	r17, r9
    3660:	f4 fe       	sbrs	r15, 4
    3662:	0d c0       	rjmp	.+26     	; 0x367e <vfprintf+0x2f0>
    3664:	fe 01       	movw	r30, r28
    3666:	ed 0d       	add	r30, r13
    3668:	f1 1d       	adc	r31, r1
    366a:	80 81       	ld	r24, Z
    366c:	80 33       	cpi	r24, 0x30	; 48
    366e:	19 f4       	brne	.+6      	; 0x3676 <vfprintf+0x2e8>
    3670:	99 ee       	ldi	r25, 0xE9	; 233
    3672:	f9 22       	and	r15, r25
    3674:	08 c0       	rjmp	.+16     	; 0x3686 <vfprintf+0x2f8>
    3676:	1f 5f       	subi	r17, 0xFF	; 255
    3678:	f2 fe       	sbrs	r15, 2
    367a:	05 c0       	rjmp	.+10     	; 0x3686 <vfprintf+0x2f8>
    367c:	03 c0       	rjmp	.+6      	; 0x3684 <vfprintf+0x2f6>
    367e:	8f 2d       	mov	r24, r15
    3680:	86 78       	andi	r24, 0x86	; 134
    3682:	09 f0       	breq	.+2      	; 0x3686 <vfprintf+0x2f8>
    3684:	1f 5f       	subi	r17, 0xFF	; 255
    3686:	0f 2d       	mov	r16, r15
    3688:	f3 fc       	sbrc	r15, 3
    368a:	14 c0       	rjmp	.+40     	; 0x36b4 <vfprintf+0x326>
    368c:	f0 fe       	sbrs	r15, 0
    368e:	0f c0       	rjmp	.+30     	; 0x36ae <vfprintf+0x320>
    3690:	1e 15       	cp	r17, r14
    3692:	10 f0       	brcs	.+4      	; 0x3698 <vfprintf+0x30a>
    3694:	9d 2c       	mov	r9, r13
    3696:	0b c0       	rjmp	.+22     	; 0x36ae <vfprintf+0x320>
    3698:	9d 2c       	mov	r9, r13
    369a:	9e 0c       	add	r9, r14
    369c:	91 1a       	sub	r9, r17
    369e:	1e 2d       	mov	r17, r14
    36a0:	06 c0       	rjmp	.+12     	; 0x36ae <vfprintf+0x320>
    36a2:	80 e2       	ldi	r24, 0x20	; 32
    36a4:	90 e0       	ldi	r25, 0x00	; 0
    36a6:	b3 01       	movw	r22, r6
    36a8:	0e 94 ba 1b 	call	0x3774	; 0x3774 <fputc>
    36ac:	1f 5f       	subi	r17, 0xFF	; 255
    36ae:	1e 15       	cp	r17, r14
    36b0:	c0 f3       	brcs	.-16     	; 0x36a2 <vfprintf+0x314>
    36b2:	04 c0       	rjmp	.+8      	; 0x36bc <vfprintf+0x32e>
    36b4:	1e 15       	cp	r17, r14
    36b6:	10 f4       	brcc	.+4      	; 0x36bc <vfprintf+0x32e>
    36b8:	e1 1a       	sub	r14, r17
    36ba:	01 c0       	rjmp	.+2      	; 0x36be <vfprintf+0x330>
    36bc:	ee 24       	eor	r14, r14
    36be:	04 ff       	sbrs	r16, 4
    36c0:	0f c0       	rjmp	.+30     	; 0x36e0 <vfprintf+0x352>
    36c2:	80 e3       	ldi	r24, 0x30	; 48
    36c4:	90 e0       	ldi	r25, 0x00	; 0
    36c6:	b3 01       	movw	r22, r6
    36c8:	0e 94 ba 1b 	call	0x3774	; 0x3774 <fputc>
    36cc:	02 ff       	sbrs	r16, 2
    36ce:	1d c0       	rjmp	.+58     	; 0x370a <vfprintf+0x37c>
    36d0:	01 fd       	sbrc	r16, 1
    36d2:	03 c0       	rjmp	.+6      	; 0x36da <vfprintf+0x34c>
    36d4:	88 e7       	ldi	r24, 0x78	; 120
    36d6:	90 e0       	ldi	r25, 0x00	; 0
    36d8:	0e c0       	rjmp	.+28     	; 0x36f6 <vfprintf+0x368>
    36da:	88 e5       	ldi	r24, 0x58	; 88
    36dc:	90 e0       	ldi	r25, 0x00	; 0
    36de:	0b c0       	rjmp	.+22     	; 0x36f6 <vfprintf+0x368>
    36e0:	80 2f       	mov	r24, r16
    36e2:	86 78       	andi	r24, 0x86	; 134
    36e4:	91 f0       	breq	.+36     	; 0x370a <vfprintf+0x37c>
    36e6:	01 ff       	sbrs	r16, 1
    36e8:	02 c0       	rjmp	.+4      	; 0x36ee <vfprintf+0x360>
    36ea:	8b e2       	ldi	r24, 0x2B	; 43
    36ec:	01 c0       	rjmp	.+2      	; 0x36f0 <vfprintf+0x362>
    36ee:	80 e2       	ldi	r24, 0x20	; 32
    36f0:	f7 fc       	sbrc	r15, 7
    36f2:	8d e2       	ldi	r24, 0x2D	; 45
    36f4:	90 e0       	ldi	r25, 0x00	; 0
    36f6:	b3 01       	movw	r22, r6
    36f8:	0e 94 ba 1b 	call	0x3774	; 0x3774 <fputc>
    36fc:	06 c0       	rjmp	.+12     	; 0x370a <vfprintf+0x37c>
    36fe:	80 e3       	ldi	r24, 0x30	; 48
    3700:	90 e0       	ldi	r25, 0x00	; 0
    3702:	b3 01       	movw	r22, r6
    3704:	0e 94 ba 1b 	call	0x3774	; 0x3774 <fputc>
    3708:	9a 94       	dec	r9
    370a:	d9 14       	cp	r13, r9
    370c:	c0 f3       	brcs	.-16     	; 0x36fe <vfprintf+0x370>
    370e:	da 94       	dec	r13
    3710:	f1 01       	movw	r30, r2
    3712:	ed 0d       	add	r30, r13
    3714:	f1 1d       	adc	r31, r1
    3716:	80 81       	ld	r24, Z
    3718:	90 e0       	ldi	r25, 0x00	; 0
    371a:	b3 01       	movw	r22, r6
    371c:	0e 94 ba 1b 	call	0x3774	; 0x3774 <fputc>
    3720:	dd 20       	and	r13, r13
    3722:	a9 f7       	brne	.-22     	; 0x370e <vfprintf+0x380>
    3724:	06 c0       	rjmp	.+12     	; 0x3732 <vfprintf+0x3a4>
    3726:	80 e2       	ldi	r24, 0x20	; 32
    3728:	90 e0       	ldi	r25, 0x00	; 0
    372a:	b3 01       	movw	r22, r6
    372c:	0e 94 ba 1b 	call	0x3774	; 0x3774 <fputc>
    3730:	ea 94       	dec	r14
    3732:	ee 20       	and	r14, r14
    3734:	c1 f7       	brne	.-16     	; 0x3726 <vfprintf+0x398>
    3736:	43 ce       	rjmp	.-890    	; 0x33be <vfprintf+0x30>
    3738:	f3 01       	movw	r30, r6
    373a:	66 81       	ldd	r22, Z+6	; 0x06
    373c:	77 81       	ldd	r23, Z+7	; 0x07
    373e:	cb 01       	movw	r24, r22
    3740:	2b 96       	adiw	r28, 0x0b	; 11
    3742:	e2 e1       	ldi	r30, 0x12	; 18
    3744:	0c 94 6d 19 	jmp	0x32da	; 0x32da <__epilogue_restores__>

00003748 <strnlen_P>:
    3748:	fc 01       	movw	r30, r24
    374a:	05 90       	lpm	r0, Z+
    374c:	61 50       	subi	r22, 0x01	; 1
    374e:	70 40       	sbci	r23, 0x00	; 0
    3750:	01 10       	cpse	r0, r1
    3752:	d8 f7       	brcc	.-10     	; 0x374a <strnlen_P+0x2>
    3754:	80 95       	com	r24
    3756:	90 95       	com	r25
    3758:	8e 0f       	add	r24, r30
    375a:	9f 1f       	adc	r25, r31
    375c:	08 95       	ret

0000375e <strnlen>:
    375e:	fc 01       	movw	r30, r24
    3760:	61 50       	subi	r22, 0x01	; 1
    3762:	70 40       	sbci	r23, 0x00	; 0
    3764:	01 90       	ld	r0, Z+
    3766:	01 10       	cpse	r0, r1
    3768:	d8 f7       	brcc	.-10     	; 0x3760 <strnlen+0x2>
    376a:	80 95       	com	r24
    376c:	90 95       	com	r25
    376e:	8e 0f       	add	r24, r30
    3770:	9f 1f       	adc	r25, r31
    3772:	08 95       	ret

00003774 <fputc>:
    3774:	0f 93       	push	r16
    3776:	1f 93       	push	r17
    3778:	cf 93       	push	r28
    377a:	df 93       	push	r29
    377c:	8c 01       	movw	r16, r24
    377e:	eb 01       	movw	r28, r22
    3780:	8b 81       	ldd	r24, Y+3	; 0x03
    3782:	81 ff       	sbrs	r24, 1
    3784:	1b c0       	rjmp	.+54     	; 0x37bc <fputc+0x48>
    3786:	82 ff       	sbrs	r24, 2
    3788:	0d c0       	rjmp	.+26     	; 0x37a4 <fputc+0x30>
    378a:	2e 81       	ldd	r18, Y+6	; 0x06
    378c:	3f 81       	ldd	r19, Y+7	; 0x07
    378e:	8c 81       	ldd	r24, Y+4	; 0x04
    3790:	9d 81       	ldd	r25, Y+5	; 0x05
    3792:	28 17       	cp	r18, r24
    3794:	39 07       	cpc	r19, r25
    3796:	64 f4       	brge	.+24     	; 0x37b0 <fputc+0x3c>
    3798:	e8 81       	ld	r30, Y
    379a:	f9 81       	ldd	r31, Y+1	; 0x01
    379c:	01 93       	st	Z+, r16
    379e:	f9 83       	std	Y+1, r31	; 0x01
    37a0:	e8 83       	st	Y, r30
    37a2:	06 c0       	rjmp	.+12     	; 0x37b0 <fputc+0x3c>
    37a4:	e8 85       	ldd	r30, Y+8	; 0x08
    37a6:	f9 85       	ldd	r31, Y+9	; 0x09
    37a8:	80 2f       	mov	r24, r16
    37aa:	09 95       	icall
    37ac:	89 2b       	or	r24, r25
    37ae:	31 f4       	brne	.+12     	; 0x37bc <fputc+0x48>
    37b0:	8e 81       	ldd	r24, Y+6	; 0x06
    37b2:	9f 81       	ldd	r25, Y+7	; 0x07
    37b4:	01 96       	adiw	r24, 0x01	; 1
    37b6:	9f 83       	std	Y+7, r25	; 0x07
    37b8:	8e 83       	std	Y+6, r24	; 0x06
    37ba:	02 c0       	rjmp	.+4      	; 0x37c0 <fputc+0x4c>
    37bc:	0f ef       	ldi	r16, 0xFF	; 255
    37be:	1f ef       	ldi	r17, 0xFF	; 255
    37c0:	c8 01       	movw	r24, r16
    37c2:	df 91       	pop	r29
    37c4:	cf 91       	pop	r28
    37c6:	1f 91       	pop	r17
    37c8:	0f 91       	pop	r16
    37ca:	08 95       	ret

000037cc <__ultoa_invert>:
    37cc:	fa 01       	movw	r30, r20
    37ce:	aa 27       	eor	r26, r26
    37d0:	28 30       	cpi	r18, 0x08	; 8
    37d2:	51 f1       	breq	.+84     	; 0x3828 <__ultoa_invert+0x5c>
    37d4:	20 31       	cpi	r18, 0x10	; 16
    37d6:	81 f1       	breq	.+96     	; 0x3838 <__ultoa_invert+0x6c>
    37d8:	e8 94       	clt
    37da:	6f 93       	push	r22
    37dc:	6e 7f       	andi	r22, 0xFE	; 254
    37de:	6e 5f       	subi	r22, 0xFE	; 254
    37e0:	7f 4f       	sbci	r23, 0xFF	; 255
    37e2:	8f 4f       	sbci	r24, 0xFF	; 255
    37e4:	9f 4f       	sbci	r25, 0xFF	; 255
    37e6:	af 4f       	sbci	r26, 0xFF	; 255
    37e8:	b1 e0       	ldi	r27, 0x01	; 1
    37ea:	3e d0       	rcall	.+124    	; 0x3868 <__ultoa_invert+0x9c>
    37ec:	b4 e0       	ldi	r27, 0x04	; 4
    37ee:	3c d0       	rcall	.+120    	; 0x3868 <__ultoa_invert+0x9c>
    37f0:	67 0f       	add	r22, r23
    37f2:	78 1f       	adc	r23, r24
    37f4:	89 1f       	adc	r24, r25
    37f6:	9a 1f       	adc	r25, r26
    37f8:	a1 1d       	adc	r26, r1
    37fa:	68 0f       	add	r22, r24
    37fc:	79 1f       	adc	r23, r25
    37fe:	8a 1f       	adc	r24, r26
    3800:	91 1d       	adc	r25, r1
    3802:	a1 1d       	adc	r26, r1
    3804:	6a 0f       	add	r22, r26
    3806:	71 1d       	adc	r23, r1
    3808:	81 1d       	adc	r24, r1
    380a:	91 1d       	adc	r25, r1
    380c:	a1 1d       	adc	r26, r1
    380e:	20 d0       	rcall	.+64     	; 0x3850 <__ultoa_invert+0x84>
    3810:	09 f4       	brne	.+2      	; 0x3814 <__ultoa_invert+0x48>
    3812:	68 94       	set
    3814:	3f 91       	pop	r19
    3816:	2a e0       	ldi	r18, 0x0A	; 10
    3818:	26 9f       	mul	r18, r22
    381a:	11 24       	eor	r1, r1
    381c:	30 19       	sub	r19, r0
    381e:	30 5d       	subi	r19, 0xD0	; 208
    3820:	31 93       	st	Z+, r19
    3822:	de f6       	brtc	.-74     	; 0x37da <__ultoa_invert+0xe>
    3824:	cf 01       	movw	r24, r30
    3826:	08 95       	ret
    3828:	46 2f       	mov	r20, r22
    382a:	47 70       	andi	r20, 0x07	; 7
    382c:	40 5d       	subi	r20, 0xD0	; 208
    382e:	41 93       	st	Z+, r20
    3830:	b3 e0       	ldi	r27, 0x03	; 3
    3832:	0f d0       	rcall	.+30     	; 0x3852 <__ultoa_invert+0x86>
    3834:	c9 f7       	brne	.-14     	; 0x3828 <__ultoa_invert+0x5c>
    3836:	f6 cf       	rjmp	.-20     	; 0x3824 <__ultoa_invert+0x58>
    3838:	46 2f       	mov	r20, r22
    383a:	4f 70       	andi	r20, 0x0F	; 15
    383c:	40 5d       	subi	r20, 0xD0	; 208
    383e:	4a 33       	cpi	r20, 0x3A	; 58
    3840:	18 f0       	brcs	.+6      	; 0x3848 <__ultoa_invert+0x7c>
    3842:	49 5d       	subi	r20, 0xD9	; 217
    3844:	31 fd       	sbrc	r19, 1
    3846:	40 52       	subi	r20, 0x20	; 32
    3848:	41 93       	st	Z+, r20
    384a:	02 d0       	rcall	.+4      	; 0x3850 <__ultoa_invert+0x84>
    384c:	a9 f7       	brne	.-22     	; 0x3838 <__ultoa_invert+0x6c>
    384e:	ea cf       	rjmp	.-44     	; 0x3824 <__ultoa_invert+0x58>
    3850:	b4 e0       	ldi	r27, 0x04	; 4
    3852:	a6 95       	lsr	r26
    3854:	97 95       	ror	r25
    3856:	87 95       	ror	r24
    3858:	77 95       	ror	r23
    385a:	67 95       	ror	r22
    385c:	ba 95       	dec	r27
    385e:	c9 f7       	brne	.-14     	; 0x3852 <__ultoa_invert+0x86>
    3860:	00 97       	sbiw	r24, 0x00	; 0
    3862:	61 05       	cpc	r22, r1
    3864:	71 05       	cpc	r23, r1
    3866:	08 95       	ret
    3868:	9b 01       	movw	r18, r22
    386a:	ac 01       	movw	r20, r24
    386c:	0a 2e       	mov	r0, r26
    386e:	06 94       	lsr	r0
    3870:	57 95       	ror	r21
    3872:	47 95       	ror	r20
    3874:	37 95       	ror	r19
    3876:	27 95       	ror	r18
    3878:	ba 95       	dec	r27
    387a:	c9 f7       	brne	.-14     	; 0x386e <__ultoa_invert+0xa2>
    387c:	62 0f       	add	r22, r18
    387e:	73 1f       	adc	r23, r19
    3880:	84 1f       	adc	r24, r20
    3882:	95 1f       	adc	r25, r21
    3884:	a0 1d       	adc	r26, r0
    3886:	08 95       	ret

00003888 <_exit>:
    3888:	f8 94       	cli

0000388a <__stop_program>:
    388a:	ff cf       	rjmp	.-2      	; 0x388a <__stop_program>
